/*
* Copyright 2017 Ellie Mae, Inc.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*
*  1. Redistributions of source code must retain the above copyright notice,
*     this list of conditions and the following disclaimer.
*
*  2. Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*  3. Neither the name of the copyright holder nor the names of its
*     contributors may be used to endorse or promote products derived from this
*     software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.
*/

/* 
 * Loan
 *
 * Returns the entire loan or specific entities of a loan.
 *
 * OpenAPI spec version: 1.4.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Elli.Api.Loans.Client;
using Elli.Api.Loans.Model;

namespace Elli.Api.Loans.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILoansApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a new loan.
        /// </summary>
        /// <remarks>
        /// This endpoint creates a loan with options to create in specific folder, if user has permissions and also apply template to the loan. Loan can be viewed in Transient mode as well before creation.
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanFolder">Name of the Loan Folder where this loan will be created. Default - User&#39;s default folder (optional)</param>
        /// <param name="templatePath">Loan template that will be used during this Loan creation (optional)</param>
        /// <param name="persistent">Provides an option to create loan in Transient or Permanent mode (optional)</param>
        /// <param name="view">Possible values are: entity - Returns all properties for the loan. id - Returns the ID assigned to the loan. (optional)</param>
        /// <param name="loanContract"> (optional)</param>
        /// <returns>Object</returns>
        Object CreateLoan (string loanFolder = null, string templatePath = null, string persistent = null, string view = null, LoanContract loanContract = null, string loId = null);

        /// <summary>
        /// Creates a new loan.
        /// </summary>
        /// <remarks>
        /// This endpoint creates a loan with options to create in specific folder, if user has permissions and also apply template to the loan. Loan can be viewed in Transient mode as well before creation.
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanFolder">Name of the Loan Folder where this loan will be created. Default - User&#39;s default folder (optional)</param>
        /// <param name="templatePath">Loan template that will be used during this Loan creation (optional)</param>
        /// <param name="persistent">Provides an option to create loan in Transient or Permanent mode (optional)</param>
        /// <param name="view">Possible values are: entity - Returns all properties for the loan. id - Returns the ID assigned to the loan. (optional)</param>
        /// <param name="loanContract"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateLoanWithHttpInfo (string loanFolder = null, string templatePath = null, string persistent = null, string view = null, LoanContract loanContract = null, string loId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">The unique identifier assigned to the loan.</param>
        /// <returns></returns>
        void DeleteLoan (string loanId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">The unique identifier assigned to the loan.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteLoanWithHttpInfo (string loanId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">The unique identifier assigned to the loan.</param>
        /// <param name="entities">Comma-separated list of loan entities to retrieve from the loan. Use GET /loans/supportedEntities to view all supported entities. (optional)</param>
        /// <param name="format"> (optional)</param>
        /// <returns>LoanContract</returns>
        LoanContract GetLoan (string loanId, string entities = null, string format = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">The unique identifier assigned to the loan.</param>
        /// <param name="entities">Comma-separated list of loan entities to retrieve from the loan. Use GET /loans/supportedEntities to view all supported entities. (optional)</param>
        /// <param name="format"> (optional)</param>
        /// <returns>ApiResponse of LoanContract</returns>
        ApiResponse<LoanContract> GetLoanWithHttpInfo (string loanId, string entities = null, string format = null);
        /// <summary>
        /// Get Loan Metadata.
        /// </summary>
        /// <remarks>
        /// Retrieves the metadata for a specified loan.
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">The unique identifier assigned to the loan.</param>
        /// <returns>LoanMetadataContract</returns>
        LoanMetadataContract GetLoanMetaData (string loanId);

        /// <summary>
        /// Get Loan Metadata.
        /// </summary>
        /// <remarks>
        /// Retrieves the metadata for a specified loan.
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">The unique identifier assigned to the loan.</param>
        /// <returns>ApiResponse of LoanMetadataContract</returns>
        ApiResponse<LoanMetadataContract> GetLoanMetaDataWithHttpInfo (string loanId);
        /// <summary>
        /// Updates an existing loan.
        /// </summary>
        /// <remarks>
        /// This endpoint updates an existing loan with options to apply template and append data feature. Loan can be viewed in Transient mode as well.
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">The unique identifier assigned to the loan.</param>
        /// <param name="templatePath">Loan template that will be used during this Loan creation (optional)</param>
        /// <param name="persistent">Provides an option to create loan in Transient or Permanent mode (optional)</param>
        /// <param name="appendData">If true, only non-blank field values in the template are written to the loan. If false, all field values in the template (including blanks) are written to the loan. (optional)</param>
        /// <param name="loanContract"> (optional)</param>
        /// <param name="view">Possible values are: entity - Returns all properties for the loan. id - Returns the ID assigned to the loan. (optional)</param>
        /// <returns>Object</returns>
        Object UpdateLoan (string loanId, string templatePath = null, string persistent = null, string appendData = null, LoanContract loanContract = null, string view = null);

        /// <summary>
        /// Updates an existing loan.
        /// </summary>
        /// <remarks>
        /// This endpoint updates an existing loan with options to apply template and append data feature. Loan can be viewed in Transient mode as well.
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">The unique identifier assigned to the loan.</param>
        /// <param name="templatePath">Loan template that will be used during this Loan creation (optional)</param>
        /// <param name="persistent">Provides an option to create loan in Transient or Permanent mode (optional)</param>
        /// <param name="appendData">If true, only non-blank field values in the template are written to the loan. If false, all field values in the template (including blanks) are written to the loan. (optional)</param>
        /// <param name="loanContract"> (optional)</param>
        /// <param name="view">Possible values are: entity - Returns all properties for the loan. id - Returns the ID assigned to the loan. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateLoanWithHttpInfo (string loanId, string templatePath = null, string persistent = null, string appendData = null, LoanContract loanContract = null, string view = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates a new loan.
        /// </summary>
        /// <remarks>
        /// This endpoint creates a loan with options to create in specific folder, if user has permissions and also apply template to the loan. Loan can be viewed in Transient mode as well before creation.
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanFolder">Name of the Loan Folder where this loan will be created. Default - User&#39;s default folder (optional)</param>
        /// <param name="templatePath">Loan template that will be used during this Loan creation (optional)</param>
        /// <param name="persistent">Provides an option to create loan in Transient or Permanent mode (optional)</param>
        /// <param name="view">Possible values are: entity - Returns all properties for the loan. id - Returns the ID assigned to the loan. (optional)</param>
        /// <param name="loanContract"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateLoanAsync (string loanFolder = null, string templatePath = null, string persistent = null, string view = null, LoanContract loanContract = null, string loId = null);

        /// <summary>
        /// Creates a new loan.
        /// </summary>
        /// <remarks>
        /// This endpoint creates a loan with options to create in specific folder, if user has permissions and also apply template to the loan. Loan can be viewed in Transient mode as well before creation.
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanFolder">Name of the Loan Folder where this loan will be created. Default - User&#39;s default folder (optional)</param>
        /// <param name="templatePath">Loan template that will be used during this Loan creation (optional)</param>
        /// <param name="persistent">Provides an option to create loan in Transient or Permanent mode (optional)</param>
        /// <param name="view">Possible values are: entity - Returns all properties for the loan. id - Returns the ID assigned to the loan. (optional)</param>
        /// <param name="loanContract"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateLoanAsyncWithHttpInfo (string loanFolder = null, string templatePath = null, string persistent = null, string view = null, LoanContract loanContract = null, string loId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">The unique identifier assigned to the loan.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteLoanAsync (string loanId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">The unique identifier assigned to the loan.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteLoanAsyncWithHttpInfo (string loanId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">The unique identifier assigned to the loan.</param>
        /// <param name="entities">Comma-separated list of loan entities to retrieve from the loan. Use GET /loans/supportedEntities to view all supported entities. (optional)</param>
        /// <param name="format"> (optional)</param>
        /// <returns>Task of LoanContract</returns>
        System.Threading.Tasks.Task<LoanContract> GetLoanAsync (string loanId, string entities = null, string format = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">The unique identifier assigned to the loan.</param>
        /// <param name="entities">Comma-separated list of loan entities to retrieve from the loan. Use GET /loans/supportedEntities to view all supported entities. (optional)</param>
        /// <param name="format"> (optional)</param>
        /// <returns>Task of ApiResponse (LoanContract)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoanContract>> GetLoanAsyncWithHttpInfo (string loanId, string entities = null, string format = null);
        /// <summary>
        /// Get Loan Metadata.
        /// </summary>
        /// <remarks>
        /// Retrieves the metadata for a specified loan.
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">The unique identifier assigned to the loan.</param>
        /// <returns>Task of LoanMetadataContract</returns>
        System.Threading.Tasks.Task<LoanMetadataContract> GetLoanMetaDataAsync (string loanId);

        /// <summary>
        /// Get Loan Metadata.
        /// </summary>
        /// <remarks>
        /// Retrieves the metadata for a specified loan.
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">The unique identifier assigned to the loan.</param>
        /// <returns>Task of ApiResponse (LoanMetadataContract)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoanMetadataContract>> GetLoanMetaDataAsyncWithHttpInfo (string loanId);
        /// <summary>
        /// Updates an existing loan.
        /// </summary>
        /// <remarks>
        /// This endpoint updates an existing loan with options to apply template and append data feature. Loan can be viewed in Transient mode as well.
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">The unique identifier assigned to the loan.</param>
        /// <param name="templatePath">Loan template that will be used during this Loan creation (optional)</param>
        /// <param name="persistent">Provides an option to create loan in Transient or Permanent mode (optional)</param>
        /// <param name="appendData">If true, only non-blank field values in the template are written to the loan. If false, all field values in the template (including blanks) are written to the loan. (optional)</param>
        /// <param name="loanContract"> (optional)</param>
        /// <param name="view">Possible values are: entity - Returns all properties for the loan. id - Returns the ID assigned to the loan. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateLoanAsync (string loanId, string templatePath = null, string persistent = null, string appendData = null, LoanContract loanContract = null, string view = null);

        /// <summary>
        /// Updates an existing loan.
        /// </summary>
        /// <remarks>
        /// This endpoint updates an existing loan with options to apply template and append data feature. Loan can be viewed in Transient mode as well.
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">The unique identifier assigned to the loan.</param>
        /// <param name="templatePath">Loan template that will be used during this Loan creation (optional)</param>
        /// <param name="persistent">Provides an option to create loan in Transient or Permanent mode (optional)</param>
        /// <param name="appendData">If true, only non-blank field values in the template are written to the loan. If false, all field values in the template (including blanks) are written to the loan. (optional)</param>
        /// <param name="loanContract"> (optional)</param>
        /// <param name="view">Possible values are: entity - Returns all properties for the loan. id - Returns the ID assigned to the loan. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateLoanAsyncWithHttpInfo (string loanId, string templatePath = null, string persistent = null, string appendData = null, LoanContract loanContract = null, string view = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LoansApi : ILoansApi
    {
        private Elli.Api.Loans.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LoansApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LoansApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Elli.Api.Loans.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LoansApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LoansApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Elli.Api.Loans.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Elli.Api.Loans.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creates a new loan. This endpoint creates a loan with options to create in specific folder, if user has permissions and also apply template to the loan. Loan can be viewed in Transient mode as well before creation.
        /// </summary>
        /// <exception cref="Elli.Api.Loans.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanFolder">Name of the Loan Folder where this loan will be created. Default - User&#39;s default folder (optional)</param>
        /// <param name="templatePath">Loan template that will be used during this Loan creation (optional)</param>
        /// <param name="persistent">Provides an option to create loan in Transient or Permanent mode (optional)</param>
        /// <param name="view">Possible values are: entity - Returns all properties for the loan. id - Returns the ID assigned to the loan. (optional)</param>
        /// <param name="loanContract"> (optional)</param>
        /// <returns>Object</returns>
        public Object CreateLoan (string loanFolder = null, string templatePath = null, string persistent = null, string view = null, LoanContract loanContract = null, string loId = null)
        {
             ApiResponse<Object> localVarResponse = CreateLoanWithHttpInfo(loanFolder, templatePath, persistent, view, loanContract, loId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new loan. This endpoint creates a loan with options to create in specific folder, if user has permissions and also apply template to the loan. Loan can be viewed in Transient mode as well before creation.
        /// </summary>
        /// <exception cref="Elli.Api.Loans.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanFolder">Name of the Loan Folder where this loan will be created. Default - User&#39;s default folder (optional)</param>
        /// <param name="templatePath">Loan template that will be used during this Loan creation (optional)</param>
        /// <param name="persistent">Provides an option to create loan in Transient or Permanent mode (optional)</param>
        /// <param name="view">Possible values are: entity - Returns all properties for the loan. id - Returns the ID assigned to the loan. (optional)</param>
        /// <param name="loanContract"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateLoanWithHttpInfo (string loanFolder = null, string templatePath = null, string persistent = null, string view = null, LoanContract loanContract = null, string loId = null)
        {

            var localVarPath = "/encompass/v1/loans";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loanFolder != null) localVarQueryParams.Add("loanFolder", Configuration.ApiClient.ParameterToString(loanFolder)); // query parameter
            if (templatePath != null) localVarQueryParams.Add("templatePath", Configuration.ApiClient.ParameterToString(templatePath)); // query parameter
            if (persistent != null) localVarQueryParams.Add("persistent", Configuration.ApiClient.ParameterToString(persistent)); // query parameter
            if (view != null) localVarQueryParams.Add("view", Configuration.ApiClient.ParameterToString(view)); // query parameter
            if (loanContract != null && loanContract.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(loanContract); // http body (model) parameter
            }
            else
            {
                localVarPostBody = loanContract; // byte array
            }
            if (loId != null) localVarQueryParams.Add("loId", Configuration.ApiClient.ParameterToString(loId)); // query parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateLoan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Creates a new loan. This endpoint creates a loan with options to create in specific folder, if user has permissions and also apply template to the loan. Loan can be viewed in Transient mode as well before creation.
        /// </summary>
        /// <exception cref="Elli.Api.Loans.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanFolder">Name of the Loan Folder where this loan will be created. Default - User&#39;s default folder (optional)</param>
        /// <param name="templatePath">Loan template that will be used during this Loan creation (optional)</param>
        /// <param name="persistent">Provides an option to create loan in Transient or Permanent mode (optional)</param>
        /// <param name="view">Possible values are: entity - Returns all properties for the loan. id - Returns the ID assigned to the loan. (optional)</param>
        /// <param name="loanContract"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateLoanAsync (string loanFolder = null, string templatePath = null, string persistent = null, string view = null, LoanContract loanContract = null, string loId = null)
        {
             ApiResponse<Object> localVarResponse = await CreateLoanAsyncWithHttpInfo(loanFolder, templatePath, persistent, view, loanContract, loId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new loan. This endpoint creates a loan with options to create in specific folder, if user has permissions and also apply template to the loan. Loan can be viewed in Transient mode as well before creation.
        /// </summary>
        /// <exception cref="Elli.Api.Loans.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanFolder">Name of the Loan Folder where this loan will be created. Default - User&#39;s default folder (optional)</param>
        /// <param name="templatePath">Loan template that will be used during this Loan creation (optional)</param>
        /// <param name="persistent">Provides an option to create loan in Transient or Permanent mode (optional)</param>
        /// <param name="view">Possible values are: entity - Returns all properties for the loan. id - Returns the ID assigned to the loan. (optional)</param>
        /// <param name="loanContract"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateLoanAsyncWithHttpInfo (string loanFolder = null, string templatePath = null, string persistent = null, string view = null, LoanContract loanContract = null, string loId = null)
        {

            var localVarPath = "/encompass/v1/loans";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loanFolder != null) localVarQueryParams.Add("loanFolder", Configuration.ApiClient.ParameterToString(loanFolder)); // query parameter
            if (templatePath != null) localVarQueryParams.Add("templatePath", Configuration.ApiClient.ParameterToString(templatePath)); // query parameter
            if (persistent != null) localVarQueryParams.Add("persistent", Configuration.ApiClient.ParameterToString(persistent)); // query parameter
            if (view != null) localVarQueryParams.Add("view", Configuration.ApiClient.ParameterToString(view)); // query parameter
            if (loanContract != null && loanContract.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(loanContract); // http body (model) parameter
            }
            else
            {
                localVarPostBody = loanContract; // byte array
            }
            if (loId != null) localVarQueryParams.Add("loId", Configuration.ApiClient.ParameterToString(loId)); // query parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateLoan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Elli.Api.Loans.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">The unique identifier assigned to the loan.</param>
        /// <returns></returns>
        public void DeleteLoan (string loanId)
        {
             DeleteLoanWithHttpInfo(loanId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Elli.Api.Loans.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">The unique identifier assigned to the loan.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteLoanWithHttpInfo (string loanId)
        {
            // verify the required parameter 'loanId' is set
            if (loanId == null)
                throw new ApiException(400, "Missing required parameter 'loanId' when calling LoansApi->DeleteLoan");

            var localVarPath = "/encompass/v1/loans/{loanId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loanId != null) localVarPathParams.Add("loanId", Configuration.ApiClient.ParameterToString(loanId)); // path parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteLoan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Elli.Api.Loans.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">The unique identifier assigned to the loan.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteLoanAsync (string loanId)
        {
             await DeleteLoanAsyncWithHttpInfo(loanId);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Elli.Api.Loans.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">The unique identifier assigned to the loan.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteLoanAsyncWithHttpInfo (string loanId)
        {
            // verify the required parameter 'loanId' is set
            if (loanId == null)
                throw new ApiException(400, "Missing required parameter 'loanId' when calling LoansApi->DeleteLoan");

            var localVarPath = "/encompass/v1/loans/{loanId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loanId != null) localVarPathParams.Add("loanId", Configuration.ApiClient.ParameterToString(loanId)); // path parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteLoan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Elli.Api.Loans.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">The unique identifier assigned to the loan.</param>
        /// <param name="entities">Comma-separated list of loan entities to retrieve from the loan. Use GET /loans/supportedEntities to view all supported entities. (optional)</param>
        /// <param name="format"> (optional)</param>
        /// <returns>LoanContract</returns>
        public LoanContract GetLoan (string loanId, string entities = null, string format = null)
        {
             ApiResponse<LoanContract> localVarResponse = GetLoanWithHttpInfo(loanId, entities, format);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Elli.Api.Loans.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">The unique identifier assigned to the loan.</param>
        /// <param name="entities">Comma-separated list of loan entities to retrieve from the loan. Use GET /loans/supportedEntities to view all supported entities. (optional)</param>
        /// <param name="format"> (optional)</param>
        /// <returns>ApiResponse of LoanContract</returns>
        public ApiResponse< LoanContract > GetLoanWithHttpInfo (string loanId, string entities = null, string format = null)
        {
            // verify the required parameter 'loanId' is set
            if (loanId == null)
                throw new ApiException(400, "Missing required parameter 'loanId' when calling LoansApi->GetLoan");

            var localVarPath = "/encompass/v1/loans/{loanId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loanId != null) localVarPathParams.Add("loanId", Configuration.ApiClient.ParameterToString(loanId)); // path parameter
            if (entities != null) localVarQueryParams.Add("entities", Configuration.ApiClient.ParameterToString(entities)); // query parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLoan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LoanContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LoanContract) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LoanContract)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Elli.Api.Loans.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">The unique identifier assigned to the loan.</param>
        /// <param name="entities">Comma-separated list of loan entities to retrieve from the loan. Use GET /loans/supportedEntities to view all supported entities. (optional)</param>
        /// <param name="format"> (optional)</param>
        /// <returns>Task of LoanContract</returns>
        public async System.Threading.Tasks.Task<LoanContract> GetLoanAsync (string loanId, string entities = null, string format = null)
        {
             ApiResponse<LoanContract> localVarResponse = await GetLoanAsyncWithHttpInfo(loanId, entities, format);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Elli.Api.Loans.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">The unique identifier assigned to the loan.</param>
        /// <param name="entities">Comma-separated list of loan entities to retrieve from the loan. Use GET /loans/supportedEntities to view all supported entities. (optional)</param>
        /// <param name="format"> (optional)</param>
        /// <returns>Task of ApiResponse (LoanContract)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LoanContract>> GetLoanAsyncWithHttpInfo (string loanId, string entities = null, string format = null)
        {
            // verify the required parameter 'loanId' is set
            if (loanId == null)
                throw new ApiException(400, "Missing required parameter 'loanId' when calling LoansApi->GetLoan");

            var localVarPath = "/encompass/v1/loans/{loanId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loanId != null) localVarPathParams.Add("loanId", Configuration.ApiClient.ParameterToString(loanId)); // path parameter
            if (entities != null) localVarQueryParams.Add("entities", Configuration.ApiClient.ParameterToString(entities)); // query parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLoan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LoanContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LoanContract) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LoanContract)));
        }

        /// <summary>
        /// Get Loan Metadata. Retrieves the metadata for a specified loan.
        /// </summary>
        /// <exception cref="Elli.Api.Loans.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">The unique identifier assigned to the loan.</param>
        /// <returns>LoanMetadataContract</returns>
        public LoanMetadataContract GetLoanMetaData (string loanId)
        {
             ApiResponse<LoanMetadataContract> localVarResponse = GetLoanMetaDataWithHttpInfo(loanId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Loan Metadata. Retrieves the metadata for a specified loan.
        /// </summary>
        /// <exception cref="Elli.Api.Loans.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">The unique identifier assigned to the loan.</param>
        /// <returns>ApiResponse of LoanMetadataContract</returns>
        public ApiResponse< LoanMetadataContract > GetLoanMetaDataWithHttpInfo (string loanId)
        {
            // verify the required parameter 'loanId' is set
            if (loanId == null)
                throw new ApiException(400, "Missing required parameter 'loanId' when calling LoansApi->GetLoanMetaData");

            var localVarPath = "/encompass/v1/loans/{loanId}/metadata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loanId != null) localVarPathParams.Add("loanId", Configuration.ApiClient.ParameterToString(loanId)); // path parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLoanMetaData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LoanMetadataContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LoanMetadataContract) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LoanMetadataContract)));
        }

        /// <summary>
        /// Get Loan Metadata. Retrieves the metadata for a specified loan.
        /// </summary>
        /// <exception cref="Elli.Api.Loans.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">The unique identifier assigned to the loan.</param>
        /// <returns>Task of LoanMetadataContract</returns>
        public async System.Threading.Tasks.Task<LoanMetadataContract> GetLoanMetaDataAsync (string loanId)
        {
             ApiResponse<LoanMetadataContract> localVarResponse = await GetLoanMetaDataAsyncWithHttpInfo(loanId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Loan Metadata. Retrieves the metadata for a specified loan.
        /// </summary>
        /// <exception cref="Elli.Api.Loans.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">The unique identifier assigned to the loan.</param>
        /// <returns>Task of ApiResponse (LoanMetadataContract)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LoanMetadataContract>> GetLoanMetaDataAsyncWithHttpInfo (string loanId)
        {
            // verify the required parameter 'loanId' is set
            if (loanId == null)
                throw new ApiException(400, "Missing required parameter 'loanId' when calling LoansApi->GetLoanMetaData");

            var localVarPath = "/encompass/v1/loans/{loanId}/metadata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loanId != null) localVarPathParams.Add("loanId", Configuration.ApiClient.ParameterToString(loanId)); // path parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLoanMetaData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LoanMetadataContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LoanMetadataContract) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LoanMetadataContract)));
        }

        /// <summary>
        /// Updates an existing loan. This endpoint updates an existing loan with options to apply template and append data feature. Loan can be viewed in Transient mode as well.
        /// </summary>
        /// <exception cref="Elli.Api.Loans.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">The unique identifier assigned to the loan.</param>
        /// <param name="templatePath">Loan template that will be used during this Loan creation (optional)</param>
        /// <param name="persistent">Provides an option to create loan in Transient or Permanent mode (optional)</param>
        /// <param name="appendData">If true, only non-blank field values in the template are written to the loan. If false, all field values in the template (including blanks) are written to the loan. (optional)</param>
        /// <param name="loanContract"> (optional)</param>
        /// <param name="view">Possible values are: entity - Returns all properties for the loan. id - Returns the ID assigned to the loan. (optional)</param>
        /// <returns>Object</returns>
        public Object UpdateLoan (string loanId, string templatePath = null, string persistent = null, string appendData = null, LoanContract loanContract = null, string view = null)
        {
             ApiResponse<Object> localVarResponse = UpdateLoanWithHttpInfo(loanId, templatePath, persistent, appendData, loanContract, view);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates an existing loan. This endpoint updates an existing loan with options to apply template and append data feature. Loan can be viewed in Transient mode as well.
        /// </summary>
        /// <exception cref="Elli.Api.Loans.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">The unique identifier assigned to the loan.</param>
        /// <param name="templatePath">Loan template that will be used during this Loan creation (optional)</param>
        /// <param name="persistent">Provides an option to create loan in Transient or Permanent mode (optional)</param>
        /// <param name="appendData">If true, only non-blank field values in the template are written to the loan. If false, all field values in the template (including blanks) are written to the loan. (optional)</param>
        /// <param name="loanContract"> (optional)</param>
        /// <param name="view">Possible values are: entity - Returns all properties for the loan. id - Returns the ID assigned to the loan. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateLoanWithHttpInfo (string loanId, string templatePath = null, string persistent = null, string appendData = null, LoanContract loanContract = null, string view = null)
        {
            // verify the required parameter 'loanId' is set
            if (loanId == null)
                throw new ApiException(400, "Missing required parameter 'loanId' when calling LoansApi->UpdateLoan");

            var localVarPath = "/encompass/v1/loans/{loanId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loanId != null) localVarPathParams.Add("loanId", Configuration.ApiClient.ParameterToString(loanId)); // path parameter
            if (templatePath != null) localVarQueryParams.Add("templatePath", Configuration.ApiClient.ParameterToString(templatePath)); // query parameter
            if (persistent != null) localVarQueryParams.Add("persistent", Configuration.ApiClient.ParameterToString(persistent)); // query parameter
            if (appendData != null) localVarQueryParams.Add("appendData", Configuration.ApiClient.ParameterToString(appendData)); // query parameter
            if (view != null) localVarQueryParams.Add("view", Configuration.ApiClient.ParameterToString(view)); // query parameter
            if (loanContract != null && loanContract.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(loanContract); // http body (model) parameter
            }
            else
            {
                localVarPostBody = loanContract; // byte array
            }

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateLoan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Updates an existing loan. This endpoint updates an existing loan with options to apply template and append data feature. Loan can be viewed in Transient mode as well.
        /// </summary>
        /// <exception cref="Elli.Api.Loans.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">The unique identifier assigned to the loan.</param>
        /// <param name="templatePath">Loan template that will be used during this Loan creation (optional)</param>
        /// <param name="persistent">Provides an option to create loan in Transient or Permanent mode (optional)</param>
        /// <param name="appendData">If true, only non-blank field values in the template are written to the loan. If false, all field values in the template (including blanks) are written to the loan. (optional)</param>
        /// <param name="loanContract"> (optional)</param>
        /// <param name="view">Possible values are: entity - Returns all properties for the loan. id - Returns the ID assigned to the loan. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateLoanAsync (string loanId, string templatePath = null, string persistent = null, string appendData = null, LoanContract loanContract = null, string view = null)
        {
             ApiResponse<Object> localVarResponse = await UpdateLoanAsyncWithHttpInfo(loanId, templatePath, persistent, appendData, loanContract, view);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates an existing loan. This endpoint updates an existing loan with options to apply template and append data feature. Loan can be viewed in Transient mode as well.
        /// </summary>
        /// <exception cref="Elli.Api.Loans.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">The unique identifier assigned to the loan.</param>
        /// <param name="templatePath">Loan template that will be used during this Loan creation (optional)</param>
        /// <param name="persistent">Provides an option to create loan in Transient or Permanent mode (optional)</param>
        /// <param name="appendData">If true, only non-blank field values in the template are written to the loan. If false, all field values in the template (including blanks) are written to the loan. (optional)</param>
        /// <param name="loanContract"> (optional)</param>
        /// <param name="view">Possible values are: entity - Returns all properties for the loan. id - Returns the ID assigned to the loan. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateLoanAsyncWithHttpInfo (string loanId, string templatePath = null, string persistent = null, string appendData = null, LoanContract loanContract = null, string view = null)
        {
            // verify the required parameter 'loanId' is set
            if (loanId == null)
                throw new ApiException(400, "Missing required parameter 'loanId' when calling LoansApi->UpdateLoan");

            var localVarPath = "/encompass/v1/loans/{loanId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loanId != null) localVarPathParams.Add("loanId", Configuration.ApiClient.ParameterToString(loanId)); // path parameter
            if (templatePath != null) localVarQueryParams.Add("templatePath", Configuration.ApiClient.ParameterToString(templatePath)); // query parameter
            if (persistent != null) localVarQueryParams.Add("persistent", Configuration.ApiClient.ParameterToString(persistent)); // query parameter
            if (appendData != null) localVarQueryParams.Add("appendData", Configuration.ApiClient.ParameterToString(appendData)); // query parameter
            if (view != null) localVarQueryParams.Add("view", Configuration.ApiClient.ParameterToString(view)); // query parameter
            if (loanContract != null && loanContract.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(loanContract); // http body (model) parameter
            }
            else
            {
                localVarPostBody = loanContract; // byte array
            }

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateLoan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

    }
}
