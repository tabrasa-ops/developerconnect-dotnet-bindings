/*
* Copyright 2017 Ellie Mae, Inc.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*
*  1. Redistributions of source code must retain the above copyright notice,
*     this list of conditions and the following disclaimer.
*
*  2. Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*  3. Neither the name of the copyright holder nor the names of its
*     contributors may be used to endorse or promote products derived from this
*     software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.
*/


/* 
 * Loan
 *
 * Returns the entire loan or specific entities of a loan.
 *
 * OpenAPI spec version: 1.4.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Elli.Api.Loans.Client.SwaggerDateConverter;

namespace Elli.Api.Loans.Model
{
    /// <summary>
    /// LoanContractProperty
    /// </summary>
    [DataContract]
    public partial class LoanContractProperty :  IEquatable<LoanContractProperty>, IValidatableObject
    {
    
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets AssessorsParcelIdentifier
        /// </summary>
        [DataMember(Name="assessorsParcelIdentifier", EmitDefaultValue=false)]
        public string AssessorsParcelIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets BlockIdentifier
        /// </summary>
        [DataMember(Name="blockIdentifier", EmitDefaultValue=false)]
        public string BlockIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets BorrowerHomesteadIndicator
        /// </summary>
        [DataMember(Name="borrowerHomesteadIndicator", EmitDefaultValue=false)]
        public bool? BorrowerHomesteadIndicator { get; set; }

        /// <summary>
        /// Gets or Sets BuildingStatusType
        /// </summary>
        [DataMember(Name="buildingStatusType", EmitDefaultValue=false)]
        public string BuildingStatusType { get; set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// Gets or Sets CondotelIndicator
        /// </summary>
        [DataMember(Name="condotelIndicator", EmitDefaultValue=false)]
        public bool? CondotelIndicator { get; set; }

        /// <summary>
        /// Gets or Sets ConstructionImprovementCostsAmount
        /// </summary>
        [DataMember(Name="constructionImprovementCostsAmount", EmitDefaultValue=false)]
        public double? ConstructionImprovementCostsAmount { get; set; }

        /// <summary>
        /// Gets or Sets County
        /// </summary>
        [DataMember(Name="county", EmitDefaultValue=false)]
        public string County { get; set; }

        /// <summary>
        /// Gets or Sets FinancedNumberOfUnits
        /// </summary>
        [DataMember(Name="financedNumberOfUnits", EmitDefaultValue=false)]
        public int? FinancedNumberOfUnits { get; set; }

        /// <summary>
        /// Gets or Sets FloodCertificationIdentifier
        /// </summary>
        [DataMember(Name="floodCertificationIdentifier", EmitDefaultValue=false)]
        public string FloodCertificationIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets FreCashOutAmount
        /// </summary>
        [DataMember(Name="freCashOutAmount", EmitDefaultValue=false)]
        public double? FreCashOutAmount { get; set; }

        /// <summary>
        /// Gets or Sets GseRefinancePurposeType
        /// </summary>
        [DataMember(Name="gseRefinancePurposeType", EmitDefaultValue=false)]
        public string GseRefinancePurposeType { get; set; }

        /// <summary>
        /// Gets or Sets GseTitleMannerHeldDescription
        /// </summary>
        [DataMember(Name="gseTitleMannerHeldDescription", EmitDefaultValue=false)]
        public string GseTitleMannerHeldDescription { get; set; }

        /// <summary>
        /// Gets or Sets LandEstimatedValueAmount
        /// </summary>
        [DataMember(Name="landEstimatedValueAmount", EmitDefaultValue=false)]
        public double? LandEstimatedValueAmount { get; set; }

        /// <summary>
        /// Gets or Sets LegalDescriptionText1
        /// </summary>
        [DataMember(Name="legalDescriptionText1", EmitDefaultValue=false)]
        public string LegalDescriptionText1 { get; set; }

        /// <summary>
        /// Gets or Sets LegalDescriptionText2
        /// </summary>
        [DataMember(Name="legalDescriptionText2", EmitDefaultValue=false)]
        public string LegalDescriptionText2 { get; set; }

        /// <summary>
        /// Gets or Sets LoanPurposeType
        /// </summary>
        [DataMember(Name="loanPurposeType", EmitDefaultValue=false)]
        public string LoanPurposeType { get; set; }

        /// <summary>
        /// Gets or Sets LotAcres
        /// </summary>
        [DataMember(Name="lotAcres", EmitDefaultValue=false)]
        public double? LotAcres { get; set; }

        /// <summary>
        /// Gets or Sets LotIdentifier
        /// </summary>
        [DataMember(Name="lotIdentifier", EmitDefaultValue=false)]
        public string LotIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets NameRecordingJurisdiction
        /// </summary>
        [DataMember(Name="nameRecordingJurisdiction", EmitDefaultValue=false)]
        public string NameRecordingJurisdiction { get; set; }

        /// <summary>
        /// Gets or Sets NonwarrantableProjectIndicator
        /// </summary>
        [DataMember(Name="nonwarrantableProjectIndicator", EmitDefaultValue=false)]
        public bool? NonwarrantableProjectIndicator { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfStories
        /// </summary>
        [DataMember(Name="numberOfStories", EmitDefaultValue=false)]
        public double? NumberOfStories { get; set; }

        /// <summary>
        /// Gets or Sets OtherLoanPurposeDescription
        /// </summary>
        [DataMember(Name="otherLoanPurposeDescription", EmitDefaultValue=false)]
        public string OtherLoanPurposeDescription { get; set; }

        /// <summary>
        /// Gets or Sets PostalCode
        /// </summary>
        [DataMember(Name="postalCode", EmitDefaultValue=false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// Gets or Sets PriorLoanRecordationBookNumber
        /// </summary>
        [DataMember(Name="priorLoanRecordationBookNumber", EmitDefaultValue=false)]
        public string PriorLoanRecordationBookNumber { get; set; }

        /// <summary>
        /// Gets or Sets PriorLoanRecordationCurrentPrincipalAmount
        /// </summary>
        [DataMember(Name="priorLoanRecordationCurrentPrincipalAmount", EmitDefaultValue=false)]
        public double? PriorLoanRecordationCurrentPrincipalAmount { get; set; }

        /// <summary>
        /// Gets or Sets PriorLoanRecordationOriginalPrincipalAmount
        /// </summary>
        [DataMember(Name="priorLoanRecordationOriginalPrincipalAmount", EmitDefaultValue=false)]
        public double? PriorLoanRecordationOriginalPrincipalAmount { get; set; }

        /// <summary>
        /// Gets or Sets PriorLoanRecordationPageNumber
        /// </summary>
        [DataMember(Name="priorLoanRecordationPageNumber", EmitDefaultValue=false)]
        public string PriorLoanRecordationPageNumber { get; set; }

        /// <summary>
        /// Gets or Sets PropertyAcquiredYear
        /// </summary>
        [DataMember(Name="propertyAcquiredYear", EmitDefaultValue=false)]
        public string PropertyAcquiredYear { get; set; }

        /// <summary>
        /// Gets or Sets PropertyExistingLienAmount
        /// </summary>
        [DataMember(Name="propertyExistingLienAmount", EmitDefaultValue=false)]
        public double? PropertyExistingLienAmount { get; set; }

        /// <summary>
        /// Gets or Sets PropertyLeaseholdExpirationDate
        /// </summary>
        [DataMember(Name="propertyLeaseholdExpirationDate", EmitDefaultValue=false)]
        public DateTime? PropertyLeaseholdExpirationDate { get; set; }

        /// <summary>
        /// Gets or Sets PropertyOriginalCostAmount
        /// </summary>
        [DataMember(Name="propertyOriginalCostAmount", EmitDefaultValue=false)]
        public double? PropertyOriginalCostAmount { get; set; }

        /// <summary>
        /// Gets or Sets PropertyRightsType
        /// </summary>
        [DataMember(Name="propertyRightsType", EmitDefaultValue=false)]
        public string PropertyRightsType { get; set; }

        /// <summary>
        /// Gets or Sets PropertyUsageType
        /// </summary>
        [DataMember(Name="propertyUsageType", EmitDefaultValue=false)]
        public string PropertyUsageType { get; set; }

        /// <summary>
        /// Gets or Sets RefinanceImprovementCostsAmount
        /// </summary>
        [DataMember(Name="refinanceImprovementCostsAmount", EmitDefaultValue=false)]
        public double? RefinanceImprovementCostsAmount { get; set; }

        /// <summary>
        /// Gets or Sets RefinanceImprovementsType
        /// </summary>
        [DataMember(Name="refinanceImprovementsType", EmitDefaultValue=false)]
        public string RefinanceImprovementsType { get; set; }

        /// <summary>
        /// Gets or Sets RefinancePropertyAcquiredYear
        /// </summary>
        [DataMember(Name="refinancePropertyAcquiredYear", EmitDefaultValue=false)]
        public string RefinancePropertyAcquiredYear { get; set; }

        /// <summary>
        /// Gets or Sets RefinancePropertyExistingLienAmount
        /// </summary>
        [DataMember(Name="refinancePropertyExistingLienAmount", EmitDefaultValue=false)]
        public double? RefinancePropertyExistingLienAmount { get; set; }

        /// <summary>
        /// Gets or Sets RefinancePropertyOriginalCostAmount
        /// </summary>
        [DataMember(Name="refinancePropertyOriginalCostAmount", EmitDefaultValue=false)]
        public double? RefinancePropertyOriginalCostAmount { get; set; }

        /// <summary>
        /// Gets or Sets RefinanceProposedImprovementsDescription
        /// </summary>
        [DataMember(Name="refinanceProposedImprovementsDescription", EmitDefaultValue=false)]
        public string RefinanceProposedImprovementsDescription { get; set; }

        /// <summary>
        /// Gets or Sets RuralAreaIndicator
        /// </summary>
        [DataMember(Name="ruralAreaIndicator", EmitDefaultValue=false)]
        public bool? RuralAreaIndicator { get; set; }

        /// <summary>
        /// Gets or Sets SectionIdentifier
        /// </summary>
        [DataMember(Name="sectionIdentifier", EmitDefaultValue=false)]
        public string SectionIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets StreetAddress
        /// </summary>
        [DataMember(Name="streetAddress", EmitDefaultValue=false)]
        public string StreetAddress { get; set; }

        /// <summary>
        /// Gets or Sets StreetAddress2
        /// </summary>
        [DataMember(Name="streetAddress2", EmitDefaultValue=false)]
        public string StreetAddress2 { get; set; }

        /// <summary>
        /// Gets or Sets StructureBuiltYear
        /// </summary>
        [DataMember(Name="structureBuiltYear", EmitDefaultValue=false)]
        public string StructureBuiltYear { get; set; }

        /// <summary>
        /// Gets or Sets TexasContinuousMoneyLoanIndicator
        /// </summary>
        [DataMember(Name="texasContinuousMoneyLoanIndicator", EmitDefaultValue=false)]
        public bool? TexasContinuousMoneyLoanIndicator { get; set; }

        /// <summary>
        /// Gets or Sets TotalConstructionValueAmount
        /// </summary>
        [DataMember(Name="totalConstructionValueAmount", EmitDefaultValue=false)]
        public double? TotalConstructionValueAmount { get; set; }

        /// <summary>
        /// Gets or Sets TypeRecordingJurisdiction
        /// </summary>
        [DataMember(Name="typeRecordingJurisdiction", EmitDefaultValue=false)]
        public string TypeRecordingJurisdiction { get; set; }

        /// <summary>
        /// Gets or Sets UnincorporatedAreaName
        /// </summary>
        [DataMember(Name="unincorporatedAreaName", EmitDefaultValue=false)]
        public string UnincorporatedAreaName { get; set; }

        /// <summary>
        /// Gets or Sets ProdIsSpInUnderservedArea
        /// </summary>
        [DataMember(Name="prodIsSpInUnderservedArea", EmitDefaultValue=false)]
        public bool? ProdIsSpInUnderservedArea { get; set; }

        /// <summary>
        /// Gets or Sets IsConstructionPhaseDisclosedSeparately
        /// </summary>
        [DataMember(Name="isConstructionPhaseDisclosedSeparately", EmitDefaultValue=false)]
        public bool? IsConstructionPhaseDisclosedSeparately { get; set; }

        /// <summary>
        /// Gets or Sets LinkedIsConstructionPhaseDisclosedSeparately
        /// </summary>
        [DataMember(Name="linkedIsConstructionPhaseDisclosedSeparately", EmitDefaultValue=false)]
        public bool? LinkedIsConstructionPhaseDisclosedSeparately { get; set; }

        /// <summary>
        /// Gets or Sets LinkedLoanPurposeType
        /// </summary>
        [DataMember(Name="linkedLoanPurposeType", EmitDefaultValue=false)]
        public string LinkedLoanPurposeType { get; set; }

        /// <summary>
        /// Gets or Sets LinkedMortgageType
        /// </summary>
        [DataMember(Name="linkedMortgageType", EmitDefaultValue=false)]
        public string LinkedMortgageType { get; set; }

        /// <summary>
        /// Gets or Sets LinkedLienPriorityType
        /// </summary>
        [DataMember(Name="linkedLienPriorityType", EmitDefaultValue=false)]
        public string LinkedLienPriorityType { get; set; }

        /// <summary>
        /// Gets or Sets PriorLoanRecordationOriginalLoanNumber
        /// </summary>
        [DataMember(Name="priorLoanRecordationOriginalLoanNumber", EmitDefaultValue=false)]
        public string PriorLoanRecordationOriginalLoanNumber { get; set; }

        /// <summary>
        /// Gets or Sets PriorLoanRecordationDated
        /// </summary>
        [DataMember(Name="priorLoanRecordationDated", EmitDefaultValue=false)]
        public DateTime? PriorLoanRecordationDated { get; set; }

        /// <summary>
        /// Gets or Sets LinkedInitialAdvanceAmount
        /// </summary>
        [DataMember(Name="linkedInitialAdvanceAmount", EmitDefaultValue=false)]
        public double? LinkedInitialAdvanceAmount { get; set; }

        /// <summary>
        /// Gets or Sets LinkedClosedEndPrimaryMortgageLoanAmount
        /// </summary>
        [DataMember(Name="linkedClosedEndPrimaryMortgageLoanAmount", EmitDefaultValue=false)]
        public double? LinkedClosedEndPrimaryMortgageLoanAmount { get; set; }

        /// <summary>
        /// Gets or Sets LinkedClosedEndSubordinateMortgageLoanAmount
        /// </summary>
        [DataMember(Name="linkedClosedEndSubordinateMortgageLoanAmount", EmitDefaultValue=false)]
        public double? LinkedClosedEndSubordinateMortgageLoanAmount { get; set; }

        /// <summary>
        /// Gets or Sets LinkedHelocNewFinancingNotLinkedDrawAmount
        /// </summary>
        [DataMember(Name="linkedHelocNewFinancingNotLinkedDrawAmount", EmitDefaultValue=false)]
        public double? LinkedHelocNewFinancingNotLinkedDrawAmount { get; set; }

        /// <summary>
        /// Gets or Sets LinkedHelocNewFinancingNotLinkedCreditLimit
        /// </summary>
        [DataMember(Name="linkedHelocNewFinancingNotLinkedCreditLimit", EmitDefaultValue=false)]
        public double? LinkedHelocNewFinancingNotLinkedCreditLimit { get; set; }

        /// <summary>
        /// Gets or Sets LinkedAmountApplyToDownPayment
        /// </summary>
        [DataMember(Name="linkedAmountApplyToDownPayment", EmitDefaultValue=false)]
        public double? LinkedAmountApplyToDownPayment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LoanContractProperty {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AssessorsParcelIdentifier: ").Append(AssessorsParcelIdentifier).Append("\n");
            sb.Append("  BlockIdentifier: ").Append(BlockIdentifier).Append("\n");
            sb.Append("  BorrowerHomesteadIndicator: ").Append(BorrowerHomesteadIndicator).Append("\n");
            sb.Append("  BuildingStatusType: ").Append(BuildingStatusType).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  CondotelIndicator: ").Append(CondotelIndicator).Append("\n");
            sb.Append("  ConstructionImprovementCostsAmount: ").Append(ConstructionImprovementCostsAmount).Append("\n");
            sb.Append("  County: ").Append(County).Append("\n");
            sb.Append("  FinancedNumberOfUnits: ").Append(FinancedNumberOfUnits).Append("\n");
            sb.Append("  FloodCertificationIdentifier: ").Append(FloodCertificationIdentifier).Append("\n");
            sb.Append("  FreCashOutAmount: ").Append(FreCashOutAmount).Append("\n");
            sb.Append("  GseRefinancePurposeType: ").Append(GseRefinancePurposeType).Append("\n");
            sb.Append("  GseTitleMannerHeldDescription: ").Append(GseTitleMannerHeldDescription).Append("\n");
            sb.Append("  LandEstimatedValueAmount: ").Append(LandEstimatedValueAmount).Append("\n");
            sb.Append("  LegalDescriptionText1: ").Append(LegalDescriptionText1).Append("\n");
            sb.Append("  LegalDescriptionText2: ").Append(LegalDescriptionText2).Append("\n");
            sb.Append("  LoanPurposeType: ").Append(LoanPurposeType).Append("\n");
            sb.Append("  LotAcres: ").Append(LotAcres).Append("\n");
            sb.Append("  LotIdentifier: ").Append(LotIdentifier).Append("\n");
            sb.Append("  NameRecordingJurisdiction: ").Append(NameRecordingJurisdiction).Append("\n");
            sb.Append("  NonwarrantableProjectIndicator: ").Append(NonwarrantableProjectIndicator).Append("\n");
            sb.Append("  NumberOfStories: ").Append(NumberOfStories).Append("\n");
            sb.Append("  OtherLoanPurposeDescription: ").Append(OtherLoanPurposeDescription).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  PriorLoanRecordationBookNumber: ").Append(PriorLoanRecordationBookNumber).Append("\n");
            sb.Append("  PriorLoanRecordationCurrentPrincipalAmount: ").Append(PriorLoanRecordationCurrentPrincipalAmount).Append("\n");
            sb.Append("  PriorLoanRecordationOriginalPrincipalAmount: ").Append(PriorLoanRecordationOriginalPrincipalAmount).Append("\n");
            sb.Append("  PriorLoanRecordationPageNumber: ").Append(PriorLoanRecordationPageNumber).Append("\n");
            sb.Append("  PropertyAcquiredYear: ").Append(PropertyAcquiredYear).Append("\n");
            sb.Append("  PropertyExistingLienAmount: ").Append(PropertyExistingLienAmount).Append("\n");
            sb.Append("  PropertyLeaseholdExpirationDate: ").Append(PropertyLeaseholdExpirationDate).Append("\n");
            sb.Append("  PropertyOriginalCostAmount: ").Append(PropertyOriginalCostAmount).Append("\n");
            sb.Append("  PropertyRightsType: ").Append(PropertyRightsType).Append("\n");
            sb.Append("  PropertyUsageType: ").Append(PropertyUsageType).Append("\n");
            sb.Append("  RefinanceImprovementCostsAmount: ").Append(RefinanceImprovementCostsAmount).Append("\n");
            sb.Append("  RefinanceImprovementsType: ").Append(RefinanceImprovementsType).Append("\n");
            sb.Append("  RefinancePropertyAcquiredYear: ").Append(RefinancePropertyAcquiredYear).Append("\n");
            sb.Append("  RefinancePropertyExistingLienAmount: ").Append(RefinancePropertyExistingLienAmount).Append("\n");
            sb.Append("  RefinancePropertyOriginalCostAmount: ").Append(RefinancePropertyOriginalCostAmount).Append("\n");
            sb.Append("  RefinanceProposedImprovementsDescription: ").Append(RefinanceProposedImprovementsDescription).Append("\n");
            sb.Append("  RuralAreaIndicator: ").Append(RuralAreaIndicator).Append("\n");
            sb.Append("  SectionIdentifier: ").Append(SectionIdentifier).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  StreetAddress: ").Append(StreetAddress).Append("\n");
            sb.Append("  StreetAddress2: ").Append(StreetAddress2).Append("\n");
            sb.Append("  StructureBuiltYear: ").Append(StructureBuiltYear).Append("\n");
            sb.Append("  TexasContinuousMoneyLoanIndicator: ").Append(TexasContinuousMoneyLoanIndicator).Append("\n");
            sb.Append("  TotalConstructionValueAmount: ").Append(TotalConstructionValueAmount).Append("\n");
            sb.Append("  TypeRecordingJurisdiction: ").Append(TypeRecordingJurisdiction).Append("\n");
            sb.Append("  UnincorporatedAreaName: ").Append(UnincorporatedAreaName).Append("\n");
            sb.Append("  ProdIsSpInUnderservedArea: ").Append(ProdIsSpInUnderservedArea).Append("\n");
            sb.Append("  IsConstructionPhaseDisclosedSeparately: ").Append(IsConstructionPhaseDisclosedSeparately).Append("\n");
            sb.Append("  LinkedIsConstructionPhaseDisclosedSeparately: ").Append(LinkedIsConstructionPhaseDisclosedSeparately).Append("\n");
            sb.Append("  LinkedLoanPurposeType: ").Append(LinkedLoanPurposeType).Append("\n");
            sb.Append("  LinkedMortgageType: ").Append(LinkedMortgageType).Append("\n");
            sb.Append("  LinkedLienPriorityType: ").Append(LinkedLienPriorityType).Append("\n");
            sb.Append("  PriorLoanRecordationOriginalLoanNumber: ").Append(PriorLoanRecordationOriginalLoanNumber).Append("\n");
            sb.Append("  PriorLoanRecordationDated: ").Append(PriorLoanRecordationDated).Append("\n");
            sb.Append("  LinkedInitialAdvanceAmount: ").Append(LinkedInitialAdvanceAmount).Append("\n");
            sb.Append("  LinkedClosedEndPrimaryMortgageLoanAmount: ").Append(LinkedClosedEndPrimaryMortgageLoanAmount).Append("\n");
            sb.Append("  LinkedClosedEndSubordinateMortgageLoanAmount: ").Append(LinkedClosedEndSubordinateMortgageLoanAmount).Append("\n");
            sb.Append("  LinkedHelocNewFinancingNotLinkedDrawAmount: ").Append(LinkedHelocNewFinancingNotLinkedDrawAmount).Append("\n");
            sb.Append("  LinkedHelocNewFinancingNotLinkedCreditLimit: ").Append(LinkedHelocNewFinancingNotLinkedCreditLimit).Append("\n");
            sb.Append("  LinkedAmountApplyToDownPayment: ").Append(LinkedAmountApplyToDownPayment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LoanContractProperty);
        }

        /// <summary>
        /// Returns true if LoanContractProperty instances are equal
        /// </summary>
        /// <param name="input">Instance of LoanContractProperty to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoanContractProperty input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.AssessorsParcelIdentifier == input.AssessorsParcelIdentifier ||
                    (this.AssessorsParcelIdentifier != null &&
                    this.AssessorsParcelIdentifier.Equals(input.AssessorsParcelIdentifier))
                ) && 
                (
                    this.BlockIdentifier == input.BlockIdentifier ||
                    (this.BlockIdentifier != null &&
                    this.BlockIdentifier.Equals(input.BlockIdentifier))
                ) && 
                (
                    this.BorrowerHomesteadIndicator == input.BorrowerHomesteadIndicator ||
                    (this.BorrowerHomesteadIndicator != null &&
                    this.BorrowerHomesteadIndicator.Equals(input.BorrowerHomesteadIndicator))
                ) && 
                (
                    this.BuildingStatusType == input.BuildingStatusType ||
                    (this.BuildingStatusType != null &&
                    this.BuildingStatusType.Equals(input.BuildingStatusType))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.CondotelIndicator == input.CondotelIndicator ||
                    (this.CondotelIndicator != null &&
                    this.CondotelIndicator.Equals(input.CondotelIndicator))
                ) && 
                (
                    this.ConstructionImprovementCostsAmount == input.ConstructionImprovementCostsAmount ||
                    (this.ConstructionImprovementCostsAmount != null &&
                    this.ConstructionImprovementCostsAmount.Equals(input.ConstructionImprovementCostsAmount))
                ) && 
                (
                    this.County == input.County ||
                    (this.County != null &&
                    this.County.Equals(input.County))
                ) && 
                (
                    this.FinancedNumberOfUnits == input.FinancedNumberOfUnits ||
                    (this.FinancedNumberOfUnits != null &&
                    this.FinancedNumberOfUnits.Equals(input.FinancedNumberOfUnits))
                ) && 
                (
                    this.FloodCertificationIdentifier == input.FloodCertificationIdentifier ||
                    (this.FloodCertificationIdentifier != null &&
                    this.FloodCertificationIdentifier.Equals(input.FloodCertificationIdentifier))
                ) && 
                (
                    this.FreCashOutAmount == input.FreCashOutAmount ||
                    (this.FreCashOutAmount != null &&
                    this.FreCashOutAmount.Equals(input.FreCashOutAmount))
                ) && 
                (
                    this.GseRefinancePurposeType == input.GseRefinancePurposeType ||
                    (this.GseRefinancePurposeType != null &&
                    this.GseRefinancePurposeType.Equals(input.GseRefinancePurposeType))
                ) && 
                (
                    this.GseTitleMannerHeldDescription == input.GseTitleMannerHeldDescription ||
                    (this.GseTitleMannerHeldDescription != null &&
                    this.GseTitleMannerHeldDescription.Equals(input.GseTitleMannerHeldDescription))
                ) && 
                (
                    this.LandEstimatedValueAmount == input.LandEstimatedValueAmount ||
                    (this.LandEstimatedValueAmount != null &&
                    this.LandEstimatedValueAmount.Equals(input.LandEstimatedValueAmount))
                ) && 
                (
                    this.LegalDescriptionText1 == input.LegalDescriptionText1 ||
                    (this.LegalDescriptionText1 != null &&
                    this.LegalDescriptionText1.Equals(input.LegalDescriptionText1))
                ) && 
                (
                    this.LegalDescriptionText2 == input.LegalDescriptionText2 ||
                    (this.LegalDescriptionText2 != null &&
                    this.LegalDescriptionText2.Equals(input.LegalDescriptionText2))
                ) && 
                (
                    this.LoanPurposeType == input.LoanPurposeType ||
                    (this.LoanPurposeType != null &&
                    this.LoanPurposeType.Equals(input.LoanPurposeType))
                ) && 
                (
                    this.LotAcres == input.LotAcres ||
                    (this.LotAcres != null &&
                    this.LotAcres.Equals(input.LotAcres))
                ) && 
                (
                    this.LotIdentifier == input.LotIdentifier ||
                    (this.LotIdentifier != null &&
                    this.LotIdentifier.Equals(input.LotIdentifier))
                ) && 
                (
                    this.NameRecordingJurisdiction == input.NameRecordingJurisdiction ||
                    (this.NameRecordingJurisdiction != null &&
                    this.NameRecordingJurisdiction.Equals(input.NameRecordingJurisdiction))
                ) && 
                (
                    this.NonwarrantableProjectIndicator == input.NonwarrantableProjectIndicator ||
                    (this.NonwarrantableProjectIndicator != null &&
                    this.NonwarrantableProjectIndicator.Equals(input.NonwarrantableProjectIndicator))
                ) && 
                (
                    this.NumberOfStories == input.NumberOfStories ||
                    (this.NumberOfStories != null &&
                    this.NumberOfStories.Equals(input.NumberOfStories))
                ) && 
                (
                    this.OtherLoanPurposeDescription == input.OtherLoanPurposeDescription ||
                    (this.OtherLoanPurposeDescription != null &&
                    this.OtherLoanPurposeDescription.Equals(input.OtherLoanPurposeDescription))
                ) && 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && 
                (
                    this.PriorLoanRecordationBookNumber == input.PriorLoanRecordationBookNumber ||
                    (this.PriorLoanRecordationBookNumber != null &&
                    this.PriorLoanRecordationBookNumber.Equals(input.PriorLoanRecordationBookNumber))
                ) && 
                (
                    this.PriorLoanRecordationCurrentPrincipalAmount == input.PriorLoanRecordationCurrentPrincipalAmount ||
                    (this.PriorLoanRecordationCurrentPrincipalAmount != null &&
                    this.PriorLoanRecordationCurrentPrincipalAmount.Equals(input.PriorLoanRecordationCurrentPrincipalAmount))
                ) && 
                (
                    this.PriorLoanRecordationOriginalPrincipalAmount == input.PriorLoanRecordationOriginalPrincipalAmount ||
                    (this.PriorLoanRecordationOriginalPrincipalAmount != null &&
                    this.PriorLoanRecordationOriginalPrincipalAmount.Equals(input.PriorLoanRecordationOriginalPrincipalAmount))
                ) && 
                (
                    this.PriorLoanRecordationPageNumber == input.PriorLoanRecordationPageNumber ||
                    (this.PriorLoanRecordationPageNumber != null &&
                    this.PriorLoanRecordationPageNumber.Equals(input.PriorLoanRecordationPageNumber))
                ) && 
                (
                    this.PropertyAcquiredYear == input.PropertyAcquiredYear ||
                    (this.PropertyAcquiredYear != null &&
                    this.PropertyAcquiredYear.Equals(input.PropertyAcquiredYear))
                ) && 
                (
                    this.PropertyExistingLienAmount == input.PropertyExistingLienAmount ||
                    (this.PropertyExistingLienAmount != null &&
                    this.PropertyExistingLienAmount.Equals(input.PropertyExistingLienAmount))
                ) && 
                (
                    this.PropertyLeaseholdExpirationDate == input.PropertyLeaseholdExpirationDate ||
                    (this.PropertyLeaseholdExpirationDate != null &&
                    this.PropertyLeaseholdExpirationDate.Equals(input.PropertyLeaseholdExpirationDate))
                ) && 
                (
                    this.PropertyOriginalCostAmount == input.PropertyOriginalCostAmount ||
                    (this.PropertyOriginalCostAmount != null &&
                    this.PropertyOriginalCostAmount.Equals(input.PropertyOriginalCostAmount))
                ) && 
                (
                    this.PropertyRightsType == input.PropertyRightsType ||
                    (this.PropertyRightsType != null &&
                    this.PropertyRightsType.Equals(input.PropertyRightsType))
                ) && 
                (
                    this.PropertyUsageType == input.PropertyUsageType ||
                    (this.PropertyUsageType != null &&
                    this.PropertyUsageType.Equals(input.PropertyUsageType))
                ) && 
                (
                    this.RefinanceImprovementCostsAmount == input.RefinanceImprovementCostsAmount ||
                    (this.RefinanceImprovementCostsAmount != null &&
                    this.RefinanceImprovementCostsAmount.Equals(input.RefinanceImprovementCostsAmount))
                ) && 
                (
                    this.RefinanceImprovementsType == input.RefinanceImprovementsType ||
                    (this.RefinanceImprovementsType != null &&
                    this.RefinanceImprovementsType.Equals(input.RefinanceImprovementsType))
                ) && 
                (
                    this.RefinancePropertyAcquiredYear == input.RefinancePropertyAcquiredYear ||
                    (this.RefinancePropertyAcquiredYear != null &&
                    this.RefinancePropertyAcquiredYear.Equals(input.RefinancePropertyAcquiredYear))
                ) && 
                (
                    this.RefinancePropertyExistingLienAmount == input.RefinancePropertyExistingLienAmount ||
                    (this.RefinancePropertyExistingLienAmount != null &&
                    this.RefinancePropertyExistingLienAmount.Equals(input.RefinancePropertyExistingLienAmount))
                ) && 
                (
                    this.RefinancePropertyOriginalCostAmount == input.RefinancePropertyOriginalCostAmount ||
                    (this.RefinancePropertyOriginalCostAmount != null &&
                    this.RefinancePropertyOriginalCostAmount.Equals(input.RefinancePropertyOriginalCostAmount))
                ) && 
                (
                    this.RefinanceProposedImprovementsDescription == input.RefinanceProposedImprovementsDescription ||
                    (this.RefinanceProposedImprovementsDescription != null &&
                    this.RefinanceProposedImprovementsDescription.Equals(input.RefinanceProposedImprovementsDescription))
                ) && 
                (
                    this.RuralAreaIndicator == input.RuralAreaIndicator ||
                    (this.RuralAreaIndicator != null &&
                    this.RuralAreaIndicator.Equals(input.RuralAreaIndicator))
                ) && 
                (
                    this.SectionIdentifier == input.SectionIdentifier ||
                    (this.SectionIdentifier != null &&
                    this.SectionIdentifier.Equals(input.SectionIdentifier))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.StreetAddress == input.StreetAddress ||
                    (this.StreetAddress != null &&
                    this.StreetAddress.Equals(input.StreetAddress))
                ) && 
                (
                    this.StreetAddress2 == input.StreetAddress2 ||
                    (this.StreetAddress2 != null &&
                    this.StreetAddress2.Equals(input.StreetAddress2))
                ) && 
                (
                    this.StructureBuiltYear == input.StructureBuiltYear ||
                    (this.StructureBuiltYear != null &&
                    this.StructureBuiltYear.Equals(input.StructureBuiltYear))
                ) && 
                (
                    this.TexasContinuousMoneyLoanIndicator == input.TexasContinuousMoneyLoanIndicator ||
                    (this.TexasContinuousMoneyLoanIndicator != null &&
                    this.TexasContinuousMoneyLoanIndicator.Equals(input.TexasContinuousMoneyLoanIndicator))
                ) && 
                (
                    this.TotalConstructionValueAmount == input.TotalConstructionValueAmount ||
                    (this.TotalConstructionValueAmount != null &&
                    this.TotalConstructionValueAmount.Equals(input.TotalConstructionValueAmount))
                ) && 
                (
                    this.TypeRecordingJurisdiction == input.TypeRecordingJurisdiction ||
                    (this.TypeRecordingJurisdiction != null &&
                    this.TypeRecordingJurisdiction.Equals(input.TypeRecordingJurisdiction))
                ) && 
                (
                    this.UnincorporatedAreaName == input.UnincorporatedAreaName ||
                    (this.UnincorporatedAreaName != null &&
                    this.UnincorporatedAreaName.Equals(input.UnincorporatedAreaName))
                ) && 
                (
                    this.ProdIsSpInUnderservedArea == input.ProdIsSpInUnderservedArea ||
                    (this.ProdIsSpInUnderservedArea != null &&
                    this.ProdIsSpInUnderservedArea.Equals(input.ProdIsSpInUnderservedArea))
                ) && 
                (
                    this.IsConstructionPhaseDisclosedSeparately == input.IsConstructionPhaseDisclosedSeparately ||
                    (this.IsConstructionPhaseDisclosedSeparately != null &&
                    this.IsConstructionPhaseDisclosedSeparately.Equals(input.IsConstructionPhaseDisclosedSeparately))
                ) && 
                (
                    this.LinkedIsConstructionPhaseDisclosedSeparately == input.LinkedIsConstructionPhaseDisclosedSeparately ||
                    (this.LinkedIsConstructionPhaseDisclosedSeparately != null &&
                    this.LinkedIsConstructionPhaseDisclosedSeparately.Equals(input.LinkedIsConstructionPhaseDisclosedSeparately))
                ) && 
                (
                    this.LinkedLoanPurposeType == input.LinkedLoanPurposeType ||
                    (this.LinkedLoanPurposeType != null &&
                    this.LinkedLoanPurposeType.Equals(input.LinkedLoanPurposeType))
                ) && 
                (
                    this.LinkedMortgageType == input.LinkedMortgageType ||
                    (this.LinkedMortgageType != null &&
                    this.LinkedMortgageType.Equals(input.LinkedMortgageType))
                ) && 
                (
                    this.LinkedLienPriorityType == input.LinkedLienPriorityType ||
                    (this.LinkedLienPriorityType != null &&
                    this.LinkedLienPriorityType.Equals(input.LinkedLienPriorityType))
                ) && 
                (
                    this.PriorLoanRecordationOriginalLoanNumber == input.PriorLoanRecordationOriginalLoanNumber ||
                    (this.PriorLoanRecordationOriginalLoanNumber != null &&
                    this.PriorLoanRecordationOriginalLoanNumber.Equals(input.PriorLoanRecordationOriginalLoanNumber))
                ) && 
                (
                    this.PriorLoanRecordationDated == input.PriorLoanRecordationDated ||
                    (this.PriorLoanRecordationDated != null &&
                    this.PriorLoanRecordationDated.Equals(input.PriorLoanRecordationDated))
                ) && 
                (
                    this.LinkedInitialAdvanceAmount == input.LinkedInitialAdvanceAmount ||
                    (this.LinkedInitialAdvanceAmount != null &&
                    this.LinkedInitialAdvanceAmount.Equals(input.LinkedInitialAdvanceAmount))
                ) && 
                (
                    this.LinkedClosedEndPrimaryMortgageLoanAmount == input.LinkedClosedEndPrimaryMortgageLoanAmount ||
                    (this.LinkedClosedEndPrimaryMortgageLoanAmount != null &&
                    this.LinkedClosedEndPrimaryMortgageLoanAmount.Equals(input.LinkedClosedEndPrimaryMortgageLoanAmount))
                ) && 
                (
                    this.LinkedClosedEndSubordinateMortgageLoanAmount == input.LinkedClosedEndSubordinateMortgageLoanAmount ||
                    (this.LinkedClosedEndSubordinateMortgageLoanAmount != null &&
                    this.LinkedClosedEndSubordinateMortgageLoanAmount.Equals(input.LinkedClosedEndSubordinateMortgageLoanAmount))
                ) && 
                (
                    this.LinkedHelocNewFinancingNotLinkedDrawAmount == input.LinkedHelocNewFinancingNotLinkedDrawAmount ||
                    (this.LinkedHelocNewFinancingNotLinkedDrawAmount != null &&
                    this.LinkedHelocNewFinancingNotLinkedDrawAmount.Equals(input.LinkedHelocNewFinancingNotLinkedDrawAmount))
                ) && 
                (
                    this.LinkedHelocNewFinancingNotLinkedCreditLimit == input.LinkedHelocNewFinancingNotLinkedCreditLimit ||
                    (this.LinkedHelocNewFinancingNotLinkedCreditLimit != null &&
                    this.LinkedHelocNewFinancingNotLinkedCreditLimit.Equals(input.LinkedHelocNewFinancingNotLinkedCreditLimit))
                ) && 
                (
                    this.LinkedAmountApplyToDownPayment == input.LinkedAmountApplyToDownPayment ||
                    (this.LinkedAmountApplyToDownPayment != null &&
                    this.LinkedAmountApplyToDownPayment.Equals(input.LinkedAmountApplyToDownPayment))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.AssessorsParcelIdentifier != null)
                    hashCode = hashCode * 59 + this.AssessorsParcelIdentifier.GetHashCode();
                if (this.BlockIdentifier != null)
                    hashCode = hashCode * 59 + this.BlockIdentifier.GetHashCode();
                if (this.BorrowerHomesteadIndicator != null)
                    hashCode = hashCode * 59 + this.BorrowerHomesteadIndicator.GetHashCode();
                if (this.BuildingStatusType != null)
                    hashCode = hashCode * 59 + this.BuildingStatusType.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.CondotelIndicator != null)
                    hashCode = hashCode * 59 + this.CondotelIndicator.GetHashCode();
                if (this.ConstructionImprovementCostsAmount != null)
                    hashCode = hashCode * 59 + this.ConstructionImprovementCostsAmount.GetHashCode();
                if (this.County != null)
                    hashCode = hashCode * 59 + this.County.GetHashCode();
                if (this.FinancedNumberOfUnits != null)
                    hashCode = hashCode * 59 + this.FinancedNumberOfUnits.GetHashCode();
                if (this.FloodCertificationIdentifier != null)
                    hashCode = hashCode * 59 + this.FloodCertificationIdentifier.GetHashCode();
                if (this.FreCashOutAmount != null)
                    hashCode = hashCode * 59 + this.FreCashOutAmount.GetHashCode();
                if (this.GseRefinancePurposeType != null)
                    hashCode = hashCode * 59 + this.GseRefinancePurposeType.GetHashCode();
                if (this.GseTitleMannerHeldDescription != null)
                    hashCode = hashCode * 59 + this.GseTitleMannerHeldDescription.GetHashCode();
                if (this.LandEstimatedValueAmount != null)
                    hashCode = hashCode * 59 + this.LandEstimatedValueAmount.GetHashCode();
                if (this.LegalDescriptionText1 != null)
                    hashCode = hashCode * 59 + this.LegalDescriptionText1.GetHashCode();
                if (this.LegalDescriptionText2 != null)
                    hashCode = hashCode * 59 + this.LegalDescriptionText2.GetHashCode();
                if (this.LoanPurposeType != null)
                    hashCode = hashCode * 59 + this.LoanPurposeType.GetHashCode();
                if (this.LotAcres != null)
                    hashCode = hashCode * 59 + this.LotAcres.GetHashCode();
                if (this.LotIdentifier != null)
                    hashCode = hashCode * 59 + this.LotIdentifier.GetHashCode();
                if (this.NameRecordingJurisdiction != null)
                    hashCode = hashCode * 59 + this.NameRecordingJurisdiction.GetHashCode();
                if (this.NonwarrantableProjectIndicator != null)
                    hashCode = hashCode * 59 + this.NonwarrantableProjectIndicator.GetHashCode();
                if (this.NumberOfStories != null)
                    hashCode = hashCode * 59 + this.NumberOfStories.GetHashCode();
                if (this.OtherLoanPurposeDescription != null)
                    hashCode = hashCode * 59 + this.OtherLoanPurposeDescription.GetHashCode();
                if (this.PostalCode != null)
                    hashCode = hashCode * 59 + this.PostalCode.GetHashCode();
                if (this.PriorLoanRecordationBookNumber != null)
                    hashCode = hashCode * 59 + this.PriorLoanRecordationBookNumber.GetHashCode();
                if (this.PriorLoanRecordationCurrentPrincipalAmount != null)
                    hashCode = hashCode * 59 + this.PriorLoanRecordationCurrentPrincipalAmount.GetHashCode();
                if (this.PriorLoanRecordationOriginalPrincipalAmount != null)
                    hashCode = hashCode * 59 + this.PriorLoanRecordationOriginalPrincipalAmount.GetHashCode();
                if (this.PriorLoanRecordationPageNumber != null)
                    hashCode = hashCode * 59 + this.PriorLoanRecordationPageNumber.GetHashCode();
                if (this.PropertyAcquiredYear != null)
                    hashCode = hashCode * 59 + this.PropertyAcquiredYear.GetHashCode();
                if (this.PropertyExistingLienAmount != null)
                    hashCode = hashCode * 59 + this.PropertyExistingLienAmount.GetHashCode();
                if (this.PropertyLeaseholdExpirationDate != null)
                    hashCode = hashCode * 59 + this.PropertyLeaseholdExpirationDate.GetHashCode();
                if (this.PropertyOriginalCostAmount != null)
                    hashCode = hashCode * 59 + this.PropertyOriginalCostAmount.GetHashCode();
                if (this.PropertyRightsType != null)
                    hashCode = hashCode * 59 + this.PropertyRightsType.GetHashCode();
                if (this.PropertyUsageType != null)
                    hashCode = hashCode * 59 + this.PropertyUsageType.GetHashCode();
                if (this.RefinanceImprovementCostsAmount != null)
                    hashCode = hashCode * 59 + this.RefinanceImprovementCostsAmount.GetHashCode();
                if (this.RefinanceImprovementsType != null)
                    hashCode = hashCode * 59 + this.RefinanceImprovementsType.GetHashCode();
                if (this.RefinancePropertyAcquiredYear != null)
                    hashCode = hashCode * 59 + this.RefinancePropertyAcquiredYear.GetHashCode();
                if (this.RefinancePropertyExistingLienAmount != null)
                    hashCode = hashCode * 59 + this.RefinancePropertyExistingLienAmount.GetHashCode();
                if (this.RefinancePropertyOriginalCostAmount != null)
                    hashCode = hashCode * 59 + this.RefinancePropertyOriginalCostAmount.GetHashCode();
                if (this.RefinanceProposedImprovementsDescription != null)
                    hashCode = hashCode * 59 + this.RefinanceProposedImprovementsDescription.GetHashCode();
                if (this.RuralAreaIndicator != null)
                    hashCode = hashCode * 59 + this.RuralAreaIndicator.GetHashCode();
                if (this.SectionIdentifier != null)
                    hashCode = hashCode * 59 + this.SectionIdentifier.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.StreetAddress != null)
                    hashCode = hashCode * 59 + this.StreetAddress.GetHashCode();
                if (this.StreetAddress2 != null)
                    hashCode = hashCode * 59 + this.StreetAddress2.GetHashCode();
                if (this.StructureBuiltYear != null)
                    hashCode = hashCode * 59 + this.StructureBuiltYear.GetHashCode();
                if (this.TexasContinuousMoneyLoanIndicator != null)
                    hashCode = hashCode * 59 + this.TexasContinuousMoneyLoanIndicator.GetHashCode();
                if (this.TotalConstructionValueAmount != null)
                    hashCode = hashCode * 59 + this.TotalConstructionValueAmount.GetHashCode();
                if (this.TypeRecordingJurisdiction != null)
                    hashCode = hashCode * 59 + this.TypeRecordingJurisdiction.GetHashCode();
                if (this.UnincorporatedAreaName != null)
                    hashCode = hashCode * 59 + this.UnincorporatedAreaName.GetHashCode();
                if (this.ProdIsSpInUnderservedArea != null)
                    hashCode = hashCode * 59 + this.ProdIsSpInUnderservedArea.GetHashCode();
                if (this.IsConstructionPhaseDisclosedSeparately != null)
                    hashCode = hashCode * 59 + this.IsConstructionPhaseDisclosedSeparately.GetHashCode();
                if (this.LinkedIsConstructionPhaseDisclosedSeparately != null)
                    hashCode = hashCode * 59 + this.LinkedIsConstructionPhaseDisclosedSeparately.GetHashCode();
                if (this.LinkedLoanPurposeType != null)
                    hashCode = hashCode * 59 + this.LinkedLoanPurposeType.GetHashCode();
                if (this.LinkedMortgageType != null)
                    hashCode = hashCode * 59 + this.LinkedMortgageType.GetHashCode();
                if (this.LinkedLienPriorityType != null)
                    hashCode = hashCode * 59 + this.LinkedLienPriorityType.GetHashCode();
                if (this.PriorLoanRecordationOriginalLoanNumber != null)
                    hashCode = hashCode * 59 + this.PriorLoanRecordationOriginalLoanNumber.GetHashCode();
                if (this.PriorLoanRecordationDated != null)
                    hashCode = hashCode * 59 + this.PriorLoanRecordationDated.GetHashCode();
                if (this.LinkedInitialAdvanceAmount != null)
                    hashCode = hashCode * 59 + this.LinkedInitialAdvanceAmount.GetHashCode();
                if (this.LinkedClosedEndPrimaryMortgageLoanAmount != null)
                    hashCode = hashCode * 59 + this.LinkedClosedEndPrimaryMortgageLoanAmount.GetHashCode();
                if (this.LinkedClosedEndSubordinateMortgageLoanAmount != null)
                    hashCode = hashCode * 59 + this.LinkedClosedEndSubordinateMortgageLoanAmount.GetHashCode();
                if (this.LinkedHelocNewFinancingNotLinkedDrawAmount != null)
                    hashCode = hashCode * 59 + this.LinkedHelocNewFinancingNotLinkedDrawAmount.GetHashCode();
                if (this.LinkedHelocNewFinancingNotLinkedCreditLimit != null)
                    hashCode = hashCode * 59 + this.LinkedHelocNewFinancingNotLinkedCreditLimit.GetHashCode();
                if (this.LinkedAmountApplyToDownPayment != null)
                    hashCode = hashCode * 59 + this.LinkedAmountApplyToDownPayment.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
