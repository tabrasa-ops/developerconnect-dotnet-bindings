/*
* Copyright 2017 Ellie Mae, Inc.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*
*  1. Redistributions of source code must retain the above copyright notice,
*     this list of conditions and the following disclaimer.
*
*  2. Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*  3. Neither the name of the copyright holder nor the names of its
*     contributors may be used to endorse or promote products derived from this
*     software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.
*/


/* 
 * Loan
 *
 * Returns the entire loan or specific entities of a loan.
 *
 * OpenAPI spec version: 1.4.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Elli.Api.Loans.Client.SwaggerDateConverter;

namespace Elli.Api.Loans.Model
{
    /// <summary>
    /// LoanContractFunding
    /// </summary>
    [DataContract]
    public partial class LoanContractFunding :  IEquatable<LoanContractFunding>, IValidatableObject
    {
    
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets CollateralSentDate
        /// </summary>
        [DataMember(Name="collateralSentDate", EmitDefaultValue=false)]
        public DateTime? CollateralSentDate { get; set; }

        /// <summary>
        /// Gets or Sets FunderName
        /// </summary>
        [DataMember(Name="funderName", EmitDefaultValue=false)]
        public string FunderName { get; set; }

        /// <summary>
        /// Gets or Sets FunderUrl
        /// </summary>
        [DataMember(Name="funderUrl", EmitDefaultValue=false)]
        public string FunderUrl { get; set; }

        /// <summary>
        /// Gets or Sets FundingClearedBy
        /// </summary>
        [DataMember(Name="fundingClearedBy", EmitDefaultValue=false)]
        public string FundingClearedBy { get; set; }

        /// <summary>
        /// Gets or Sets FundingCloseDate
        /// </summary>
        [DataMember(Name="fundingCloseDate", EmitDefaultValue=false)]
        public DateTime? FundingCloseDate { get; set; }

        /// <summary>
        /// Gets or Sets FundingOrderDate
        /// </summary>
        [DataMember(Name="fundingOrderDate", EmitDefaultValue=false)]
        public DateTime? FundingOrderDate { get; set; }

        /// <summary>
        /// Gets or Sets FundingType
        /// </summary>
        [DataMember(Name="fundingType", EmitDefaultValue=false)]
        public string FundingType { get; set; }

        /// <summary>
        /// Gets or Sets FundsReleasedDate
        /// </summary>
        [DataMember(Name="fundsReleasedDate", EmitDefaultValue=false)]
        public DateTime? FundsReleasedDate { get; set; }

        /// <summary>
        /// Gets or Sets FundsReleaseNumber
        /// </summary>
        [DataMember(Name="fundsReleaseNumber", EmitDefaultValue=false)]
        public string FundsReleaseNumber { get; set; }

        /// <summary>
        /// Gets or Sets FundsSentDate
        /// </summary>
        [DataMember(Name="fundsSentDate", EmitDefaultValue=false)]
        public DateTime? FundsSentDate { get; set; }

        /// <summary>
        /// Gets or Sets FundsWireTo
        /// </summary>
        [DataMember(Name="fundsWireTo", EmitDefaultValue=false)]
        public string FundsWireTo { get; set; }

        /// <summary>
        /// Gets or Sets SentToFunderDate
        /// </summary>
        [DataMember(Name="sentToFunderDate", EmitDefaultValue=false)]
        public DateTime? SentToFunderDate { get; set; }

        /// <summary>
        /// Gets or Sets WiredToAbaNumber
        /// </summary>
        [DataMember(Name="wiredToAbaNumber", EmitDefaultValue=false)]
        public string WiredToAbaNumber { get; set; }

        /// <summary>
        /// Gets or Sets WiredToAccountNumber
        /// </summary>
        [DataMember(Name="wiredToAccountNumber", EmitDefaultValue=false)]
        public string WiredToAccountNumber { get; set; }

        /// <summary>
        /// Gets or Sets WiredToForCreditTo
        /// </summary>
        [DataMember(Name="wiredToForCreditTo", EmitDefaultValue=false)]
        public string WiredToForCreditTo { get; set; }

        /// <summary>
        /// Gets or Sets WiredToForCreditTo1
        /// </summary>
        [DataMember(Name="wiredToForCreditTo1", EmitDefaultValue=false)]
        public string WiredToForCreditTo1 { get; set; }

        /// <summary>
        /// Gets or Sets WiredToForCreditTo2
        /// </summary>
        [DataMember(Name="wiredToForCreditTo2", EmitDefaultValue=false)]
        public string WiredToForCreditTo2 { get; set; }

        /// <summary>
        /// Gets or Sets WiredToForFurtherCreditTo1
        /// </summary>
        [DataMember(Name="wiredToForFurtherCreditTo1", EmitDefaultValue=false)]
        public string WiredToForFurtherCreditTo1 { get; set; }

        /// <summary>
        /// Gets or Sets WiredToForFurtherCreditTo2
        /// </summary>
        [DataMember(Name="wiredToForFurtherCreditTo2", EmitDefaultValue=false)]
        public string WiredToForFurtherCreditTo2 { get; set; }

        /// <summary>
        /// Gets or Sets FundingFees
        /// </summary>
        [DataMember(Name="fundingFees", EmitDefaultValue=false)]
        public string FundingFees { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LoanContractFunding {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CollateralSentDate: ").Append(CollateralSentDate).Append("\n");
            sb.Append("  FunderName: ").Append(FunderName).Append("\n");
            sb.Append("  FunderUrl: ").Append(FunderUrl).Append("\n");
            sb.Append("  FundingClearedBy: ").Append(FundingClearedBy).Append("\n");
            sb.Append("  FundingCloseDate: ").Append(FundingCloseDate).Append("\n");
            sb.Append("  FundingOrderDate: ").Append(FundingOrderDate).Append("\n");
            sb.Append("  FundingType: ").Append(FundingType).Append("\n");
            sb.Append("  FundsReleasedDate: ").Append(FundsReleasedDate).Append("\n");
            sb.Append("  FundsReleaseNumber: ").Append(FundsReleaseNumber).Append("\n");
            sb.Append("  FundsSentDate: ").Append(FundsSentDate).Append("\n");
            sb.Append("  FundsWireTo: ").Append(FundsWireTo).Append("\n");
            sb.Append("  SentToFunderDate: ").Append(SentToFunderDate).Append("\n");
            sb.Append("  WiredToAbaNumber: ").Append(WiredToAbaNumber).Append("\n");
            sb.Append("  WiredToAccountNumber: ").Append(WiredToAccountNumber).Append("\n");
            sb.Append("  WiredToForCreditTo: ").Append(WiredToForCreditTo).Append("\n");
            sb.Append("  WiredToForCreditTo1: ").Append(WiredToForCreditTo1).Append("\n");
            sb.Append("  WiredToForCreditTo2: ").Append(WiredToForCreditTo2).Append("\n");
            sb.Append("  WiredToForFurtherCreditTo1: ").Append(WiredToForFurtherCreditTo1).Append("\n");
            sb.Append("  WiredToForFurtherCreditTo2: ").Append(WiredToForFurtherCreditTo2).Append("\n");
            sb.Append("  FundingFees: ").Append(FundingFees).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LoanContractFunding);
        }

        /// <summary>
        /// Returns true if LoanContractFunding instances are equal
        /// </summary>
        /// <param name="input">Instance of LoanContractFunding to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoanContractFunding input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CollateralSentDate == input.CollateralSentDate ||
                    (this.CollateralSentDate != null &&
                    this.CollateralSentDate.Equals(input.CollateralSentDate))
                ) && 
                (
                    this.FunderName == input.FunderName ||
                    (this.FunderName != null &&
                    this.FunderName.Equals(input.FunderName))
                ) && 
                (
                    this.FunderUrl == input.FunderUrl ||
                    (this.FunderUrl != null &&
                    this.FunderUrl.Equals(input.FunderUrl))
                ) && 
                (
                    this.FundingClearedBy == input.FundingClearedBy ||
                    (this.FundingClearedBy != null &&
                    this.FundingClearedBy.Equals(input.FundingClearedBy))
                ) && 
                (
                    this.FundingCloseDate == input.FundingCloseDate ||
                    (this.FundingCloseDate != null &&
                    this.FundingCloseDate.Equals(input.FundingCloseDate))
                ) && 
                (
                    this.FundingOrderDate == input.FundingOrderDate ||
                    (this.FundingOrderDate != null &&
                    this.FundingOrderDate.Equals(input.FundingOrderDate))
                ) && 
                (
                    this.FundingType == input.FundingType ||
                    (this.FundingType != null &&
                    this.FundingType.Equals(input.FundingType))
                ) && 
                (
                    this.FundsReleasedDate == input.FundsReleasedDate ||
                    (this.FundsReleasedDate != null &&
                    this.FundsReleasedDate.Equals(input.FundsReleasedDate))
                ) && 
                (
                    this.FundsReleaseNumber == input.FundsReleaseNumber ||
                    (this.FundsReleaseNumber != null &&
                    this.FundsReleaseNumber.Equals(input.FundsReleaseNumber))
                ) && 
                (
                    this.FundsSentDate == input.FundsSentDate ||
                    (this.FundsSentDate != null &&
                    this.FundsSentDate.Equals(input.FundsSentDate))
                ) && 
                (
                    this.FundsWireTo == input.FundsWireTo ||
                    (this.FundsWireTo != null &&
                    this.FundsWireTo.Equals(input.FundsWireTo))
                ) && 
                (
                    this.SentToFunderDate == input.SentToFunderDate ||
                    (this.SentToFunderDate != null &&
                    this.SentToFunderDate.Equals(input.SentToFunderDate))
                ) && 
                (
                    this.WiredToAbaNumber == input.WiredToAbaNumber ||
                    (this.WiredToAbaNumber != null &&
                    this.WiredToAbaNumber.Equals(input.WiredToAbaNumber))
                ) && 
                (
                    this.WiredToAccountNumber == input.WiredToAccountNumber ||
                    (this.WiredToAccountNumber != null &&
                    this.WiredToAccountNumber.Equals(input.WiredToAccountNumber))
                ) && 
                (
                    this.WiredToForCreditTo == input.WiredToForCreditTo ||
                    (this.WiredToForCreditTo != null &&
                    this.WiredToForCreditTo.Equals(input.WiredToForCreditTo))
                ) && 
                (
                    this.WiredToForCreditTo1 == input.WiredToForCreditTo1 ||
                    (this.WiredToForCreditTo1 != null &&
                    this.WiredToForCreditTo1.Equals(input.WiredToForCreditTo1))
                ) && 
                (
                    this.WiredToForCreditTo2 == input.WiredToForCreditTo2 ||
                    (this.WiredToForCreditTo2 != null &&
                    this.WiredToForCreditTo2.Equals(input.WiredToForCreditTo2))
                ) && 
                (
                    this.WiredToForFurtherCreditTo1 == input.WiredToForFurtherCreditTo1 ||
                    (this.WiredToForFurtherCreditTo1 != null &&
                    this.WiredToForFurtherCreditTo1.Equals(input.WiredToForFurtherCreditTo1))
                ) && 
                (
                    this.WiredToForFurtherCreditTo2 == input.WiredToForFurtherCreditTo2 ||
                    (this.WiredToForFurtherCreditTo2 != null &&
                    this.WiredToForFurtherCreditTo2.Equals(input.WiredToForFurtherCreditTo2))
                ) && 
                (
                    this.FundingFees == input.FundingFees ||
                    (this.FundingFees != null &&
                    this.FundingFees.Equals(input.FundingFees))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CollateralSentDate != null)
                    hashCode = hashCode * 59 + this.CollateralSentDate.GetHashCode();
                if (this.FunderName != null)
                    hashCode = hashCode * 59 + this.FunderName.GetHashCode();
                if (this.FunderUrl != null)
                    hashCode = hashCode * 59 + this.FunderUrl.GetHashCode();
                if (this.FundingClearedBy != null)
                    hashCode = hashCode * 59 + this.FundingClearedBy.GetHashCode();
                if (this.FundingCloseDate != null)
                    hashCode = hashCode * 59 + this.FundingCloseDate.GetHashCode();
                if (this.FundingOrderDate != null)
                    hashCode = hashCode * 59 + this.FundingOrderDate.GetHashCode();
                if (this.FundingType != null)
                    hashCode = hashCode * 59 + this.FundingType.GetHashCode();
                if (this.FundsReleasedDate != null)
                    hashCode = hashCode * 59 + this.FundsReleasedDate.GetHashCode();
                if (this.FundsReleaseNumber != null)
                    hashCode = hashCode * 59 + this.FundsReleaseNumber.GetHashCode();
                if (this.FundsSentDate != null)
                    hashCode = hashCode * 59 + this.FundsSentDate.GetHashCode();
                if (this.FundsWireTo != null)
                    hashCode = hashCode * 59 + this.FundsWireTo.GetHashCode();
                if (this.SentToFunderDate != null)
                    hashCode = hashCode * 59 + this.SentToFunderDate.GetHashCode();
                if (this.WiredToAbaNumber != null)
                    hashCode = hashCode * 59 + this.WiredToAbaNumber.GetHashCode();
                if (this.WiredToAccountNumber != null)
                    hashCode = hashCode * 59 + this.WiredToAccountNumber.GetHashCode();
                if (this.WiredToForCreditTo != null)
                    hashCode = hashCode * 59 + this.WiredToForCreditTo.GetHashCode();
                if (this.WiredToForCreditTo1 != null)
                    hashCode = hashCode * 59 + this.WiredToForCreditTo1.GetHashCode();
                if (this.WiredToForCreditTo2 != null)
                    hashCode = hashCode * 59 + this.WiredToForCreditTo2.GetHashCode();
                if (this.WiredToForFurtherCreditTo1 != null)
                    hashCode = hashCode * 59 + this.WiredToForFurtherCreditTo1.GetHashCode();
                if (this.WiredToForFurtherCreditTo2 != null)
                    hashCode = hashCode * 59 + this.WiredToForFurtherCreditTo2.GetHashCode();
                if (this.FundingFees != null)
                    hashCode = hashCode * 59 + this.FundingFees.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
