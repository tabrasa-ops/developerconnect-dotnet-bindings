/*
* Copyright 2017 Ellie Mae, Inc.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*
*  1. Redistributions of source code must retain the above copyright notice,
*     this list of conditions and the following disclaimer.
*
*  2. Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*  3. Neither the name of the copyright holder nor the names of its
*     contributors may be used to endorse or promote products derived from this
*     software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.
*/


/* 
 * Loan
 *
 * Returns the entire loan or specific entities of a loan.
 *
 * OpenAPI spec version: 1.4.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Elli.Api.Loans.Client.SwaggerDateConverter;

namespace Elli.Api.Loans.Model
{
    /// <summary>
    /// LoanContractClosingCostClosingDisclosure2
    /// </summary>
    [DataContract]
    public partial class LoanContractClosingCostClosingDisclosure2 :  IEquatable<LoanContractClosingCostClosingDisclosure2>, IValidatableObject
    {
    
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets LCAtClosing
        /// </summary>
        [DataMember(Name="lCAtClosing", EmitDefaultValue=false)]
        public double? LCAtClosing { get; set; }

        /// <summary>
        /// Gets or Sets OriginationChargesSubTotal
        /// </summary>
        [DataMember(Name="originationChargesSubTotal", EmitDefaultValue=false)]
        public double? OriginationChargesSubTotal { get; set; }

        /// <summary>
        /// Gets or Sets ServicesDidNotShopSubTotal
        /// </summary>
        [DataMember(Name="servicesDidNotShopSubTotal", EmitDefaultValue=false)]
        public double? ServicesDidNotShopSubTotal { get; set; }

        /// <summary>
        /// Gets or Sets ServicesDidShopSubTotal
        /// </summary>
        [DataMember(Name="servicesDidShopSubTotal", EmitDefaultValue=false)]
        public double? ServicesDidShopSubTotal { get; set; }

        /// <summary>
        /// Gets or Sets TotalLoanCost
        /// </summary>
        [DataMember(Name="totalLoanCost", EmitDefaultValue=false)]
        public double? TotalLoanCost { get; set; }

        /// <summary>
        /// Gets or Sets LastDisclosedLoanCosts
        /// </summary>
        [DataMember(Name="lastDisclosedLoanCosts", EmitDefaultValue=false)]
        public double? LastDisclosedLoanCosts { get; set; }

        /// <summary>
        /// Gets or Sets TotalBorrowerPaidAtClosing
        /// </summary>
        [DataMember(Name="totalBorrowerPaidAtClosing", EmitDefaultValue=false)]
        public double? TotalBorrowerPaidAtClosing { get; set; }

        /// <summary>
        /// Gets or Sets TotalBorrowerPaidBeforeClosing
        /// </summary>
        [DataMember(Name="totalBorrowerPaidBeforeClosing", EmitDefaultValue=false)]
        public double? TotalBorrowerPaidBeforeClosing { get; set; }

        /// <summary>
        /// Gets or Sets TaxesGovermentFeesSubTotal
        /// </summary>
        [DataMember(Name="taxesGovermentFeesSubTotal", EmitDefaultValue=false)]
        public double? TaxesGovermentFeesSubTotal { get; set; }

        /// <summary>
        /// Gets or Sets PrepaidsSubTotal
        /// </summary>
        [DataMember(Name="prepaidsSubTotal", EmitDefaultValue=false)]
        public double? PrepaidsSubTotal { get; set; }

        /// <summary>
        /// Gets or Sets InitialEscrowSubTotal
        /// </summary>
        [DataMember(Name="initialEscrowSubTotal", EmitDefaultValue=false)]
        public double? InitialEscrowSubTotal { get; set; }

        /// <summary>
        /// Gets or Sets OtherSubTotal
        /// </summary>
        [DataMember(Name="otherSubTotal", EmitDefaultValue=false)]
        public double? OtherSubTotal { get; set; }

        /// <summary>
        /// Gets or Sets TotalOtherCost
        /// </summary>
        [DataMember(Name="totalOtherCost", EmitDefaultValue=false)]
        public double? TotalOtherCost { get; set; }

        /// <summary>
        /// Gets or Sets LastDisclosedOtherCosts
        /// </summary>
        [DataMember(Name="lastDisclosedOtherCosts", EmitDefaultValue=false)]
        public double? LastDisclosedOtherCosts { get; set; }

        /// <summary>
        /// Gets or Sets TotalOtherCostAtClosing
        /// </summary>
        [DataMember(Name="totalOtherCostAtClosing", EmitDefaultValue=false)]
        public double? TotalOtherCostAtClosing { get; set; }

        /// <summary>
        /// Gets or Sets TotalOtherCostBeforeClosing
        /// </summary>
        [DataMember(Name="totalOtherCostBeforeClosing", EmitDefaultValue=false)]
        public double? TotalOtherCostBeforeClosing { get; set; }

        /// <summary>
        /// Gets or Sets TotalClosingCost
        /// </summary>
        [DataMember(Name="totalClosingCost", EmitDefaultValue=false)]
        public double? TotalClosingCost { get; set; }

        /// <summary>
        /// Gets or Sets BorrowerClosingCostAtClosing
        /// </summary>
        [DataMember(Name="borrowerClosingCostAtClosing", EmitDefaultValue=false)]
        public double? BorrowerClosingCostAtClosing { get; set; }

        /// <summary>
        /// Gets or Sets BorrowerClosingCostBeforeClosing
        /// </summary>
        [DataMember(Name="borrowerClosingCostBeforeClosing", EmitDefaultValue=false)]
        public double? BorrowerClosingCostBeforeClosing { get; set; }

        /// <summary>
        /// Gets or Sets SellerClosingCostAtClosing
        /// </summary>
        [DataMember(Name="sellerClosingCostAtClosing", EmitDefaultValue=false)]
        public double? SellerClosingCostAtClosing { get; set; }

        /// <summary>
        /// Gets or Sets SellerClosingCostBeforeClosing
        /// </summary>
        [DataMember(Name="sellerClosingCostBeforeClosing", EmitDefaultValue=false)]
        public double? SellerClosingCostBeforeClosing { get; set; }

        /// <summary>
        /// Gets or Sets ClosingCostPaidByOthers
        /// </summary>
        [DataMember(Name="closingCostPaidByOthers", EmitDefaultValue=false)]
        public double? ClosingCostPaidByOthers { get; set; }

        /// <summary>
        /// Gets or Sets ClosingCostLenderCredits
        /// </summary>
        [DataMember(Name="closingCostLenderCredits", EmitDefaultValue=false)]
        public double? ClosingCostLenderCredits { get; set; }

        /// <summary>
        /// Gets or Sets LastDisclosedLenderCredits
        /// </summary>
        [DataMember(Name="lastDisclosedLenderCredits", EmitDefaultValue=false)]
        public double? LastDisclosedLenderCredits { get; set; }

        /// <summary>
        /// Gets or Sets DiscloseLenderCredits
        /// </summary>
        [DataMember(Name="discloseLenderCredits", EmitDefaultValue=false)]
        public double? DiscloseLenderCredits { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LoanContractClosingCostClosingDisclosure2 {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LCAtClosing: ").Append(LCAtClosing).Append("\n");
            sb.Append("  OriginationChargesSubTotal: ").Append(OriginationChargesSubTotal).Append("\n");
            sb.Append("  ServicesDidNotShopSubTotal: ").Append(ServicesDidNotShopSubTotal).Append("\n");
            sb.Append("  ServicesDidShopSubTotal: ").Append(ServicesDidShopSubTotal).Append("\n");
            sb.Append("  TotalLoanCost: ").Append(TotalLoanCost).Append("\n");
            sb.Append("  LastDisclosedLoanCosts: ").Append(LastDisclosedLoanCosts).Append("\n");
            sb.Append("  TotalBorrowerPaidAtClosing: ").Append(TotalBorrowerPaidAtClosing).Append("\n");
            sb.Append("  TotalBorrowerPaidBeforeClosing: ").Append(TotalBorrowerPaidBeforeClosing).Append("\n");
            sb.Append("  TaxesGovermentFeesSubTotal: ").Append(TaxesGovermentFeesSubTotal).Append("\n");
            sb.Append("  PrepaidsSubTotal: ").Append(PrepaidsSubTotal).Append("\n");
            sb.Append("  InitialEscrowSubTotal: ").Append(InitialEscrowSubTotal).Append("\n");
            sb.Append("  OtherSubTotal: ").Append(OtherSubTotal).Append("\n");
            sb.Append("  TotalOtherCost: ").Append(TotalOtherCost).Append("\n");
            sb.Append("  LastDisclosedOtherCosts: ").Append(LastDisclosedOtherCosts).Append("\n");
            sb.Append("  TotalOtherCostAtClosing: ").Append(TotalOtherCostAtClosing).Append("\n");
            sb.Append("  TotalOtherCostBeforeClosing: ").Append(TotalOtherCostBeforeClosing).Append("\n");
            sb.Append("  TotalClosingCost: ").Append(TotalClosingCost).Append("\n");
            sb.Append("  BorrowerClosingCostAtClosing: ").Append(BorrowerClosingCostAtClosing).Append("\n");
            sb.Append("  BorrowerClosingCostBeforeClosing: ").Append(BorrowerClosingCostBeforeClosing).Append("\n");
            sb.Append("  SellerClosingCostAtClosing: ").Append(SellerClosingCostAtClosing).Append("\n");
            sb.Append("  SellerClosingCostBeforeClosing: ").Append(SellerClosingCostBeforeClosing).Append("\n");
            sb.Append("  ClosingCostPaidByOthers: ").Append(ClosingCostPaidByOthers).Append("\n");
            sb.Append("  ClosingCostLenderCredits: ").Append(ClosingCostLenderCredits).Append("\n");
            sb.Append("  LastDisclosedLenderCredits: ").Append(LastDisclosedLenderCredits).Append("\n");
            sb.Append("  DiscloseLenderCredits: ").Append(DiscloseLenderCredits).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LoanContractClosingCostClosingDisclosure2);
        }

        /// <summary>
        /// Returns true if LoanContractClosingCostClosingDisclosure2 instances are equal
        /// </summary>
        /// <param name="input">Instance of LoanContractClosingCostClosingDisclosure2 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoanContractClosingCostClosingDisclosure2 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.LCAtClosing == input.LCAtClosing ||
                    (this.LCAtClosing != null &&
                    this.LCAtClosing.Equals(input.LCAtClosing))
                ) && 
                (
                    this.OriginationChargesSubTotal == input.OriginationChargesSubTotal ||
                    (this.OriginationChargesSubTotal != null &&
                    this.OriginationChargesSubTotal.Equals(input.OriginationChargesSubTotal))
                ) && 
                (
                    this.ServicesDidNotShopSubTotal == input.ServicesDidNotShopSubTotal ||
                    (this.ServicesDidNotShopSubTotal != null &&
                    this.ServicesDidNotShopSubTotal.Equals(input.ServicesDidNotShopSubTotal))
                ) && 
                (
                    this.ServicesDidShopSubTotal == input.ServicesDidShopSubTotal ||
                    (this.ServicesDidShopSubTotal != null &&
                    this.ServicesDidShopSubTotal.Equals(input.ServicesDidShopSubTotal))
                ) && 
                (
                    this.TotalLoanCost == input.TotalLoanCost ||
                    (this.TotalLoanCost != null &&
                    this.TotalLoanCost.Equals(input.TotalLoanCost))
                ) && 
                (
                    this.LastDisclosedLoanCosts == input.LastDisclosedLoanCosts ||
                    (this.LastDisclosedLoanCosts != null &&
                    this.LastDisclosedLoanCosts.Equals(input.LastDisclosedLoanCosts))
                ) && 
                (
                    this.TotalBorrowerPaidAtClosing == input.TotalBorrowerPaidAtClosing ||
                    (this.TotalBorrowerPaidAtClosing != null &&
                    this.TotalBorrowerPaidAtClosing.Equals(input.TotalBorrowerPaidAtClosing))
                ) && 
                (
                    this.TotalBorrowerPaidBeforeClosing == input.TotalBorrowerPaidBeforeClosing ||
                    (this.TotalBorrowerPaidBeforeClosing != null &&
                    this.TotalBorrowerPaidBeforeClosing.Equals(input.TotalBorrowerPaidBeforeClosing))
                ) && 
                (
                    this.TaxesGovermentFeesSubTotal == input.TaxesGovermentFeesSubTotal ||
                    (this.TaxesGovermentFeesSubTotal != null &&
                    this.TaxesGovermentFeesSubTotal.Equals(input.TaxesGovermentFeesSubTotal))
                ) && 
                (
                    this.PrepaidsSubTotal == input.PrepaidsSubTotal ||
                    (this.PrepaidsSubTotal != null &&
                    this.PrepaidsSubTotal.Equals(input.PrepaidsSubTotal))
                ) && 
                (
                    this.InitialEscrowSubTotal == input.InitialEscrowSubTotal ||
                    (this.InitialEscrowSubTotal != null &&
                    this.InitialEscrowSubTotal.Equals(input.InitialEscrowSubTotal))
                ) && 
                (
                    this.OtherSubTotal == input.OtherSubTotal ||
                    (this.OtherSubTotal != null &&
                    this.OtherSubTotal.Equals(input.OtherSubTotal))
                ) && 
                (
                    this.TotalOtherCost == input.TotalOtherCost ||
                    (this.TotalOtherCost != null &&
                    this.TotalOtherCost.Equals(input.TotalOtherCost))
                ) && 
                (
                    this.LastDisclosedOtherCosts == input.LastDisclosedOtherCosts ||
                    (this.LastDisclosedOtherCosts != null &&
                    this.LastDisclosedOtherCosts.Equals(input.LastDisclosedOtherCosts))
                ) && 
                (
                    this.TotalOtherCostAtClosing == input.TotalOtherCostAtClosing ||
                    (this.TotalOtherCostAtClosing != null &&
                    this.TotalOtherCostAtClosing.Equals(input.TotalOtherCostAtClosing))
                ) && 
                (
                    this.TotalOtherCostBeforeClosing == input.TotalOtherCostBeforeClosing ||
                    (this.TotalOtherCostBeforeClosing != null &&
                    this.TotalOtherCostBeforeClosing.Equals(input.TotalOtherCostBeforeClosing))
                ) && 
                (
                    this.TotalClosingCost == input.TotalClosingCost ||
                    (this.TotalClosingCost != null &&
                    this.TotalClosingCost.Equals(input.TotalClosingCost))
                ) && 
                (
                    this.BorrowerClosingCostAtClosing == input.BorrowerClosingCostAtClosing ||
                    (this.BorrowerClosingCostAtClosing != null &&
                    this.BorrowerClosingCostAtClosing.Equals(input.BorrowerClosingCostAtClosing))
                ) && 
                (
                    this.BorrowerClosingCostBeforeClosing == input.BorrowerClosingCostBeforeClosing ||
                    (this.BorrowerClosingCostBeforeClosing != null &&
                    this.BorrowerClosingCostBeforeClosing.Equals(input.BorrowerClosingCostBeforeClosing))
                ) && 
                (
                    this.SellerClosingCostAtClosing == input.SellerClosingCostAtClosing ||
                    (this.SellerClosingCostAtClosing != null &&
                    this.SellerClosingCostAtClosing.Equals(input.SellerClosingCostAtClosing))
                ) && 
                (
                    this.SellerClosingCostBeforeClosing == input.SellerClosingCostBeforeClosing ||
                    (this.SellerClosingCostBeforeClosing != null &&
                    this.SellerClosingCostBeforeClosing.Equals(input.SellerClosingCostBeforeClosing))
                ) && 
                (
                    this.ClosingCostPaidByOthers == input.ClosingCostPaidByOthers ||
                    (this.ClosingCostPaidByOthers != null &&
                    this.ClosingCostPaidByOthers.Equals(input.ClosingCostPaidByOthers))
                ) && 
                (
                    this.ClosingCostLenderCredits == input.ClosingCostLenderCredits ||
                    (this.ClosingCostLenderCredits != null &&
                    this.ClosingCostLenderCredits.Equals(input.ClosingCostLenderCredits))
                ) && 
                (
                    this.LastDisclosedLenderCredits == input.LastDisclosedLenderCredits ||
                    (this.LastDisclosedLenderCredits != null &&
                    this.LastDisclosedLenderCredits.Equals(input.LastDisclosedLenderCredits))
                ) && 
                (
                    this.DiscloseLenderCredits == input.DiscloseLenderCredits ||
                    (this.DiscloseLenderCredits != null &&
                    this.DiscloseLenderCredits.Equals(input.DiscloseLenderCredits))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.LCAtClosing != null)
                    hashCode = hashCode * 59 + this.LCAtClosing.GetHashCode();
                if (this.OriginationChargesSubTotal != null)
                    hashCode = hashCode * 59 + this.OriginationChargesSubTotal.GetHashCode();
                if (this.ServicesDidNotShopSubTotal != null)
                    hashCode = hashCode * 59 + this.ServicesDidNotShopSubTotal.GetHashCode();
                if (this.ServicesDidShopSubTotal != null)
                    hashCode = hashCode * 59 + this.ServicesDidShopSubTotal.GetHashCode();
                if (this.TotalLoanCost != null)
                    hashCode = hashCode * 59 + this.TotalLoanCost.GetHashCode();
                if (this.LastDisclosedLoanCosts != null)
                    hashCode = hashCode * 59 + this.LastDisclosedLoanCosts.GetHashCode();
                if (this.TotalBorrowerPaidAtClosing != null)
                    hashCode = hashCode * 59 + this.TotalBorrowerPaidAtClosing.GetHashCode();
                if (this.TotalBorrowerPaidBeforeClosing != null)
                    hashCode = hashCode * 59 + this.TotalBorrowerPaidBeforeClosing.GetHashCode();
                if (this.TaxesGovermentFeesSubTotal != null)
                    hashCode = hashCode * 59 + this.TaxesGovermentFeesSubTotal.GetHashCode();
                if (this.PrepaidsSubTotal != null)
                    hashCode = hashCode * 59 + this.PrepaidsSubTotal.GetHashCode();
                if (this.InitialEscrowSubTotal != null)
                    hashCode = hashCode * 59 + this.InitialEscrowSubTotal.GetHashCode();
                if (this.OtherSubTotal != null)
                    hashCode = hashCode * 59 + this.OtherSubTotal.GetHashCode();
                if (this.TotalOtherCost != null)
                    hashCode = hashCode * 59 + this.TotalOtherCost.GetHashCode();
                if (this.LastDisclosedOtherCosts != null)
                    hashCode = hashCode * 59 + this.LastDisclosedOtherCosts.GetHashCode();
                if (this.TotalOtherCostAtClosing != null)
                    hashCode = hashCode * 59 + this.TotalOtherCostAtClosing.GetHashCode();
                if (this.TotalOtherCostBeforeClosing != null)
                    hashCode = hashCode * 59 + this.TotalOtherCostBeforeClosing.GetHashCode();
                if (this.TotalClosingCost != null)
                    hashCode = hashCode * 59 + this.TotalClosingCost.GetHashCode();
                if (this.BorrowerClosingCostAtClosing != null)
                    hashCode = hashCode * 59 + this.BorrowerClosingCostAtClosing.GetHashCode();
                if (this.BorrowerClosingCostBeforeClosing != null)
                    hashCode = hashCode * 59 + this.BorrowerClosingCostBeforeClosing.GetHashCode();
                if (this.SellerClosingCostAtClosing != null)
                    hashCode = hashCode * 59 + this.SellerClosingCostAtClosing.GetHashCode();
                if (this.SellerClosingCostBeforeClosing != null)
                    hashCode = hashCode * 59 + this.SellerClosingCostBeforeClosing.GetHashCode();
                if (this.ClosingCostPaidByOthers != null)
                    hashCode = hashCode * 59 + this.ClosingCostPaidByOthers.GetHashCode();
                if (this.ClosingCostLenderCredits != null)
                    hashCode = hashCode * 59 + this.ClosingCostLenderCredits.GetHashCode();
                if (this.LastDisclosedLenderCredits != null)
                    hashCode = hashCode * 59 + this.LastDisclosedLenderCredits.GetHashCode();
                if (this.DiscloseLenderCredits != null)
                    hashCode = hashCode * 59 + this.DiscloseLenderCredits.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
