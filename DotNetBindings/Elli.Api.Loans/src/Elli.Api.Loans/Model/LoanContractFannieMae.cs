/*
* Copyright 2017 Ellie Mae, Inc.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*
*  1. Redistributions of source code must retain the above copyright notice,
*     this list of conditions and the following disclaimer.
*
*  2. Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*  3. Neither the name of the copyright holder nor the names of its
*     contributors may be used to endorse or promote products derived from this
*     software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.
*/


/* 
 * Loan
 *
 * Returns the entire loan or specific entities of a loan.
 *
 * OpenAPI spec version: 1.4.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Elli.Api.Loans.Client.SwaggerDateConverter;

namespace Elli.Api.Loans.Model
{
    /// <summary>
    /// LoanContractFannieMae
    /// </summary>
    [DataContract]
    public partial class LoanContractFannieMae :  IEquatable<LoanContractFannieMae>, IValidatableObject
    {
    
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Cltv
        /// </summary>
        [DataMember(Name="cltv", EmitDefaultValue=false)]
        public double? Cltv { get; set; }

        /// <summary>
        /// Gets or Sets Community2ndRepaymentStructure
        /// </summary>
        [DataMember(Name="community2ndRepaymentStructure", EmitDefaultValue=false)]
        public string Community2ndRepaymentStructure { get; set; }

        /// <summary>
        /// Gets or Sets CommunityLending
        /// </summary>
        [DataMember(Name="communityLending", EmitDefaultValue=false)]
        public bool? CommunityLending { get; set; }

        /// <summary>
        /// Gets or Sets DuVersion
        /// </summary>
        [DataMember(Name="duVersion", EmitDefaultValue=false)]
        public string DuVersion { get; set; }

        /// <summary>
        /// Gets or Sets Hcltv
        /// </summary>
        [DataMember(Name="hcltv", EmitDefaultValue=false)]
        public double? Hcltv { get; set; }

        /// <summary>
        /// Gets or Sets InterestedPartyContribution
        /// </summary>
        [DataMember(Name="interestedPartyContribution", EmitDefaultValue=false)]
        public double? InterestedPartyContribution { get; set; }

        /// <summary>
        /// Gets or Sets Ltv
        /// </summary>
        [DataMember(Name="ltv", EmitDefaultValue=false)]
        public double? Ltv { get; set; }

        /// <summary>
        /// Gets or Sets MornetPlusCaseFileId
        /// </summary>
        [DataMember(Name="mornetPlusCaseFileId", EmitDefaultValue=false)]
        public string MornetPlusCaseFileId { get; set; }

        /// <summary>
        /// Gets or Sets StartUpMortgage
        /// </summary>
        [DataMember(Name="startUpMortgage", EmitDefaultValue=false)]
        public bool? StartUpMortgage { get; set; }

        /// <summary>
        /// Gets or Sets PropertyInspectionWaiverMessage
        /// </summary>
        [DataMember(Name="propertyInspectionWaiverMessage", EmitDefaultValue=false)]
        public string PropertyInspectionWaiverMessage { get; set; }

        /// <summary>
        /// Gets or Sets CollateralUnderwriterScore
        /// </summary>
        [DataMember(Name="collateralUnderwriterScore", EmitDefaultValue=false)]
        public string CollateralUnderwriterScore { get; set; }

        /// <summary>
        /// Gets or Sets UCDPStatus
        /// </summary>
        [DataMember(Name="uCDPStatus", EmitDefaultValue=false)]
        public string UCDPStatus { get; set; }

        /// <summary>
        /// Gets or Sets ECStatus1003
        /// </summary>
        [DataMember(Name="eCStatus1003", EmitDefaultValue=false)]
        public string ECStatus1003 { get; set; }

        /// <summary>
        /// Gets or Sets ULDDECStatus
        /// </summary>
        [DataMember(Name="uLDDECStatus", EmitDefaultValue=false)]
        public string ULDDECStatus { get; set; }

        /// <summary>
        /// Gets or Sets UCDCollectionStatus
        /// </summary>
        [DataMember(Name="uCDCollectionStatus", EmitDefaultValue=false)]
        public string UCDCollectionStatus { get; set; }

        /// <summary>
        /// Gets or Sets CaseIDAssignedByUCDIndicator
        /// </summary>
        [DataMember(Name="caseIDAssignedByUCDIndicator", EmitDefaultValue=false)]
        public bool? CaseIDAssignedByUCDIndicator { get; set; }

        /// <summary>
        /// Gets or Sets CorrespondentAssignmentID
        /// </summary>
        [DataMember(Name="correspondentAssignmentID", EmitDefaultValue=false)]
        public string CorrespondentAssignmentID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LoanContractFannieMae {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Cltv: ").Append(Cltv).Append("\n");
            sb.Append("  Community2ndRepaymentStructure: ").Append(Community2ndRepaymentStructure).Append("\n");
            sb.Append("  CommunityLending: ").Append(CommunityLending).Append("\n");
            sb.Append("  DuVersion: ").Append(DuVersion).Append("\n");
            sb.Append("  Hcltv: ").Append(Hcltv).Append("\n");
            sb.Append("  InterestedPartyContribution: ").Append(InterestedPartyContribution).Append("\n");
            sb.Append("  Ltv: ").Append(Ltv).Append("\n");
            sb.Append("  MornetPlusCaseFileId: ").Append(MornetPlusCaseFileId).Append("\n");
            sb.Append("  StartUpMortgage: ").Append(StartUpMortgage).Append("\n");
            sb.Append("  PropertyInspectionWaiverMessage: ").Append(PropertyInspectionWaiverMessage).Append("\n");
            sb.Append("  CollateralUnderwriterScore: ").Append(CollateralUnderwriterScore).Append("\n");
            sb.Append("  UCDPStatus: ").Append(UCDPStatus).Append("\n");
            sb.Append("  ECStatus1003: ").Append(ECStatus1003).Append("\n");
            sb.Append("  ULDDECStatus: ").Append(ULDDECStatus).Append("\n");
            sb.Append("  UCDCollectionStatus: ").Append(UCDCollectionStatus).Append("\n");
            sb.Append("  CaseIDAssignedByUCDIndicator: ").Append(CaseIDAssignedByUCDIndicator).Append("\n");
            sb.Append("  CorrespondentAssignmentID: ").Append(CorrespondentAssignmentID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LoanContractFannieMae);
        }

        /// <summary>
        /// Returns true if LoanContractFannieMae instances are equal
        /// </summary>
        /// <param name="input">Instance of LoanContractFannieMae to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoanContractFannieMae input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Cltv == input.Cltv ||
                    (this.Cltv != null &&
                    this.Cltv.Equals(input.Cltv))
                ) && 
                (
                    this.Community2ndRepaymentStructure == input.Community2ndRepaymentStructure ||
                    (this.Community2ndRepaymentStructure != null &&
                    this.Community2ndRepaymentStructure.Equals(input.Community2ndRepaymentStructure))
                ) && 
                (
                    this.CommunityLending == input.CommunityLending ||
                    (this.CommunityLending != null &&
                    this.CommunityLending.Equals(input.CommunityLending))
                ) && 
                (
                    this.DuVersion == input.DuVersion ||
                    (this.DuVersion != null &&
                    this.DuVersion.Equals(input.DuVersion))
                ) && 
                (
                    this.Hcltv == input.Hcltv ||
                    (this.Hcltv != null &&
                    this.Hcltv.Equals(input.Hcltv))
                ) && 
                (
                    this.InterestedPartyContribution == input.InterestedPartyContribution ||
                    (this.InterestedPartyContribution != null &&
                    this.InterestedPartyContribution.Equals(input.InterestedPartyContribution))
                ) && 
                (
                    this.Ltv == input.Ltv ||
                    (this.Ltv != null &&
                    this.Ltv.Equals(input.Ltv))
                ) && 
                (
                    this.MornetPlusCaseFileId == input.MornetPlusCaseFileId ||
                    (this.MornetPlusCaseFileId != null &&
                    this.MornetPlusCaseFileId.Equals(input.MornetPlusCaseFileId))
                ) && 
                (
                    this.StartUpMortgage == input.StartUpMortgage ||
                    (this.StartUpMortgage != null &&
                    this.StartUpMortgage.Equals(input.StartUpMortgage))
                ) && 
                (
                    this.PropertyInspectionWaiverMessage == input.PropertyInspectionWaiverMessage ||
                    (this.PropertyInspectionWaiverMessage != null &&
                    this.PropertyInspectionWaiverMessage.Equals(input.PropertyInspectionWaiverMessage))
                ) && 
                (
                    this.CollateralUnderwriterScore == input.CollateralUnderwriterScore ||
                    (this.CollateralUnderwriterScore != null &&
                    this.CollateralUnderwriterScore.Equals(input.CollateralUnderwriterScore))
                ) && 
                (
                    this.UCDPStatus == input.UCDPStatus ||
                    (this.UCDPStatus != null &&
                    this.UCDPStatus.Equals(input.UCDPStatus))
                ) && 
                (
                    this.ECStatus1003 == input.ECStatus1003 ||
                    (this.ECStatus1003 != null &&
                    this.ECStatus1003.Equals(input.ECStatus1003))
                ) && 
                (
                    this.ULDDECStatus == input.ULDDECStatus ||
                    (this.ULDDECStatus != null &&
                    this.ULDDECStatus.Equals(input.ULDDECStatus))
                ) && 
                (
                    this.UCDCollectionStatus == input.UCDCollectionStatus ||
                    (this.UCDCollectionStatus != null &&
                    this.UCDCollectionStatus.Equals(input.UCDCollectionStatus))
                ) && 
                (
                    this.CaseIDAssignedByUCDIndicator == input.CaseIDAssignedByUCDIndicator ||
                    (this.CaseIDAssignedByUCDIndicator != null &&
                    this.CaseIDAssignedByUCDIndicator.Equals(input.CaseIDAssignedByUCDIndicator))
                ) && 
                (
                    this.CorrespondentAssignmentID == input.CorrespondentAssignmentID ||
                    (this.CorrespondentAssignmentID != null &&
                    this.CorrespondentAssignmentID.Equals(input.CorrespondentAssignmentID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Cltv != null)
                    hashCode = hashCode * 59 + this.Cltv.GetHashCode();
                if (this.Community2ndRepaymentStructure != null)
                    hashCode = hashCode * 59 + this.Community2ndRepaymentStructure.GetHashCode();
                if (this.CommunityLending != null)
                    hashCode = hashCode * 59 + this.CommunityLending.GetHashCode();
                if (this.DuVersion != null)
                    hashCode = hashCode * 59 + this.DuVersion.GetHashCode();
                if (this.Hcltv != null)
                    hashCode = hashCode * 59 + this.Hcltv.GetHashCode();
                if (this.InterestedPartyContribution != null)
                    hashCode = hashCode * 59 + this.InterestedPartyContribution.GetHashCode();
                if (this.Ltv != null)
                    hashCode = hashCode * 59 + this.Ltv.GetHashCode();
                if (this.MornetPlusCaseFileId != null)
                    hashCode = hashCode * 59 + this.MornetPlusCaseFileId.GetHashCode();
                if (this.StartUpMortgage != null)
                    hashCode = hashCode * 59 + this.StartUpMortgage.GetHashCode();
                if (this.PropertyInspectionWaiverMessage != null)
                    hashCode = hashCode * 59 + this.PropertyInspectionWaiverMessage.GetHashCode();
                if (this.CollateralUnderwriterScore != null)
                    hashCode = hashCode * 59 + this.CollateralUnderwriterScore.GetHashCode();
                if (this.UCDPStatus != null)
                    hashCode = hashCode * 59 + this.UCDPStatus.GetHashCode();
                if (this.ECStatus1003 != null)
                    hashCode = hashCode * 59 + this.ECStatus1003.GetHashCode();
                if (this.ULDDECStatus != null)
                    hashCode = hashCode * 59 + this.ULDDECStatus.GetHashCode();
                if (this.UCDCollectionStatus != null)
                    hashCode = hashCode * 59 + this.UCDCollectionStatus.GetHashCode();
                if (this.CaseIDAssignedByUCDIndicator != null)
                    hashCode = hashCode * 59 + this.CaseIDAssignedByUCDIndicator.GetHashCode();
                if (this.CorrespondentAssignmentID != null)
                    hashCode = hashCode * 59 + this.CorrespondentAssignmentID.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
