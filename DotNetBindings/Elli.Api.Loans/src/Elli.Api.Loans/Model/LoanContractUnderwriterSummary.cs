/*
* Copyright 2017 Ellie Mae, Inc.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*
*  1. Redistributions of source code must retain the above copyright notice,
*     this list of conditions and the following disclaimer.
*
*  2. Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*  3. Neither the name of the copyright holder nor the names of its
*     contributors may be used to endorse or promote products derived from this
*     software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.
*/


/* 
 * Loan
 *
 * Returns the entire loan or specific entities of a loan.
 *
 * OpenAPI spec version: 1.4.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Elli.Api.Loans.Client.SwaggerDateConverter;

namespace Elli.Api.Loans.Model
{
    /// <summary>
    /// LoanContractUnderwriterSummary
    /// </summary>
    [DataContract]
    public partial class LoanContractUnderwriterSummary :  IEquatable<LoanContractUnderwriterSummary>, IValidatableObject
    {
    
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Appraisal
        /// </summary>
        [DataMember(Name="appraisal", EmitDefaultValue=false)]
        public string Appraisal { get; set; }

        /// <summary>
        /// Gets or Sets AppraisalCompletedDate
        /// </summary>
        [DataMember(Name="appraisalCompletedDate", EmitDefaultValue=false)]
        public DateTime? AppraisalCompletedDate { get; set; }

        /// <summary>
        /// Gets or Sets AppraisalExpiredDate
        /// </summary>
        [DataMember(Name="appraisalExpiredDate", EmitDefaultValue=false)]
        public DateTime? AppraisalExpiredDate { get; set; }

        /// <summary>
        /// Gets or Sets AppraisalOrderedDate
        /// </summary>
        [DataMember(Name="appraisalOrderedDate", EmitDefaultValue=false)]
        public DateTime? AppraisalOrderedDate { get; set; }

        /// <summary>
        /// Gets or Sets AppraisalType
        /// </summary>
        [DataMember(Name="appraisalType", EmitDefaultValue=false)]
        public string AppraisalType { get; set; }

        /// <summary>
        /// Gets or Sets ApprovalExpiredDate
        /// </summary>
        [DataMember(Name="approvalExpiredDate", EmitDefaultValue=false)]
        public DateTime? ApprovalExpiredDate { get; set; }

        /// <summary>
        /// Gets or Sets ApprovedBy
        /// </summary>
        [DataMember(Name="approvedBy", EmitDefaultValue=false)]
        public string ApprovedBy { get; set; }

        /// <summary>
        /// Gets or Sets ApprovedDate
        /// </summary>
        [DataMember(Name="approvedDate", EmitDefaultValue=false)]
        public DateTime? ApprovedDate { get; set; }

        /// <summary>
        /// Gets or Sets AusNumber
        /// </summary>
        [DataMember(Name="ausNumber", EmitDefaultValue=false)]
        public string AusNumber { get; set; }

        /// <summary>
        /// Gets or Sets AusRunDate
        /// </summary>
        [DataMember(Name="ausRunDate", EmitDefaultValue=false)]
        public DateTime? AusRunDate { get; set; }

        /// <summary>
        /// Gets or Sets AusSource
        /// </summary>
        [DataMember(Name="ausSource", EmitDefaultValue=false)]
        public string AusSource { get; set; }

        /// <summary>
        /// Gets or Sets BenefitRequiredIndicator
        /// </summary>
        [DataMember(Name="benefitRequiredIndicator", EmitDefaultValue=false)]
        public bool? BenefitRequiredIndicator { get; set; }

        /// <summary>
        /// Gets or Sets ClearToCloseDate
        /// </summary>
        [DataMember(Name="clearToCloseDate", EmitDefaultValue=false)]
        public DateTime? ClearToCloseDate { get; set; }

        /// <summary>
        /// Gets or Sets Concerns
        /// </summary>
        [DataMember(Name="concerns", EmitDefaultValue=false)]
        public string Concerns { get; set; }

        /// <summary>
        /// Gets or Sets Conditions
        /// </summary>
        [DataMember(Name="conditions", EmitDefaultValue=false)]
        public string Conditions { get; set; }

        /// <summary>
        /// Gets or Sets CounterOfferDate
        /// </summary>
        [DataMember(Name="counterOfferDate", EmitDefaultValue=false)]
        public DateTime? CounterOfferDate { get; set; }

        /// <summary>
        /// Gets or Sets CounterOfferStatus
        /// </summary>
        [DataMember(Name="counterOfferStatus", EmitDefaultValue=false)]
        public string CounterOfferStatus { get; set; }

        /// <summary>
        /// Gets or Sets Credit
        /// </summary>
        [DataMember(Name="credit", EmitDefaultValue=false)]
        public string Credit { get; set; }

        /// <summary>
        /// Gets or Sets CreditApprovalDate
        /// </summary>
        [DataMember(Name="creditApprovalDate", EmitDefaultValue=false)]
        public DateTime? CreditApprovalDate { get; set; }

        /// <summary>
        /// Gets or Sets DeniedBy
        /// </summary>
        [DataMember(Name="deniedBy", EmitDefaultValue=false)]
        public string DeniedBy { get; set; }

        /// <summary>
        /// Gets or Sets DeniedDate
        /// </summary>
        [DataMember(Name="deniedDate", EmitDefaultValue=false)]
        public DateTime? DeniedDate { get; set; }

        /// <summary>
        /// Gets or Sets DifferentApprovalExpiredDate
        /// </summary>
        [DataMember(Name="differentApprovalExpiredDate", EmitDefaultValue=false)]
        public DateTime? DifferentApprovalExpiredDate { get; set; }

        /// <summary>
        /// Gets or Sets DifferentApprovedBy
        /// </summary>
        [DataMember(Name="differentApprovedBy", EmitDefaultValue=false)]
        public string DifferentApprovedBy { get; set; }

        /// <summary>
        /// Gets or Sets DifferentApprovedDate
        /// </summary>
        [DataMember(Name="differentApprovedDate", EmitDefaultValue=false)]
        public DateTime? DifferentApprovedDate { get; set; }

        /// <summary>
        /// Gets or Sets Exceptions
        /// </summary>
        [DataMember(Name="exceptions", EmitDefaultValue=false)]
        public string Exceptions { get; set; }

        /// <summary>
        /// Gets or Sets ExceptionSignOffBy
        /// </summary>
        [DataMember(Name="exceptionSignOffBy", EmitDefaultValue=false)]
        public string ExceptionSignOffBy { get; set; }

        /// <summary>
        /// Gets or Sets ExceptionSignOffDate
        /// </summary>
        [DataMember(Name="exceptionSignOffDate", EmitDefaultValue=false)]
        public DateTime? ExceptionSignOffDate { get; set; }

        /// <summary>
        /// Gets or Sets MaxRate
        /// </summary>
        [DataMember(Name="maxRate", EmitDefaultValue=false)]
        public double? MaxRate { get; set; }

        /// <summary>
        /// Gets or Sets MiOrderedDate
        /// </summary>
        [DataMember(Name="miOrderedDate", EmitDefaultValue=false)]
        public DateTime? MiOrderedDate { get; set; }

        /// <summary>
        /// Gets or Sets MiReceivedDate
        /// </summary>
        [DataMember(Name="miReceivedDate", EmitDefaultValue=false)]
        public DateTime? MiReceivedDate { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedLoanAmount
        /// </summary>
        [DataMember(Name="modifiedLoanAmount", EmitDefaultValue=false)]
        public double? ModifiedLoanAmount { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedLoanRate
        /// </summary>
        [DataMember(Name="modifiedLoanRate", EmitDefaultValue=false)]
        public double? ModifiedLoanRate { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedLoanTerm
        /// </summary>
        [DataMember(Name="modifiedLoanTerm", EmitDefaultValue=false)]
        public int? ModifiedLoanTerm { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedLtv
        /// </summary>
        [DataMember(Name="modifiedLtv", EmitDefaultValue=false)]
        public double? ModifiedLtv { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedMonthlyPayment
        /// </summary>
        [DataMember(Name="modifiedMonthlyPayment", EmitDefaultValue=false)]
        public double? ModifiedMonthlyPayment { get; set; }

        /// <summary>
        /// Gets or Sets OriginalAppraiser
        /// </summary>
        [DataMember(Name="originalAppraiser", EmitDefaultValue=false)]
        public string OriginalAppraiser { get; set; }

        /// <summary>
        /// Gets or Sets OriginalAppraisersValue
        /// </summary>
        [DataMember(Name="originalAppraisersValue", EmitDefaultValue=false)]
        public double? OriginalAppraisersValue { get; set; }

        /// <summary>
        /// Gets or Sets ResubmittedDate
        /// </summary>
        [DataMember(Name="resubmittedDate", EmitDefaultValue=false)]
        public DateTime? ResubmittedDate { get; set; }

        /// <summary>
        /// Gets or Sets ReviewAppraiser
        /// </summary>
        [DataMember(Name="reviewAppraiser", EmitDefaultValue=false)]
        public string ReviewAppraiser { get; set; }

        /// <summary>
        /// Gets or Sets ReviewCompletedDate
        /// </summary>
        [DataMember(Name="reviewCompletedDate", EmitDefaultValue=false)]
        public DateTime? ReviewCompletedDate { get; set; }

        /// <summary>
        /// Gets or Sets ReviewRequestedDate
        /// </summary>
        [DataMember(Name="reviewRequestedDate", EmitDefaultValue=false)]
        public DateTime? ReviewRequestedDate { get; set; }

        /// <summary>
        /// Gets or Sets ReviewType
        /// </summary>
        [DataMember(Name="reviewType", EmitDefaultValue=false)]
        public string ReviewType { get; set; }

        /// <summary>
        /// Gets or Sets ReviewValue
        /// </summary>
        [DataMember(Name="reviewValue", EmitDefaultValue=false)]
        public double? ReviewValue { get; set; }

        /// <summary>
        /// Gets or Sets SentToDate
        /// </summary>
        [DataMember(Name="sentToDate", EmitDefaultValue=false)]
        public DateTime? SentToDate { get; set; }

        /// <summary>
        /// Gets or Sets SignOffBy
        /// </summary>
        [DataMember(Name="signOffBy", EmitDefaultValue=false)]
        public string SignOffBy { get; set; }

        /// <summary>
        /// Gets or Sets SignOffDate
        /// </summary>
        [DataMember(Name="signOffDate", EmitDefaultValue=false)]
        public DateTime? SignOffDate { get; set; }

        /// <summary>
        /// Gets or Sets Strengths
        /// </summary>
        [DataMember(Name="strengths", EmitDefaultValue=false)]
        public string Strengths { get; set; }

        /// <summary>
        /// Gets or Sets SubmittedDate
        /// </summary>
        [DataMember(Name="submittedDate", EmitDefaultValue=false)]
        public DateTime? SubmittedDate { get; set; }

        /// <summary>
        /// Gets or Sets SupervisoryAppraiserLicenseNumber
        /// </summary>
        [DataMember(Name="supervisoryAppraiserLicenseNumber", EmitDefaultValue=false)]
        public string SupervisoryAppraiserLicenseNumber { get; set; }

        /// <summary>
        /// Gets or Sets SuspendedBy
        /// </summary>
        [DataMember(Name="suspendedBy", EmitDefaultValue=false)]
        public string SuspendedBy { get; set; }

        /// <summary>
        /// Gets or Sets SuspendedDate
        /// </summary>
        [DataMember(Name="suspendedDate", EmitDefaultValue=false)]
        public DateTime? SuspendedDate { get; set; }

        /// <summary>
        /// Gets or Sets SuspendedReasons
        /// </summary>
        [DataMember(Name="suspendedReasons", EmitDefaultValue=false)]
        public string SuspendedReasons { get; set; }

        /// <summary>
        /// Gets or Sets IsAgencyWithAgreement
        /// </summary>
        [DataMember(Name="isAgencyWithAgreement", EmitDefaultValue=false)]
        public bool? IsAgencyWithAgreement { get; set; }

        /// <summary>
        /// Gets or Sets IsAgencyWaiver
        /// </summary>
        [DataMember(Name="isAgencyWaiver", EmitDefaultValue=false)]
        public bool? IsAgencyWaiver { get; set; }

        /// <summary>
        /// Gets or Sets IsAgencyManually
        /// </summary>
        [DataMember(Name="isAgencyManually", EmitDefaultValue=false)]
        public bool? IsAgencyManually { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LoanContractUnderwriterSummary {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Appraisal: ").Append(Appraisal).Append("\n");
            sb.Append("  AppraisalCompletedDate: ").Append(AppraisalCompletedDate).Append("\n");
            sb.Append("  AppraisalExpiredDate: ").Append(AppraisalExpiredDate).Append("\n");
            sb.Append("  AppraisalOrderedDate: ").Append(AppraisalOrderedDate).Append("\n");
            sb.Append("  AppraisalType: ").Append(AppraisalType).Append("\n");
            sb.Append("  ApprovalExpiredDate: ").Append(ApprovalExpiredDate).Append("\n");
            sb.Append("  ApprovedBy: ").Append(ApprovedBy).Append("\n");
            sb.Append("  ApprovedDate: ").Append(ApprovedDate).Append("\n");
            sb.Append("  AusNumber: ").Append(AusNumber).Append("\n");
            sb.Append("  AusRunDate: ").Append(AusRunDate).Append("\n");
            sb.Append("  AusSource: ").Append(AusSource).Append("\n");
            sb.Append("  BenefitRequiredIndicator: ").Append(BenefitRequiredIndicator).Append("\n");
            sb.Append("  ClearToCloseDate: ").Append(ClearToCloseDate).Append("\n");
            sb.Append("  Concerns: ").Append(Concerns).Append("\n");
            sb.Append("  Conditions: ").Append(Conditions).Append("\n");
            sb.Append("  CounterOfferDate: ").Append(CounterOfferDate).Append("\n");
            sb.Append("  CounterOfferStatus: ").Append(CounterOfferStatus).Append("\n");
            sb.Append("  Credit: ").Append(Credit).Append("\n");
            sb.Append("  CreditApprovalDate: ").Append(CreditApprovalDate).Append("\n");
            sb.Append("  DeniedBy: ").Append(DeniedBy).Append("\n");
            sb.Append("  DeniedDate: ").Append(DeniedDate).Append("\n");
            sb.Append("  DifferentApprovalExpiredDate: ").Append(DifferentApprovalExpiredDate).Append("\n");
            sb.Append("  DifferentApprovedBy: ").Append(DifferentApprovedBy).Append("\n");
            sb.Append("  DifferentApprovedDate: ").Append(DifferentApprovedDate).Append("\n");
            sb.Append("  Exceptions: ").Append(Exceptions).Append("\n");
            sb.Append("  ExceptionSignOffBy: ").Append(ExceptionSignOffBy).Append("\n");
            sb.Append("  ExceptionSignOffDate: ").Append(ExceptionSignOffDate).Append("\n");
            sb.Append("  MaxRate: ").Append(MaxRate).Append("\n");
            sb.Append("  MiOrderedDate: ").Append(MiOrderedDate).Append("\n");
            sb.Append("  MiReceivedDate: ").Append(MiReceivedDate).Append("\n");
            sb.Append("  ModifiedLoanAmount: ").Append(ModifiedLoanAmount).Append("\n");
            sb.Append("  ModifiedLoanRate: ").Append(ModifiedLoanRate).Append("\n");
            sb.Append("  ModifiedLoanTerm: ").Append(ModifiedLoanTerm).Append("\n");
            sb.Append("  ModifiedLtv: ").Append(ModifiedLtv).Append("\n");
            sb.Append("  ModifiedMonthlyPayment: ").Append(ModifiedMonthlyPayment).Append("\n");
            sb.Append("  OriginalAppraiser: ").Append(OriginalAppraiser).Append("\n");
            sb.Append("  OriginalAppraisersValue: ").Append(OriginalAppraisersValue).Append("\n");
            sb.Append("  ResubmittedDate: ").Append(ResubmittedDate).Append("\n");
            sb.Append("  ReviewAppraiser: ").Append(ReviewAppraiser).Append("\n");
            sb.Append("  ReviewCompletedDate: ").Append(ReviewCompletedDate).Append("\n");
            sb.Append("  ReviewRequestedDate: ").Append(ReviewRequestedDate).Append("\n");
            sb.Append("  ReviewType: ").Append(ReviewType).Append("\n");
            sb.Append("  ReviewValue: ").Append(ReviewValue).Append("\n");
            sb.Append("  SentToDate: ").Append(SentToDate).Append("\n");
            sb.Append("  SignOffBy: ").Append(SignOffBy).Append("\n");
            sb.Append("  SignOffDate: ").Append(SignOffDate).Append("\n");
            sb.Append("  Strengths: ").Append(Strengths).Append("\n");
            sb.Append("  SubmittedDate: ").Append(SubmittedDate).Append("\n");
            sb.Append("  SupervisoryAppraiserLicenseNumber: ").Append(SupervisoryAppraiserLicenseNumber).Append("\n");
            sb.Append("  SuspendedBy: ").Append(SuspendedBy).Append("\n");
            sb.Append("  SuspendedDate: ").Append(SuspendedDate).Append("\n");
            sb.Append("  SuspendedReasons: ").Append(SuspendedReasons).Append("\n");
            sb.Append("  IsAgencyWithAgreement: ").Append(IsAgencyWithAgreement).Append("\n");
            sb.Append("  IsAgencyWaiver: ").Append(IsAgencyWaiver).Append("\n");
            sb.Append("  IsAgencyManually: ").Append(IsAgencyManually).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LoanContractUnderwriterSummary);
        }

        /// <summary>
        /// Returns true if LoanContractUnderwriterSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of LoanContractUnderwriterSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoanContractUnderwriterSummary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Appraisal == input.Appraisal ||
                    (this.Appraisal != null &&
                    this.Appraisal.Equals(input.Appraisal))
                ) && 
                (
                    this.AppraisalCompletedDate == input.AppraisalCompletedDate ||
                    (this.AppraisalCompletedDate != null &&
                    this.AppraisalCompletedDate.Equals(input.AppraisalCompletedDate))
                ) && 
                (
                    this.AppraisalExpiredDate == input.AppraisalExpiredDate ||
                    (this.AppraisalExpiredDate != null &&
                    this.AppraisalExpiredDate.Equals(input.AppraisalExpiredDate))
                ) && 
                (
                    this.AppraisalOrderedDate == input.AppraisalOrderedDate ||
                    (this.AppraisalOrderedDate != null &&
                    this.AppraisalOrderedDate.Equals(input.AppraisalOrderedDate))
                ) && 
                (
                    this.AppraisalType == input.AppraisalType ||
                    (this.AppraisalType != null &&
                    this.AppraisalType.Equals(input.AppraisalType))
                ) && 
                (
                    this.ApprovalExpiredDate == input.ApprovalExpiredDate ||
                    (this.ApprovalExpiredDate != null &&
                    this.ApprovalExpiredDate.Equals(input.ApprovalExpiredDate))
                ) && 
                (
                    this.ApprovedBy == input.ApprovedBy ||
                    (this.ApprovedBy != null &&
                    this.ApprovedBy.Equals(input.ApprovedBy))
                ) && 
                (
                    this.ApprovedDate == input.ApprovedDate ||
                    (this.ApprovedDate != null &&
                    this.ApprovedDate.Equals(input.ApprovedDate))
                ) && 
                (
                    this.AusNumber == input.AusNumber ||
                    (this.AusNumber != null &&
                    this.AusNumber.Equals(input.AusNumber))
                ) && 
                (
                    this.AusRunDate == input.AusRunDate ||
                    (this.AusRunDate != null &&
                    this.AusRunDate.Equals(input.AusRunDate))
                ) && 
                (
                    this.AusSource == input.AusSource ||
                    (this.AusSource != null &&
                    this.AusSource.Equals(input.AusSource))
                ) && 
                (
                    this.BenefitRequiredIndicator == input.BenefitRequiredIndicator ||
                    (this.BenefitRequiredIndicator != null &&
                    this.BenefitRequiredIndicator.Equals(input.BenefitRequiredIndicator))
                ) && 
                (
                    this.ClearToCloseDate == input.ClearToCloseDate ||
                    (this.ClearToCloseDate != null &&
                    this.ClearToCloseDate.Equals(input.ClearToCloseDate))
                ) && 
                (
                    this.Concerns == input.Concerns ||
                    (this.Concerns != null &&
                    this.Concerns.Equals(input.Concerns))
                ) && 
                (
                    this.Conditions == input.Conditions ||
                    (this.Conditions != null &&
                    this.Conditions.Equals(input.Conditions))
                ) && 
                (
                    this.CounterOfferDate == input.CounterOfferDate ||
                    (this.CounterOfferDate != null &&
                    this.CounterOfferDate.Equals(input.CounterOfferDate))
                ) && 
                (
                    this.CounterOfferStatus == input.CounterOfferStatus ||
                    (this.CounterOfferStatus != null &&
                    this.CounterOfferStatus.Equals(input.CounterOfferStatus))
                ) && 
                (
                    this.Credit == input.Credit ||
                    (this.Credit != null &&
                    this.Credit.Equals(input.Credit))
                ) && 
                (
                    this.CreditApprovalDate == input.CreditApprovalDate ||
                    (this.CreditApprovalDate != null &&
                    this.CreditApprovalDate.Equals(input.CreditApprovalDate))
                ) && 
                (
                    this.DeniedBy == input.DeniedBy ||
                    (this.DeniedBy != null &&
                    this.DeniedBy.Equals(input.DeniedBy))
                ) && 
                (
                    this.DeniedDate == input.DeniedDate ||
                    (this.DeniedDate != null &&
                    this.DeniedDate.Equals(input.DeniedDate))
                ) && 
                (
                    this.DifferentApprovalExpiredDate == input.DifferentApprovalExpiredDate ||
                    (this.DifferentApprovalExpiredDate != null &&
                    this.DifferentApprovalExpiredDate.Equals(input.DifferentApprovalExpiredDate))
                ) && 
                (
                    this.DifferentApprovedBy == input.DifferentApprovedBy ||
                    (this.DifferentApprovedBy != null &&
                    this.DifferentApprovedBy.Equals(input.DifferentApprovedBy))
                ) && 
                (
                    this.DifferentApprovedDate == input.DifferentApprovedDate ||
                    (this.DifferentApprovedDate != null &&
                    this.DifferentApprovedDate.Equals(input.DifferentApprovedDate))
                ) && 
                (
                    this.Exceptions == input.Exceptions ||
                    (this.Exceptions != null &&
                    this.Exceptions.Equals(input.Exceptions))
                ) && 
                (
                    this.ExceptionSignOffBy == input.ExceptionSignOffBy ||
                    (this.ExceptionSignOffBy != null &&
                    this.ExceptionSignOffBy.Equals(input.ExceptionSignOffBy))
                ) && 
                (
                    this.ExceptionSignOffDate == input.ExceptionSignOffDate ||
                    (this.ExceptionSignOffDate != null &&
                    this.ExceptionSignOffDate.Equals(input.ExceptionSignOffDate))
                ) && 
                (
                    this.MaxRate == input.MaxRate ||
                    (this.MaxRate != null &&
                    this.MaxRate.Equals(input.MaxRate))
                ) && 
                (
                    this.MiOrderedDate == input.MiOrderedDate ||
                    (this.MiOrderedDate != null &&
                    this.MiOrderedDate.Equals(input.MiOrderedDate))
                ) && 
                (
                    this.MiReceivedDate == input.MiReceivedDate ||
                    (this.MiReceivedDate != null &&
                    this.MiReceivedDate.Equals(input.MiReceivedDate))
                ) && 
                (
                    this.ModifiedLoanAmount == input.ModifiedLoanAmount ||
                    (this.ModifiedLoanAmount != null &&
                    this.ModifiedLoanAmount.Equals(input.ModifiedLoanAmount))
                ) && 
                (
                    this.ModifiedLoanRate == input.ModifiedLoanRate ||
                    (this.ModifiedLoanRate != null &&
                    this.ModifiedLoanRate.Equals(input.ModifiedLoanRate))
                ) && 
                (
                    this.ModifiedLoanTerm == input.ModifiedLoanTerm ||
                    (this.ModifiedLoanTerm != null &&
                    this.ModifiedLoanTerm.Equals(input.ModifiedLoanTerm))
                ) && 
                (
                    this.ModifiedLtv == input.ModifiedLtv ||
                    (this.ModifiedLtv != null &&
                    this.ModifiedLtv.Equals(input.ModifiedLtv))
                ) && 
                (
                    this.ModifiedMonthlyPayment == input.ModifiedMonthlyPayment ||
                    (this.ModifiedMonthlyPayment != null &&
                    this.ModifiedMonthlyPayment.Equals(input.ModifiedMonthlyPayment))
                ) && 
                (
                    this.OriginalAppraiser == input.OriginalAppraiser ||
                    (this.OriginalAppraiser != null &&
                    this.OriginalAppraiser.Equals(input.OriginalAppraiser))
                ) && 
                (
                    this.OriginalAppraisersValue == input.OriginalAppraisersValue ||
                    (this.OriginalAppraisersValue != null &&
                    this.OriginalAppraisersValue.Equals(input.OriginalAppraisersValue))
                ) && 
                (
                    this.ResubmittedDate == input.ResubmittedDate ||
                    (this.ResubmittedDate != null &&
                    this.ResubmittedDate.Equals(input.ResubmittedDate))
                ) && 
                (
                    this.ReviewAppraiser == input.ReviewAppraiser ||
                    (this.ReviewAppraiser != null &&
                    this.ReviewAppraiser.Equals(input.ReviewAppraiser))
                ) && 
                (
                    this.ReviewCompletedDate == input.ReviewCompletedDate ||
                    (this.ReviewCompletedDate != null &&
                    this.ReviewCompletedDate.Equals(input.ReviewCompletedDate))
                ) && 
                (
                    this.ReviewRequestedDate == input.ReviewRequestedDate ||
                    (this.ReviewRequestedDate != null &&
                    this.ReviewRequestedDate.Equals(input.ReviewRequestedDate))
                ) && 
                (
                    this.ReviewType == input.ReviewType ||
                    (this.ReviewType != null &&
                    this.ReviewType.Equals(input.ReviewType))
                ) && 
                (
                    this.ReviewValue == input.ReviewValue ||
                    (this.ReviewValue != null &&
                    this.ReviewValue.Equals(input.ReviewValue))
                ) && 
                (
                    this.SentToDate == input.SentToDate ||
                    (this.SentToDate != null &&
                    this.SentToDate.Equals(input.SentToDate))
                ) && 
                (
                    this.SignOffBy == input.SignOffBy ||
                    (this.SignOffBy != null &&
                    this.SignOffBy.Equals(input.SignOffBy))
                ) && 
                (
                    this.SignOffDate == input.SignOffDate ||
                    (this.SignOffDate != null &&
                    this.SignOffDate.Equals(input.SignOffDate))
                ) && 
                (
                    this.Strengths == input.Strengths ||
                    (this.Strengths != null &&
                    this.Strengths.Equals(input.Strengths))
                ) && 
                (
                    this.SubmittedDate == input.SubmittedDate ||
                    (this.SubmittedDate != null &&
                    this.SubmittedDate.Equals(input.SubmittedDate))
                ) && 
                (
                    this.SupervisoryAppraiserLicenseNumber == input.SupervisoryAppraiserLicenseNumber ||
                    (this.SupervisoryAppraiserLicenseNumber != null &&
                    this.SupervisoryAppraiserLicenseNumber.Equals(input.SupervisoryAppraiserLicenseNumber))
                ) && 
                (
                    this.SuspendedBy == input.SuspendedBy ||
                    (this.SuspendedBy != null &&
                    this.SuspendedBy.Equals(input.SuspendedBy))
                ) && 
                (
                    this.SuspendedDate == input.SuspendedDate ||
                    (this.SuspendedDate != null &&
                    this.SuspendedDate.Equals(input.SuspendedDate))
                ) && 
                (
                    this.SuspendedReasons == input.SuspendedReasons ||
                    (this.SuspendedReasons != null &&
                    this.SuspendedReasons.Equals(input.SuspendedReasons))
                ) && 
                (
                    this.IsAgencyWithAgreement == input.IsAgencyWithAgreement ||
                    (this.IsAgencyWithAgreement != null &&
                    this.IsAgencyWithAgreement.Equals(input.IsAgencyWithAgreement))
                ) && 
                (
                    this.IsAgencyWaiver == input.IsAgencyWaiver ||
                    (this.IsAgencyWaiver != null &&
                    this.IsAgencyWaiver.Equals(input.IsAgencyWaiver))
                ) && 
                (
                    this.IsAgencyManually == input.IsAgencyManually ||
                    (this.IsAgencyManually != null &&
                    this.IsAgencyManually.Equals(input.IsAgencyManually))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Appraisal != null)
                    hashCode = hashCode * 59 + this.Appraisal.GetHashCode();
                if (this.AppraisalCompletedDate != null)
                    hashCode = hashCode * 59 + this.AppraisalCompletedDate.GetHashCode();
                if (this.AppraisalExpiredDate != null)
                    hashCode = hashCode * 59 + this.AppraisalExpiredDate.GetHashCode();
                if (this.AppraisalOrderedDate != null)
                    hashCode = hashCode * 59 + this.AppraisalOrderedDate.GetHashCode();
                if (this.AppraisalType != null)
                    hashCode = hashCode * 59 + this.AppraisalType.GetHashCode();
                if (this.ApprovalExpiredDate != null)
                    hashCode = hashCode * 59 + this.ApprovalExpiredDate.GetHashCode();
                if (this.ApprovedBy != null)
                    hashCode = hashCode * 59 + this.ApprovedBy.GetHashCode();
                if (this.ApprovedDate != null)
                    hashCode = hashCode * 59 + this.ApprovedDate.GetHashCode();
                if (this.AusNumber != null)
                    hashCode = hashCode * 59 + this.AusNumber.GetHashCode();
                if (this.AusRunDate != null)
                    hashCode = hashCode * 59 + this.AusRunDate.GetHashCode();
                if (this.AusSource != null)
                    hashCode = hashCode * 59 + this.AusSource.GetHashCode();
                if (this.BenefitRequiredIndicator != null)
                    hashCode = hashCode * 59 + this.BenefitRequiredIndicator.GetHashCode();
                if (this.ClearToCloseDate != null)
                    hashCode = hashCode * 59 + this.ClearToCloseDate.GetHashCode();
                if (this.Concerns != null)
                    hashCode = hashCode * 59 + this.Concerns.GetHashCode();
                if (this.Conditions != null)
                    hashCode = hashCode * 59 + this.Conditions.GetHashCode();
                if (this.CounterOfferDate != null)
                    hashCode = hashCode * 59 + this.CounterOfferDate.GetHashCode();
                if (this.CounterOfferStatus != null)
                    hashCode = hashCode * 59 + this.CounterOfferStatus.GetHashCode();
                if (this.Credit != null)
                    hashCode = hashCode * 59 + this.Credit.GetHashCode();
                if (this.CreditApprovalDate != null)
                    hashCode = hashCode * 59 + this.CreditApprovalDate.GetHashCode();
                if (this.DeniedBy != null)
                    hashCode = hashCode * 59 + this.DeniedBy.GetHashCode();
                if (this.DeniedDate != null)
                    hashCode = hashCode * 59 + this.DeniedDate.GetHashCode();
                if (this.DifferentApprovalExpiredDate != null)
                    hashCode = hashCode * 59 + this.DifferentApprovalExpiredDate.GetHashCode();
                if (this.DifferentApprovedBy != null)
                    hashCode = hashCode * 59 + this.DifferentApprovedBy.GetHashCode();
                if (this.DifferentApprovedDate != null)
                    hashCode = hashCode * 59 + this.DifferentApprovedDate.GetHashCode();
                if (this.Exceptions != null)
                    hashCode = hashCode * 59 + this.Exceptions.GetHashCode();
                if (this.ExceptionSignOffBy != null)
                    hashCode = hashCode * 59 + this.ExceptionSignOffBy.GetHashCode();
                if (this.ExceptionSignOffDate != null)
                    hashCode = hashCode * 59 + this.ExceptionSignOffDate.GetHashCode();
                if (this.MaxRate != null)
                    hashCode = hashCode * 59 + this.MaxRate.GetHashCode();
                if (this.MiOrderedDate != null)
                    hashCode = hashCode * 59 + this.MiOrderedDate.GetHashCode();
                if (this.MiReceivedDate != null)
                    hashCode = hashCode * 59 + this.MiReceivedDate.GetHashCode();
                if (this.ModifiedLoanAmount != null)
                    hashCode = hashCode * 59 + this.ModifiedLoanAmount.GetHashCode();
                if (this.ModifiedLoanRate != null)
                    hashCode = hashCode * 59 + this.ModifiedLoanRate.GetHashCode();
                if (this.ModifiedLoanTerm != null)
                    hashCode = hashCode * 59 + this.ModifiedLoanTerm.GetHashCode();
                if (this.ModifiedLtv != null)
                    hashCode = hashCode * 59 + this.ModifiedLtv.GetHashCode();
                if (this.ModifiedMonthlyPayment != null)
                    hashCode = hashCode * 59 + this.ModifiedMonthlyPayment.GetHashCode();
                if (this.OriginalAppraiser != null)
                    hashCode = hashCode * 59 + this.OriginalAppraiser.GetHashCode();
                if (this.OriginalAppraisersValue != null)
                    hashCode = hashCode * 59 + this.OriginalAppraisersValue.GetHashCode();
                if (this.ResubmittedDate != null)
                    hashCode = hashCode * 59 + this.ResubmittedDate.GetHashCode();
                if (this.ReviewAppraiser != null)
                    hashCode = hashCode * 59 + this.ReviewAppraiser.GetHashCode();
                if (this.ReviewCompletedDate != null)
                    hashCode = hashCode * 59 + this.ReviewCompletedDate.GetHashCode();
                if (this.ReviewRequestedDate != null)
                    hashCode = hashCode * 59 + this.ReviewRequestedDate.GetHashCode();
                if (this.ReviewType != null)
                    hashCode = hashCode * 59 + this.ReviewType.GetHashCode();
                if (this.ReviewValue != null)
                    hashCode = hashCode * 59 + this.ReviewValue.GetHashCode();
                if (this.SentToDate != null)
                    hashCode = hashCode * 59 + this.SentToDate.GetHashCode();
                if (this.SignOffBy != null)
                    hashCode = hashCode * 59 + this.SignOffBy.GetHashCode();
                if (this.SignOffDate != null)
                    hashCode = hashCode * 59 + this.SignOffDate.GetHashCode();
                if (this.Strengths != null)
                    hashCode = hashCode * 59 + this.Strengths.GetHashCode();
                if (this.SubmittedDate != null)
                    hashCode = hashCode * 59 + this.SubmittedDate.GetHashCode();
                if (this.SupervisoryAppraiserLicenseNumber != null)
                    hashCode = hashCode * 59 + this.SupervisoryAppraiserLicenseNumber.GetHashCode();
                if (this.SuspendedBy != null)
                    hashCode = hashCode * 59 + this.SuspendedBy.GetHashCode();
                if (this.SuspendedDate != null)
                    hashCode = hashCode * 59 + this.SuspendedDate.GetHashCode();
                if (this.SuspendedReasons != null)
                    hashCode = hashCode * 59 + this.SuspendedReasons.GetHashCode();
                if (this.IsAgencyWithAgreement != null)
                    hashCode = hashCode * 59 + this.IsAgencyWithAgreement.GetHashCode();
                if (this.IsAgencyWaiver != null)
                    hashCode = hashCode * 59 + this.IsAgencyWaiver.GetHashCode();
                if (this.IsAgencyManually != null)
                    hashCode = hashCode * 59 + this.IsAgencyManually.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
