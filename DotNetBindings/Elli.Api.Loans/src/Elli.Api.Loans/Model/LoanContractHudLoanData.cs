/*
* Copyright 2017 Ellie Mae, Inc.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*
*  1. Redistributions of source code must retain the above copyright notice,
*     this list of conditions and the following disclaimer.
*
*  2. Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*  3. Neither the name of the copyright holder nor the names of its
*     contributors may be used to endorse or promote products derived from this
*     software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.
*/


/* 
 * Loan
 *
 * Returns the entire loan or specific entities of a loan.
 *
 * OpenAPI spec version: 1.4.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Elli.Api.Loans.Client.SwaggerDateConverter;

namespace Elli.Api.Loans.Model
{
    /// <summary>
    /// LoanContractHudLoanData
    /// </summary>
    [DataContract]
    public partial class LoanContractHudLoanData :  IEquatable<LoanContractHudLoanData>, IValidatableObject
    {
    
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets ActualCashInvRequired
        /// </summary>
        [DataMember(Name="actualCashInvRequired", EmitDefaultValue=false)]
        public double? ActualCashInvRequired { get; set; }

        /// <summary>
        /// Gets or Sets AdjustedMaxMtgAmount
        /// </summary>
        [DataMember(Name="adjustedMaxMtgAmount", EmitDefaultValue=false)]
        public double? AdjustedMaxMtgAmount { get; set; }

        /// <summary>
        /// Gets or Sets AfterImprovedValue
        /// </summary>
        [DataMember(Name="afterImprovedValue", EmitDefaultValue=false)]
        public double? AfterImprovedValue { get; set; }

        /// <summary>
        /// Gets or Sets AllowableEnergyImprovements
        /// </summary>
        [DataMember(Name="allowableEnergyImprovements", EmitDefaultValue=false)]
        public double? AllowableEnergyImprovements { get; set; }

        /// <summary>
        /// Gets or Sets ArchitecturalEngineeringFee
        /// </summary>
        [DataMember(Name="architecturalEngineeringFee", EmitDefaultValue=false)]
        public double? ArchitecturalEngineeringFee { get; set; }

        /// <summary>
        /// Gets or Sets AsIsValue
        /// </summary>
        [DataMember(Name="asIsValue", EmitDefaultValue=false)]
        public double? AsIsValue { get; set; }

        /// <summary>
        /// Gets or Sets BorrowerAcknowledgement
        /// </summary>
        [DataMember(Name="borrowerAcknowledgement", EmitDefaultValue=false)]
        public string BorrowerAcknowledgement { get; set; }

        /// <summary>
        /// Gets or Sets BorrowerEstimatedProfit1
        /// </summary>
        [DataMember(Name="borrowerEstimatedProfit1", EmitDefaultValue=false)]
        public double? BorrowerEstimatedProfit1 { get; set; }

        /// <summary>
        /// Gets or Sets BorrowerEstimatedProfit2
        /// </summary>
        [DataMember(Name="borrowerEstimatedProfit2", EmitDefaultValue=false)]
        public double? BorrowerEstimatedProfit2 { get; set; }

        /// <summary>
        /// Gets or Sets BorrowerPaidClosingCosts
        /// </summary>
        [DataMember(Name="borrowerPaidClosingCosts", EmitDefaultValue=false)]
        public double? BorrowerPaidClosingCosts { get; set; }

        /// <summary>
        /// Gets or Sets BorrowerRequiredInvestment
        /// </summary>
        [DataMember(Name="borrowerRequiredInvestment", EmitDefaultValue=false)]
        public double? BorrowerRequiredInvestment { get; set; }

        /// <summary>
        /// Gets or Sets BuildingOnOwnLand
        /// </summary>
        [DataMember(Name="buildingOnOwnLand", EmitDefaultValue=false)]
        public bool? BuildingOnOwnLand { get; set; }

        /// <summary>
        /// Gets or Sets SimpleRefinance
        /// </summary>
        [DataMember(Name="simpleRefinance", EmitDefaultValue=false)]
        public bool? SimpleRefinance { get; set; }

        /// <summary>
        /// Gets or Sets CaseAssignedDate
        /// </summary>
        [DataMember(Name="caseAssignedDate", EmitDefaultValue=false)]
        public DateTime? CaseAssignedDate { get; set; }

        /// <summary>
        /// Gets or Sets ChildSupportBalance
        /// </summary>
        [DataMember(Name="childSupportBalance", EmitDefaultValue=false)]
        public double? ChildSupportBalance { get; set; }

        /// <summary>
        /// Gets or Sets CHUMSForAppraisal
        /// </summary>
        [DataMember(Name="cHUMSForAppraisal", EmitDefaultValue=false)]
        public string CHUMSForAppraisal { get; set; }

        /// <summary>
        /// Gets or Sets CommitmentMaximumMortgageAmount
        /// </summary>
        [DataMember(Name="commitmentMaximumMortgageAmount", EmitDefaultValue=false)]
        public double? CommitmentMaximumMortgageAmount { get; set; }

        /// <summary>
        /// Gets or Sets CommitmentStage
        /// </summary>
        [DataMember(Name="commitmentStage", EmitDefaultValue=false)]
        public string CommitmentStage { get; set; }

        /// <summary>
        /// Gets or Sets ContingencyReserveCostsAmount
        /// </summary>
        [DataMember(Name="contingencyReserveCostsAmount", EmitDefaultValue=false)]
        public double? ContingencyReserveCostsAmount { get; set; }

        /// <summary>
        /// Gets or Sets ContingencyReserveCostsPercent
        /// </summary>
        [DataMember(Name="contingencyReserveCostsPercent", EmitDefaultValue=false)]
        public double? ContingencyReserveCostsPercent { get; set; }

        /// <summary>
        /// Gets or Sets ContractSalesPrice
        /// </summary>
        [DataMember(Name="contractSalesPrice", EmitDefaultValue=false)]
        public double? ContractSalesPrice { get; set; }

        /// <summary>
        /// Gets or Sets DealerContractorAddress
        /// </summary>
        [DataMember(Name="dealerContractorAddress", EmitDefaultValue=false)]
        public string DealerContractorAddress { get; set; }

        /// <summary>
        /// Gets or Sets DealerContractorCity
        /// </summary>
        [DataMember(Name="dealerContractorCity", EmitDefaultValue=false)]
        public string DealerContractorCity { get; set; }

        /// <summary>
        /// Gets or Sets DealerContractorName
        /// </summary>
        [DataMember(Name="dealerContractorName", EmitDefaultValue=false)]
        public string DealerContractorName { get; set; }

        /// <summary>
        /// Gets or Sets DealerContractorPostalCode
        /// </summary>
        [DataMember(Name="dealerContractorPostalCode", EmitDefaultValue=false)]
        public string DealerContractorPostalCode { get; set; }

        /// <summary>
        /// Gets or Sets DealerContractorState
        /// </summary>
        [DataMember(Name="dealerContractorState", EmitDefaultValue=false)]
        public string DealerContractorState { get; set; }

        /// <summary>
        /// Gets or Sets DiscountPointsAmount
        /// </summary>
        [DataMember(Name="discountPointsAmount", EmitDefaultValue=false)]
        public double? DiscountPointsAmount { get; set; }

        /// <summary>
        /// Gets or Sets DiscountPointsPercent
        /// </summary>
        [DataMember(Name="discountPointsPercent", EmitDefaultValue=false)]
        public double? DiscountPointsPercent { get; set; }

        /// <summary>
        /// Gets or Sets EEMIndicator
        /// </summary>
        [DataMember(Name="eEMIndicator", EmitDefaultValue=false)]
        public bool? EEMIndicator { get; set; }

        /// <summary>
        /// Gets or Sets EnergyEfficientMortgageAmount
        /// </summary>
        [DataMember(Name="energyEfficientMortgageAmount", EmitDefaultValue=false)]
        public double? EnergyEfficientMortgageAmount { get; set; }

        /// <summary>
        /// Gets or Sets EscrowCommitment
        /// </summary>
        [DataMember(Name="escrowCommitment", EmitDefaultValue=false)]
        public string EscrowCommitment { get; set; }

        /// <summary>
        /// Gets or Sets ExistingDebt
        /// </summary>
        [DataMember(Name="existingDebt", EmitDefaultValue=false)]
        public bool? ExistingDebt { get; set; }

        /// <summary>
        /// Gets or Sets FHA203kB10SubTotal
        /// </summary>
        [DataMember(Name="fHA203kB10SubTotal", EmitDefaultValue=false)]
        public double? FHA203kB10SubTotal { get; set; }

        /// <summary>
        /// Gets or Sets FHA203kRemarks
        /// </summary>
        [DataMember(Name="fHA203kRemarks", EmitDefaultValue=false)]
        public string FHA203kRemarks { get; set; }

        /// <summary>
        /// Gets or Sets FHAStreamlineType
        /// </summary>
        [DataMember(Name="fHAStreamlineType", EmitDefaultValue=false)]
        public string FHAStreamlineType { get; set; }

        /// <summary>
        /// Gets or Sets HaveOtherPendingApplicationForFHA
        /// </summary>
        [DataMember(Name="haveOtherPendingApplicationForFHA", EmitDefaultValue=false)]
        public bool? HaveOtherPendingApplicationForFHA { get; set; }

        /// <summary>
        /// Gets or Sets HUDOwned
        /// </summary>
        [DataMember(Name="hUDOwned", EmitDefaultValue=false)]
        public bool? HUDOwned { get; set; }

        /// <summary>
        /// Gets or Sets HUDREOIndicator
        /// </summary>
        [DataMember(Name="hUDREOIndicator", EmitDefaultValue=false)]
        public bool? HUDREOIndicator { get; set; }

        /// <summary>
        /// Gets or Sets IndependentConsultantFee
        /// </summary>
        [DataMember(Name="independentConsultantFee", EmitDefaultValue=false)]
        public double? IndependentConsultantFee { get; set; }

        /// <summary>
        /// Gets or Sets InspectionFeeAmount
        /// </summary>
        [DataMember(Name="inspectionFeeAmount", EmitDefaultValue=false)]
        public double? InspectionFeeAmount { get; set; }

        /// <summary>
        /// Gets or Sets InspectionFeeTimes
        /// </summary>
        [DataMember(Name="inspectionFeeTimes", EmitDefaultValue=false)]
        public int? InspectionFeeTimes { get; set; }

        /// <summary>
        /// Gets or Sets LDPGSAForBorrower
        /// </summary>
        [DataMember(Name="lDPGSAForBorrower", EmitDefaultValue=false)]
        public bool? LDPGSAForBorrower { get; set; }

        /// <summary>
        /// Gets or Sets LDPGSAForCoBorrower
        /// </summary>
        [DataMember(Name="lDPGSAForCoBorrower", EmitDefaultValue=false)]
        public bool? LDPGSAForCoBorrower { get; set; }

        /// <summary>
        /// Gets or Sets LeasedFromSomeoneElse
        /// </summary>
        [DataMember(Name="leasedFromSomeoneElse", EmitDefaultValue=false)]
        public bool? LeasedFromSomeoneElse { get; set; }

        /// <summary>
        /// Gets or Sets LeaseExpiradionDate
        /// </summary>
        [DataMember(Name="leaseExpiradionDate", EmitDefaultValue=false)]
        public DateTime? LeaseExpiradionDate { get; set; }

        /// <summary>
        /// Gets or Sets LeaseMonthlyPayment
        /// </summary>
        [DataMember(Name="leaseMonthlyPayment", EmitDefaultValue=false)]
        public double? LeaseMonthlyPayment { get; set; }

        /// <summary>
        /// Gets or Sets LessAllowableDownpayment
        /// </summary>
        [DataMember(Name="lessAllowableDownpayment", EmitDefaultValue=false)]
        public double? LessAllowableDownpayment { get; set; }

        /// <summary>
        /// Gets or Sets LesserOfSalesPrice
        /// </summary>
        [DataMember(Name="lesserOfSalesPrice", EmitDefaultValue=false)]
        public double? LesserOfSalesPrice { get; set; }

        /// <summary>
        /// Gets or Sets LesserOfSumAmount
        /// </summary>
        [DataMember(Name="lesserOfSumAmount", EmitDefaultValue=false)]
        public double? LesserOfSumAmount { get; set; }

        /// <summary>
        /// Gets or Sets LesserOfSumAsIs
        /// </summary>
        [DataMember(Name="lesserOfSumAsIs", EmitDefaultValue=false)]
        public double? LesserOfSumAsIs { get; set; }

        /// <summary>
        /// Gets or Sets LesserOfSumPercent
        /// </summary>
        [DataMember(Name="lesserOfSumPercent", EmitDefaultValue=false)]
        public double? LesserOfSumPercent { get; set; }

        /// <summary>
        /// Gets or Sets LoanFor203KIndicator
        /// </summary>
        [DataMember(Name="loanFor203KIndicator", EmitDefaultValue=false)]
        public bool? LoanFor203KIndicator { get; set; }

        /// <summary>
        /// Gets or Sets LoanPurpose
        /// </summary>
        [DataMember(Name="loanPurpose", EmitDefaultValue=false)]
        public string LoanPurpose { get; set; }

        /// <summary>
        /// Gets or Sets MaximumMortgageWithUFMIP
        /// </summary>
        [DataMember(Name="maximumMortgageWithUFMIP", EmitDefaultValue=false)]
        public double? MaximumMortgageWithUFMIP { get; set; }

        /// <summary>
        /// Gets or Sets MtgOrDeedOfTrusOnProperty
        /// </summary>
        [DataMember(Name="mtgOrDeedOfTrusOnProperty", EmitDefaultValue=false)]
        public bool? MtgOrDeedOfTrusOnProperty { get; set; }

        /// <summary>
        /// Gets or Sets MtgPaymentEscrowedAmount
        /// </summary>
        [DataMember(Name="mtgPaymentEscrowedAmount", EmitDefaultValue=false)]
        public double? MtgPaymentEscrowedAmount { get; set; }

        /// <summary>
        /// Gets or Sets MtgPaymentEscrowedTimes
        /// </summary>
        [DataMember(Name="mtgPaymentEscrowedTimes", EmitDefaultValue=false)]
        public int? MtgPaymentEscrowedTimes { get; set; }

        /// <summary>
        /// Gets or Sets NewResidential
        /// </summary>
        [DataMember(Name="newResidential", EmitDefaultValue=false)]
        public bool? NewResidential { get; set; }

        /// <summary>
        /// Gets or Sets NonresidentialTypeOfUse
        /// </summary>
        [DataMember(Name="nonresidentialTypeOfUse", EmitDefaultValue=false)]
        public string NonresidentialTypeOfUse { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfHistoricUnits
        /// </summary>
        [DataMember(Name="numberOfHistoricUnits", EmitDefaultValue=false)]
        public int? NumberOfHistoricUnits { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfMultifamilyUnits
        /// </summary>
        [DataMember(Name="numberOfMultifamilyUnits", EmitDefaultValue=false)]
        public int? NumberOfMultifamilyUnits { get; set; }

        /// <summary>
        /// Gets or Sets OtherDescription
        /// </summary>
        [DataMember(Name="otherDescription", EmitDefaultValue=false)]
        public string OtherDescription { get; set; }

        /// <summary>
        /// Gets or Sets OwnedByBorrower
        /// </summary>
        [DataMember(Name="ownedByBorrower", EmitDefaultValue=false)]
        public bool? OwnedByBorrower { get; set; }

        /// <summary>
        /// Gets or Sets PercentAfterImprovedValue
        /// </summary>
        [DataMember(Name="percentAfterImprovedValue", EmitDefaultValue=false)]
        public double? PercentAfterImprovedValue { get; set; }

        /// <summary>
        /// Gets or Sets PermitsAndOtherFee
        /// </summary>
        [DataMember(Name="permitsAndOtherFee", EmitDefaultValue=false)]
        public double? PermitsAndOtherFee { get; set; }

        /// <summary>
        /// Gets or Sets PlanReviewerFeeAddition
        /// </summary>
        [DataMember(Name="planReviewerFeeAddition", EmitDefaultValue=false)]
        public double? PlanReviewerFeeAddition { get; set; }

        /// <summary>
        /// Gets or Sets PlanReviewerFeeAmount
        /// </summary>
        [DataMember(Name="planReviewerFeeAmount", EmitDefaultValue=false)]
        public double? PlanReviewerFeeAmount { get; set; }

        /// <summary>
        /// Gets or Sets PlanReviewerFeeMiles
        /// </summary>
        [DataMember(Name="planReviewerFeeMiles", EmitDefaultValue=false)]
        public int? PlanReviewerFeeMiles { get; set; }

        /// <summary>
        /// Gets or Sets PropertyOwnerAddress
        /// </summary>
        [DataMember(Name="propertyOwnerAddress", EmitDefaultValue=false)]
        public string PropertyOwnerAddress { get; set; }

        /// <summary>
        /// Gets or Sets PropertyOwnerCity
        /// </summary>
        [DataMember(Name="propertyOwnerCity", EmitDefaultValue=false)]
        public string PropertyOwnerCity { get; set; }

        /// <summary>
        /// Gets or Sets PropertyOwnerName
        /// </summary>
        [DataMember(Name="propertyOwnerName", EmitDefaultValue=false)]
        public string PropertyOwnerName { get; set; }

        /// <summary>
        /// Gets or Sets PropertyOwnerPostalCode
        /// </summary>
        [DataMember(Name="propertyOwnerPostalCode", EmitDefaultValue=false)]
        public string PropertyOwnerPostalCode { get; set; }

        /// <summary>
        /// Gets or Sets PropertyOwnerState
        /// </summary>
        [DataMember(Name="propertyOwnerState", EmitDefaultValue=false)]
        public string PropertyOwnerState { get; set; }

        /// <summary>
        /// Gets or Sets PropertyToBeImproved
        /// </summary>
        [DataMember(Name="propertyToBeImproved", EmitDefaultValue=false)]
        public string PropertyToBeImproved { get; set; }

        /// <summary>
        /// Gets or Sets PropertyType
        /// </summary>
        [DataMember(Name="propertyType", EmitDefaultValue=false)]
        public string PropertyType { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseDate
        /// </summary>
        [DataMember(Name="purchaseDate", EmitDefaultValue=false)]
        public DateTime? PurchaseDate { get; set; }

        /// <summary>
        /// Gets or Sets PurchasedOnContract
        /// </summary>
        [DataMember(Name="purchasedOnContract", EmitDefaultValue=false)]
        public bool? PurchasedOnContract { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseMaximumMortgageAmount
        /// </summary>
        [DataMember(Name="purchaseMaximumMortgageAmount", EmitDefaultValue=false)]
        public double? PurchaseMaximumMortgageAmount { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseMaximumMortgagePercent
        /// </summary>
        [DataMember(Name="purchaseMaximumMortgagePercent", EmitDefaultValue=false)]
        public double? PurchaseMaximumMortgagePercent { get; set; }

        /// <summary>
        /// Gets or Sets RefinanceMaximumMortgageAmount
        /// </summary>
        [DataMember(Name="refinanceMaximumMortgageAmount", EmitDefaultValue=false)]
        public double? RefinanceMaximumMortgageAmount { get; set; }

        /// <summary>
        /// Gets or Sets RefinancingATitleILoan
        /// </summary>
        [DataMember(Name="refinancingATitleILoan", EmitDefaultValue=false)]
        public bool? RefinancingATitleILoan { get; set; }

        /// <summary>
        /// Gets or Sets RentalCashFlowBalance
        /// </summary>
        [DataMember(Name="rentalCashFlowBalance", EmitDefaultValue=false)]
        public double? RentalCashFlowBalance { get; set; }

        /// <summary>
        /// Gets or Sets ResidencyType
        /// </summary>
        [DataMember(Name="residencyType", EmitDefaultValue=false)]
        public string ResidencyType { get; set; }

        /// <summary>
        /// Gets or Sets RiskClass
        /// </summary>
        [DataMember(Name="riskClass", EmitDefaultValue=false)]
        public string RiskClass { get; set; }

        /// <summary>
        /// Gets or Sets ScoredByTotal
        /// </summary>
        [DataMember(Name="scoredByTotal", EmitDefaultValue=false)]
        public bool? ScoredByTotal { get; set; }

        /// <summary>
        /// Gets or Sets SecondaryFinancingProviders
        /// </summary>
        [DataMember(Name="secondaryFinancingProviders", EmitDefaultValue=false)]
        public List<LoanContractHudLoanDataSecondaryFinancingProviders> SecondaryFinancingProviders { get; set; }

        /// <summary>
        /// Gets or Sets SellerContributionRate
        /// </summary>
        [DataMember(Name="sellerContributionRate", EmitDefaultValue=false)]
        public double? SellerContributionRate { get; set; }

        /// <summary>
        /// Gets or Sets StatutoryInvestment
        /// </summary>
        [DataMember(Name="statutoryInvestment", EmitDefaultValue=false)]
        public double? StatutoryInvestment { get; set; }

        /// <summary>
        /// Gets or Sets Streamlined
        /// </summary>
        [DataMember(Name="streamlined", EmitDefaultValue=false)]
        public bool? Streamlined { get; set; }

        /// <summary>
        /// Gets or Sets SubTotalForEscrowAccount
        /// </summary>
        [DataMember(Name="subTotalForEscrowAccount", EmitDefaultValue=false)]
        public double? SubTotalForEscrowAccount { get; set; }

        /// <summary>
        /// Gets or Sets SubTotalForReleaseAtClosing
        /// </summary>
        [DataMember(Name="subTotalForReleaseAtClosing", EmitDefaultValue=false)]
        public double? SubTotalForReleaseAtClosing { get; set; }

        /// <summary>
        /// Gets or Sets SumForInvestor
        /// </summary>
        [DataMember(Name="sumForInvestor", EmitDefaultValue=false)]
        public double? SumForInvestor { get; set; }

        /// <summary>
        /// Gets or Sets SumForOwnerOccupied
        /// </summary>
        [DataMember(Name="sumForOwnerOccupied", EmitDefaultValue=false)]
        public double? SumForOwnerOccupied { get; set; }

        /// <summary>
        /// Gets or Sets SumOfExistingDebt
        /// </summary>
        [DataMember(Name="sumOfExistingDebt", EmitDefaultValue=false)]
        public double? SumOfExistingDebt { get; set; }

        /// <summary>
        /// Gets or Sets SuplementalOriginationFee
        /// </summary>
        [DataMember(Name="suplementalOriginationFee", EmitDefaultValue=false)]
        public double? SuplementalOriginationFee { get; set; }

        /// <summary>
        /// Gets or Sets Title1LoanBalance
        /// </summary>
        [DataMember(Name="title1LoanBalance", EmitDefaultValue=false)]
        public double? Title1LoanBalance { get; set; }

        /// <summary>
        /// Gets or Sets Title1LoanNumber
        /// </summary>
        [DataMember(Name="title1LoanNumber", EmitDefaultValue=false)]
        public string Title1LoanNumber { get; set; }

        /// <summary>
        /// Gets or Sets Title1LoanWithWhom
        /// </summary>
        [DataMember(Name="title1LoanWithWhom", EmitDefaultValue=false)]
        public string Title1LoanWithWhom { get; set; }

        /// <summary>
        /// Gets or Sets TitleUpdateFeeAmount
        /// </summary>
        [DataMember(Name="titleUpdateFeeAmount", EmitDefaultValue=false)]
        public double? TitleUpdateFeeAmount { get; set; }

        /// <summary>
        /// Gets or Sets TitleUpdateFeeTimes
        /// </summary>
        [DataMember(Name="titleUpdateFeeTimes", EmitDefaultValue=false)]
        public int? TitleUpdateFeeTimes { get; set; }

        /// <summary>
        /// Gets or Sets TotalCostsOfRepairsInA6
        /// </summary>
        [DataMember(Name="totalCostsOfRepairsInA6", EmitDefaultValue=false)]
        public double? TotalCostsOfRepairsInA6 { get; set; }

        /// <summary>
        /// Gets or Sets TotalEscrowCommitment
        /// </summary>
        [DataMember(Name="totalEscrowCommitment", EmitDefaultValue=false)]
        public double? TotalEscrowCommitment { get; set; }

        /// <summary>
        /// Gets or Sets TotalEscrowedFunds
        /// </summary>
        [DataMember(Name="totalEscrowedFunds", EmitDefaultValue=false)]
        public double? TotalEscrowedFunds { get; set; }

        /// <summary>
        /// Gets or Sets TotalFixedUnpaidBalance
        /// </summary>
        [DataMember(Name="totalFixedUnpaidBalance", EmitDefaultValue=false)]
        public double? TotalFixedUnpaidBalance { get; set; }

        /// <summary>
        /// Gets or Sets TotalForBorrowerEstimatedProfit
        /// </summary>
        [DataMember(Name="totalForBorrowerEstimatedProfit", EmitDefaultValue=false)]
        public double? TotalForBorrowerEstimatedProfit { get; set; }

        /// <summary>
        /// Gets or Sets TotalForInspectionAndTitleFee
        /// </summary>
        [DataMember(Name="totalForInspectionAndTitleFee", EmitDefaultValue=false)]
        public double? TotalForInspectionAndTitleFee { get; set; }

        /// <summary>
        /// Gets or Sets TotalForLesserOfSumAsIs
        /// </summary>
        [DataMember(Name="totalForLesserOfSumAsIs", EmitDefaultValue=false)]
        public double? TotalForLesserOfSumAsIs { get; set; }

        /// <summary>
        /// Gets or Sets TotalForMtgPaymentEscrowed
        /// </summary>
        [DataMember(Name="totalForMtgPaymentEscrowed", EmitDefaultValue=false)]
        public double? TotalForMtgPaymentEscrowed { get; set; }

        /// <summary>
        /// Gets or Sets TotalForPlanReviewerFee
        /// </summary>
        [DataMember(Name="totalForPlanReviewerFee", EmitDefaultValue=false)]
        public double? TotalForPlanReviewerFee { get; set; }

        /// <summary>
        /// Gets or Sets TotalForRehabilitationCost
        /// </summary>
        [DataMember(Name="totalForRehabilitationCost", EmitDefaultValue=false)]
        public double? TotalForRehabilitationCost { get; set; }

        /// <summary>
        /// Gets or Sets TotalRehabilitationCosts
        /// </summary>
        [DataMember(Name="totalRehabilitationCosts", EmitDefaultValue=false)]
        public double? TotalRehabilitationCosts { get; set; }

        /// <summary>
        /// Gets or Sets ValueEstablished
        /// </summary>
        [DataMember(Name="valueEstablished", EmitDefaultValue=false)]
        public double? ValueEstablished { get; set; }

        /// <summary>
        /// Gets or Sets ConstructionRepairsRehabilitationCosts
        /// </summary>
        [DataMember(Name="constructionRepairsRehabilitationCosts", EmitDefaultValue=false)]
        public double? ConstructionRepairsRehabilitationCosts { get; set; }

        /// <summary>
        /// Gets or Sets FeasibilityStudyWhenNecessary
        /// </summary>
        [DataMember(Name="feasibilityStudyWhenNecessary", EmitDefaultValue=false)]
        public double? FeasibilityStudyWhenNecessary { get; set; }

        /// <summary>
        /// Gets or Sets FinanceableMortgageFeesIfCharged
        /// </summary>
        [DataMember(Name="financeableMortgageFeesIfCharged", EmitDefaultValue=false)]
        public double? FinanceableMortgageFeesIfCharged { get; set; }

        /// <summary>
        /// Gets or Sets TotalRehabilitationCostsFeesReserves
        /// </summary>
        [DataMember(Name="totalRehabilitationCostsFeesReserves", EmitDefaultValue=false)]
        public double? TotalRehabilitationCostsFeesReserves { get; set; }

        /// <summary>
        /// Gets or Sets PurchasePriceLessInducementToPurchase
        /// </summary>
        [DataMember(Name="purchasePriceLessInducementToPurchase", EmitDefaultValue=false)]
        public double? PurchasePriceLessInducementToPurchase { get; set; }

        /// <summary>
        /// Gets or Sets Step2EPlusStep1E
        /// </summary>
        [DataMember(Name="step2EPlusStep1E", EmitDefaultValue=false)]
        public double? Step2EPlusStep1E { get; set; }

        /// <summary>
        /// Gets or Sets LesserOf3AOr3B
        /// </summary>
        [DataMember(Name="lesserOf3AOr3B", EmitDefaultValue=false)]
        public double? LesserOf3AOr3B { get; set; }

        /// <summary>
        /// Gets or Sets AppropriateLTVFactor
        /// </summary>
        [DataMember(Name="appropriateLTVFactor", EmitDefaultValue=false)]
        public double? AppropriateLTVFactor { get; set; }

        /// <summary>
        /// Gets or Sets LesserOf3AOr3BMultiply3F
        /// </summary>
        [DataMember(Name="lesserOf3AOr3BMultiply3F", EmitDefaultValue=false)]
        public double? LesserOf3AOr3BMultiply3F { get; set; }

        /// <summary>
        /// Gets or Sets NationwideMortgageLimit
        /// </summary>
        [DataMember(Name="nationwideMortgageLimit", EmitDefaultValue=false)]
        public double? NationwideMortgageLimit { get; set; }

        /// <summary>
        /// Gets or Sets BaseMortgageAmountFrom3COr3D
        /// </summary>
        [DataMember(Name="baseMortgageAmountFrom3COr3D", EmitDefaultValue=false)]
        public double? BaseMortgageAmountFrom3COr3D { get; set; }

        /// <summary>
        /// Gets or Sets MaterialCostsOrderedPrepaidByBorrowerContractor
        /// </summary>
        [DataMember(Name="materialCostsOrderedPrepaidByBorrowerContractor", EmitDefaultValue=false)]
        public double? MaterialCostsOrderedPrepaidByBorrowerContractor { get; set; }

        /// <summary>
        /// Gets or Sets MaterialCostsOrderedPrepaidByBorrowerContractorAfter50Percent
        /// </summary>
        [DataMember(Name="materialCostsOrderedPrepaidByBorrowerContractorAfter50Percent", EmitDefaultValue=false)]
        public double? MaterialCostsOrderedPrepaidByBorrowerContractorAfter50Percent { get; set; }

        /// <summary>
        /// Gets or Sets InitialDrawAtClosingTotal
        /// </summary>
        [DataMember(Name="initialDrawAtClosingTotal", EmitDefaultValue=false)]
        public double? InitialDrawAtClosingTotal { get; set; }

        /// <summary>
        /// Gets or Sets BorrowersOwnFundsforContingencyReserves
        /// </summary>
        [DataMember(Name="borrowersOwnFundsforContingencyReserves", EmitDefaultValue=false)]
        public double? BorrowersOwnFundsforContingencyReserves { get; set; }

        /// <summary>
        /// Gets or Sets InitialBaseMortgageAmountPlusEEMImprovementAmount
        /// </summary>
        [DataMember(Name="initialBaseMortgageAmountPlusEEMImprovementAmount", EmitDefaultValue=false)]
        public double? InitialBaseMortgageAmountPlusEEMImprovementAmount { get; set; }

        /// <summary>
        /// Gets or Sets WindEnergySystemActualCost
        /// </summary>
        [DataMember(Name="windEnergySystemActualCost", EmitDefaultValue=false)]
        public double? WindEnergySystemActualCost { get; set; }

        /// <summary>
        /// Gets or Sets AfterImprovedValueAfter20Percent
        /// </summary>
        [DataMember(Name="afterImprovedValueAfter20Percent", EmitDefaultValue=false)]
        public double? AfterImprovedValueAfter20Percent { get; set; }

        /// <summary>
        /// Gets or Sets LesserOfMaximumFinanceableSolarOrWindEnergyAmount
        /// </summary>
        [DataMember(Name="lesserOfMaximumFinanceableSolarOrWindEnergyAmount", EmitDefaultValue=false)]
        public double? LesserOfMaximumFinanceableSolarOrWindEnergyAmount { get; set; }

        /// <summary>
        /// Gets or Sets NationwideMortgageLimitAfter120Percent
        /// </summary>
        [DataMember(Name="nationwideMortgageLimitAfter120Percent", EmitDefaultValue=false)]
        public double? NationwideMortgageLimitAfter120Percent { get; set; }

        /// <summary>
        /// Gets or Sets FinalBaseMortgageAmount
        /// </summary>
        [DataMember(Name="finalBaseMortgageAmount", EmitDefaultValue=false)]
        public double? FinalBaseMortgageAmount { get; set; }

        /// <summary>
        /// Gets or Sets RehabilitationEscrowAccount
        /// </summary>
        [DataMember(Name="rehabilitationEscrowAccount", EmitDefaultValue=false)]
        public double? RehabilitationEscrowAccount { get; set; }

        /// <summary>
        /// Gets or Sets MIPLTV
        /// </summary>
        [DataMember(Name="mIPLTV", EmitDefaultValue=false)]
        public double? MIPLTV { get; set; }

        /// <summary>
        /// Gets or Sets FeesAssociatedWithNewLoan
        /// </summary>
        [DataMember(Name="feesAssociatedWithNewLoan", EmitDefaultValue=false)]
        public double? FeesAssociatedWithNewLoan { get; set; }

        /// <summary>
        /// Gets or Sets ExistingDebtPlusRehabCosts
        /// </summary>
        [DataMember(Name="existingDebtPlusRehabCosts", EmitDefaultValue=false)]
        public double? ExistingDebtPlusRehabCosts { get; set; }

        /// <summary>
        /// Gets or Sets ExistingDebtPlusRehabCostsPlusNewLoanFees
        /// </summary>
        [DataMember(Name="existingDebtPlusRehabCostsPlusNewLoanFees", EmitDefaultValue=false)]
        public double? ExistingDebtPlusRehabCostsPlusNewLoanFees { get; set; }

        /// <summary>
        /// Gets or Sets InspectionFeesDuringRehabilitation
        /// </summary>
        [DataMember(Name="inspectionFeesDuringRehabilitation", EmitDefaultValue=false)]
        public double? InspectionFeesDuringRehabilitation { get; set; }

        /// <summary>
        /// Gets or Sets TitleUpdateFees
        /// </summary>
        [DataMember(Name="titleUpdateFees", EmitDefaultValue=false)]
        public double? TitleUpdateFees { get; set; }

        /// <summary>
        /// Gets or Sets RehabilitationEscrowAmountBalanceForFutureDraws
        /// </summary>
        [DataMember(Name="rehabilitationEscrowAmountBalanceForFutureDraws", EmitDefaultValue=false)]
        public double? RehabilitationEscrowAmountBalanceForFutureDraws { get; set; }

        /// <summary>
        /// Gets or Sets LimitedProgram
        /// </summary>
        [DataMember(Name="limitedProgram", EmitDefaultValue=false)]
        public bool? LimitedProgram { get; set; }

        /// <summary>
        /// Gets or Sets CriteriaForAppropriateLTVFactor
        /// </summary>
        [DataMember(Name="criteriaForAppropriateLTVFactor", EmitDefaultValue=false)]
        public string CriteriaForAppropriateLTVFactor { get; set; }

        /// <summary>
        /// Gets or Sets LessLeadBasedPaintCredit
        /// </summary>
        [DataMember(Name="lessLeadBasedPaintCredit", EmitDefaultValue=false)]
        public double? LessLeadBasedPaintCredit { get; set; }

        /// <summary>
        /// Gets or Sets CaseLTV
        /// </summary>
        [DataMember(Name="caseLTV", EmitDefaultValue=false)]
        public double? CaseLTV { get; set; }

        /// <summary>
        /// Gets or Sets InitialDrawAtClosingConsultantFees
        /// </summary>
        [DataMember(Name="initialDrawAtClosingConsultantFees", EmitDefaultValue=false)]
        public double? InitialDrawAtClosingConsultantFees { get; set; }

        /// <summary>
        /// Gets or Sets InitialDrawAtClosingArchitecturalorEngineeringFees
        /// </summary>
        [DataMember(Name="initialDrawAtClosingArchitecturalorEngineeringFees", EmitDefaultValue=false)]
        public double? InitialDrawAtClosingArchitecturalorEngineeringFees { get; set; }

        /// <summary>
        /// Gets or Sets InitialDrawAtClosingPermitFees
        /// </summary>
        [DataMember(Name="initialDrawAtClosingPermitFees", EmitDefaultValue=false)]
        public double? InitialDrawAtClosingPermitFees { get; set; }

        /// <summary>
        /// Gets or Sets UnpaidPrincipalBalanceFirstLien
        /// </summary>
        [DataMember(Name="unpaidPrincipalBalanceFirstLien", EmitDefaultValue=false)]
        public double? UnpaidPrincipalBalanceFirstLien { get; set; }

        /// <summary>
        /// Gets or Sets UnpaidPrincipalBalanceOfPurchaseJuniorLiens
        /// </summary>
        [DataMember(Name="unpaidPrincipalBalanceOfPurchaseJuniorLiens", EmitDefaultValue=false)]
        public double? UnpaidPrincipalBalanceOfPurchaseJuniorLiens { get; set; }

        /// <summary>
        /// Gets or Sets UnpaidPrincipalBalanceOfAnyJuniorLiens
        /// </summary>
        [DataMember(Name="unpaidPrincipalBalanceOfAnyJuniorLiens", EmitDefaultValue=false)]
        public double? UnpaidPrincipalBalanceOfAnyJuniorLiens { get; set; }

        /// <summary>
        /// Gets or Sets InterestDueonExistingMortgage
        /// </summary>
        [DataMember(Name="interestDueonExistingMortgage", EmitDefaultValue=false)]
        public double? InterestDueonExistingMortgage { get; set; }

        /// <summary>
        /// Gets or Sets MIPDueOnExistingMortgage
        /// </summary>
        [DataMember(Name="mIPDueOnExistingMortgage", EmitDefaultValue=false)]
        public double? MIPDueOnExistingMortgage { get; set; }

        /// <summary>
        /// Gets or Sets PrepaymentPenalties
        /// </summary>
        [DataMember(Name="prepaymentPenalties", EmitDefaultValue=false)]
        public double? PrepaymentPenalties { get; set; }

        /// <summary>
        /// Gets or Sets LateCharges
        /// </summary>
        [DataMember(Name="lateCharges", EmitDefaultValue=false)]
        public double? LateCharges { get; set; }

        /// <summary>
        /// Gets or Sets EscrowShortages
        /// </summary>
        [DataMember(Name="escrowShortages", EmitDefaultValue=false)]
        public double? EscrowShortages { get; set; }

        /// <summary>
        /// Gets or Sets Existing203KDebtTotal
        /// </summary>
        [DataMember(Name="existing203KDebtTotal", EmitDefaultValue=false)]
        public double? Existing203KDebtTotal { get; set; }

        /// <summary>
        /// Gets or Sets WaterPurificationOrganization
        /// </summary>
        [DataMember(Name="waterPurificationOrganization", EmitDefaultValue=false)]
        public string WaterPurificationOrganization { get; set; }

        /// <summary>
        /// Gets or Sets WaterPurificationAgent
        /// </summary>
        [DataMember(Name="waterPurificationAgent", EmitDefaultValue=false)]
        public string WaterPurificationAgent { get; set; }

        /// <summary>
        /// Gets or Sets WaterPurificationPayees
        /// </summary>
        [DataMember(Name="waterPurificationPayees", EmitDefaultValue=false)]
        public string WaterPurificationPayees { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LoanContractHudLoanData {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ActualCashInvRequired: ").Append(ActualCashInvRequired).Append("\n");
            sb.Append("  AdjustedMaxMtgAmount: ").Append(AdjustedMaxMtgAmount).Append("\n");
            sb.Append("  AfterImprovedValue: ").Append(AfterImprovedValue).Append("\n");
            sb.Append("  AllowableEnergyImprovements: ").Append(AllowableEnergyImprovements).Append("\n");
            sb.Append("  ArchitecturalEngineeringFee: ").Append(ArchitecturalEngineeringFee).Append("\n");
            sb.Append("  AsIsValue: ").Append(AsIsValue).Append("\n");
            sb.Append("  BorrowerAcknowledgement: ").Append(BorrowerAcknowledgement).Append("\n");
            sb.Append("  BorrowerEstimatedProfit1: ").Append(BorrowerEstimatedProfit1).Append("\n");
            sb.Append("  BorrowerEstimatedProfit2: ").Append(BorrowerEstimatedProfit2).Append("\n");
            sb.Append("  BorrowerPaidClosingCosts: ").Append(BorrowerPaidClosingCosts).Append("\n");
            sb.Append("  BorrowerRequiredInvestment: ").Append(BorrowerRequiredInvestment).Append("\n");
            sb.Append("  BuildingOnOwnLand: ").Append(BuildingOnOwnLand).Append("\n");
            sb.Append("  SimpleRefinance: ").Append(SimpleRefinance).Append("\n");
            sb.Append("  CaseAssignedDate: ").Append(CaseAssignedDate).Append("\n");
            sb.Append("  ChildSupportBalance: ").Append(ChildSupportBalance).Append("\n");
            sb.Append("  CHUMSForAppraisal: ").Append(CHUMSForAppraisal).Append("\n");
            sb.Append("  CommitmentMaximumMortgageAmount: ").Append(CommitmentMaximumMortgageAmount).Append("\n");
            sb.Append("  CommitmentStage: ").Append(CommitmentStage).Append("\n");
            sb.Append("  ContingencyReserveCostsAmount: ").Append(ContingencyReserveCostsAmount).Append("\n");
            sb.Append("  ContingencyReserveCostsPercent: ").Append(ContingencyReserveCostsPercent).Append("\n");
            sb.Append("  ContractSalesPrice: ").Append(ContractSalesPrice).Append("\n");
            sb.Append("  DealerContractorAddress: ").Append(DealerContractorAddress).Append("\n");
            sb.Append("  DealerContractorCity: ").Append(DealerContractorCity).Append("\n");
            sb.Append("  DealerContractorName: ").Append(DealerContractorName).Append("\n");
            sb.Append("  DealerContractorPostalCode: ").Append(DealerContractorPostalCode).Append("\n");
            sb.Append("  DealerContractorState: ").Append(DealerContractorState).Append("\n");
            sb.Append("  DiscountPointsAmount: ").Append(DiscountPointsAmount).Append("\n");
            sb.Append("  DiscountPointsPercent: ").Append(DiscountPointsPercent).Append("\n");
            sb.Append("  EEMIndicator: ").Append(EEMIndicator).Append("\n");
            sb.Append("  EnergyEfficientMortgageAmount: ").Append(EnergyEfficientMortgageAmount).Append("\n");
            sb.Append("  EscrowCommitment: ").Append(EscrowCommitment).Append("\n");
            sb.Append("  ExistingDebt: ").Append(ExistingDebt).Append("\n");
            sb.Append("  FHA203kB10SubTotal: ").Append(FHA203kB10SubTotal).Append("\n");
            sb.Append("  FHA203kRemarks: ").Append(FHA203kRemarks).Append("\n");
            sb.Append("  FHAStreamlineType: ").Append(FHAStreamlineType).Append("\n");
            sb.Append("  HaveOtherPendingApplicationForFHA: ").Append(HaveOtherPendingApplicationForFHA).Append("\n");
            sb.Append("  HUDOwned: ").Append(HUDOwned).Append("\n");
            sb.Append("  HUDREOIndicator: ").Append(HUDREOIndicator).Append("\n");
            sb.Append("  IndependentConsultantFee: ").Append(IndependentConsultantFee).Append("\n");
            sb.Append("  InspectionFeeAmount: ").Append(InspectionFeeAmount).Append("\n");
            sb.Append("  InspectionFeeTimes: ").Append(InspectionFeeTimes).Append("\n");
            sb.Append("  LDPGSAForBorrower: ").Append(LDPGSAForBorrower).Append("\n");
            sb.Append("  LDPGSAForCoBorrower: ").Append(LDPGSAForCoBorrower).Append("\n");
            sb.Append("  LeasedFromSomeoneElse: ").Append(LeasedFromSomeoneElse).Append("\n");
            sb.Append("  LeaseExpiradionDate: ").Append(LeaseExpiradionDate).Append("\n");
            sb.Append("  LeaseMonthlyPayment: ").Append(LeaseMonthlyPayment).Append("\n");
            sb.Append("  LessAllowableDownpayment: ").Append(LessAllowableDownpayment).Append("\n");
            sb.Append("  LesserOfSalesPrice: ").Append(LesserOfSalesPrice).Append("\n");
            sb.Append("  LesserOfSumAmount: ").Append(LesserOfSumAmount).Append("\n");
            sb.Append("  LesserOfSumAsIs: ").Append(LesserOfSumAsIs).Append("\n");
            sb.Append("  LesserOfSumPercent: ").Append(LesserOfSumPercent).Append("\n");
            sb.Append("  LoanFor203KIndicator: ").Append(LoanFor203KIndicator).Append("\n");
            sb.Append("  LoanPurpose: ").Append(LoanPurpose).Append("\n");
            sb.Append("  MaximumMortgageWithUFMIP: ").Append(MaximumMortgageWithUFMIP).Append("\n");
            sb.Append("  MtgOrDeedOfTrusOnProperty: ").Append(MtgOrDeedOfTrusOnProperty).Append("\n");
            sb.Append("  MtgPaymentEscrowedAmount: ").Append(MtgPaymentEscrowedAmount).Append("\n");
            sb.Append("  MtgPaymentEscrowedTimes: ").Append(MtgPaymentEscrowedTimes).Append("\n");
            sb.Append("  NewResidential: ").Append(NewResidential).Append("\n");
            sb.Append("  NonresidentialTypeOfUse: ").Append(NonresidentialTypeOfUse).Append("\n");
            sb.Append("  NumberOfHistoricUnits: ").Append(NumberOfHistoricUnits).Append("\n");
            sb.Append("  NumberOfMultifamilyUnits: ").Append(NumberOfMultifamilyUnits).Append("\n");
            sb.Append("  OtherDescription: ").Append(OtherDescription).Append("\n");
            sb.Append("  OwnedByBorrower: ").Append(OwnedByBorrower).Append("\n");
            sb.Append("  PercentAfterImprovedValue: ").Append(PercentAfterImprovedValue).Append("\n");
            sb.Append("  PermitsAndOtherFee: ").Append(PermitsAndOtherFee).Append("\n");
            sb.Append("  PlanReviewerFeeAddition: ").Append(PlanReviewerFeeAddition).Append("\n");
            sb.Append("  PlanReviewerFeeAmount: ").Append(PlanReviewerFeeAmount).Append("\n");
            sb.Append("  PlanReviewerFeeMiles: ").Append(PlanReviewerFeeMiles).Append("\n");
            sb.Append("  PropertyOwnerAddress: ").Append(PropertyOwnerAddress).Append("\n");
            sb.Append("  PropertyOwnerCity: ").Append(PropertyOwnerCity).Append("\n");
            sb.Append("  PropertyOwnerName: ").Append(PropertyOwnerName).Append("\n");
            sb.Append("  PropertyOwnerPostalCode: ").Append(PropertyOwnerPostalCode).Append("\n");
            sb.Append("  PropertyOwnerState: ").Append(PropertyOwnerState).Append("\n");
            sb.Append("  PropertyToBeImproved: ").Append(PropertyToBeImproved).Append("\n");
            sb.Append("  PropertyType: ").Append(PropertyType).Append("\n");
            sb.Append("  PurchaseDate: ").Append(PurchaseDate).Append("\n");
            sb.Append("  PurchasedOnContract: ").Append(PurchasedOnContract).Append("\n");
            sb.Append("  PurchaseMaximumMortgageAmount: ").Append(PurchaseMaximumMortgageAmount).Append("\n");
            sb.Append("  PurchaseMaximumMortgagePercent: ").Append(PurchaseMaximumMortgagePercent).Append("\n");
            sb.Append("  RefinanceMaximumMortgageAmount: ").Append(RefinanceMaximumMortgageAmount).Append("\n");
            sb.Append("  RefinancingATitleILoan: ").Append(RefinancingATitleILoan).Append("\n");
            sb.Append("  RentalCashFlowBalance: ").Append(RentalCashFlowBalance).Append("\n");
            sb.Append("  ResidencyType: ").Append(ResidencyType).Append("\n");
            sb.Append("  RiskClass: ").Append(RiskClass).Append("\n");
            sb.Append("  ScoredByTotal: ").Append(ScoredByTotal).Append("\n");
            sb.Append("  SecondaryFinancingProviders: ").Append(SecondaryFinancingProviders).Append("\n");
            sb.Append("  SellerContributionRate: ").Append(SellerContributionRate).Append("\n");
            sb.Append("  StatutoryInvestment: ").Append(StatutoryInvestment).Append("\n");
            sb.Append("  Streamlined: ").Append(Streamlined).Append("\n");
            sb.Append("  SubTotalForEscrowAccount: ").Append(SubTotalForEscrowAccount).Append("\n");
            sb.Append("  SubTotalForReleaseAtClosing: ").Append(SubTotalForReleaseAtClosing).Append("\n");
            sb.Append("  SumForInvestor: ").Append(SumForInvestor).Append("\n");
            sb.Append("  SumForOwnerOccupied: ").Append(SumForOwnerOccupied).Append("\n");
            sb.Append("  SumOfExistingDebt: ").Append(SumOfExistingDebt).Append("\n");
            sb.Append("  SuplementalOriginationFee: ").Append(SuplementalOriginationFee).Append("\n");
            sb.Append("  Title1LoanBalance: ").Append(Title1LoanBalance).Append("\n");
            sb.Append("  Title1LoanNumber: ").Append(Title1LoanNumber).Append("\n");
            sb.Append("  Title1LoanWithWhom: ").Append(Title1LoanWithWhom).Append("\n");
            sb.Append("  TitleUpdateFeeAmount: ").Append(TitleUpdateFeeAmount).Append("\n");
            sb.Append("  TitleUpdateFeeTimes: ").Append(TitleUpdateFeeTimes).Append("\n");
            sb.Append("  TotalCostsOfRepairsInA6: ").Append(TotalCostsOfRepairsInA6).Append("\n");
            sb.Append("  TotalEscrowCommitment: ").Append(TotalEscrowCommitment).Append("\n");
            sb.Append("  TotalEscrowedFunds: ").Append(TotalEscrowedFunds).Append("\n");
            sb.Append("  TotalFixedUnpaidBalance: ").Append(TotalFixedUnpaidBalance).Append("\n");
            sb.Append("  TotalForBorrowerEstimatedProfit: ").Append(TotalForBorrowerEstimatedProfit).Append("\n");
            sb.Append("  TotalForInspectionAndTitleFee: ").Append(TotalForInspectionAndTitleFee).Append("\n");
            sb.Append("  TotalForLesserOfSumAsIs: ").Append(TotalForLesserOfSumAsIs).Append("\n");
            sb.Append("  TotalForMtgPaymentEscrowed: ").Append(TotalForMtgPaymentEscrowed).Append("\n");
            sb.Append("  TotalForPlanReviewerFee: ").Append(TotalForPlanReviewerFee).Append("\n");
            sb.Append("  TotalForRehabilitationCost: ").Append(TotalForRehabilitationCost).Append("\n");
            sb.Append("  TotalRehabilitationCosts: ").Append(TotalRehabilitationCosts).Append("\n");
            sb.Append("  ValueEstablished: ").Append(ValueEstablished).Append("\n");
            sb.Append("  ConstructionRepairsRehabilitationCosts: ").Append(ConstructionRepairsRehabilitationCosts).Append("\n");
            sb.Append("  FeasibilityStudyWhenNecessary: ").Append(FeasibilityStudyWhenNecessary).Append("\n");
            sb.Append("  FinanceableMortgageFeesIfCharged: ").Append(FinanceableMortgageFeesIfCharged).Append("\n");
            sb.Append("  TotalRehabilitationCostsFeesReserves: ").Append(TotalRehabilitationCostsFeesReserves).Append("\n");
            sb.Append("  PurchasePriceLessInducementToPurchase: ").Append(PurchasePriceLessInducementToPurchase).Append("\n");
            sb.Append("  Step2EPlusStep1E: ").Append(Step2EPlusStep1E).Append("\n");
            sb.Append("  LesserOf3AOr3B: ").Append(LesserOf3AOr3B).Append("\n");
            sb.Append("  AppropriateLTVFactor: ").Append(AppropriateLTVFactor).Append("\n");
            sb.Append("  LesserOf3AOr3BMultiply3F: ").Append(LesserOf3AOr3BMultiply3F).Append("\n");
            sb.Append("  NationwideMortgageLimit: ").Append(NationwideMortgageLimit).Append("\n");
            sb.Append("  BaseMortgageAmountFrom3COr3D: ").Append(BaseMortgageAmountFrom3COr3D).Append("\n");
            sb.Append("  MaterialCostsOrderedPrepaidByBorrowerContractor: ").Append(MaterialCostsOrderedPrepaidByBorrowerContractor).Append("\n");
            sb.Append("  MaterialCostsOrderedPrepaidByBorrowerContractorAfter50Percent: ").Append(MaterialCostsOrderedPrepaidByBorrowerContractorAfter50Percent).Append("\n");
            sb.Append("  InitialDrawAtClosingTotal: ").Append(InitialDrawAtClosingTotal).Append("\n");
            sb.Append("  BorrowersOwnFundsforContingencyReserves: ").Append(BorrowersOwnFundsforContingencyReserves).Append("\n");
            sb.Append("  InitialBaseMortgageAmountPlusEEMImprovementAmount: ").Append(InitialBaseMortgageAmountPlusEEMImprovementAmount).Append("\n");
            sb.Append("  WindEnergySystemActualCost: ").Append(WindEnergySystemActualCost).Append("\n");
            sb.Append("  AfterImprovedValueAfter20Percent: ").Append(AfterImprovedValueAfter20Percent).Append("\n");
            sb.Append("  LesserOfMaximumFinanceableSolarOrWindEnergyAmount: ").Append(LesserOfMaximumFinanceableSolarOrWindEnergyAmount).Append("\n");
            sb.Append("  NationwideMortgageLimitAfter120Percent: ").Append(NationwideMortgageLimitAfter120Percent).Append("\n");
            sb.Append("  FinalBaseMortgageAmount: ").Append(FinalBaseMortgageAmount).Append("\n");
            sb.Append("  RehabilitationEscrowAccount: ").Append(RehabilitationEscrowAccount).Append("\n");
            sb.Append("  MIPLTV: ").Append(MIPLTV).Append("\n");
            sb.Append("  FeesAssociatedWithNewLoan: ").Append(FeesAssociatedWithNewLoan).Append("\n");
            sb.Append("  ExistingDebtPlusRehabCosts: ").Append(ExistingDebtPlusRehabCosts).Append("\n");
            sb.Append("  ExistingDebtPlusRehabCostsPlusNewLoanFees: ").Append(ExistingDebtPlusRehabCostsPlusNewLoanFees).Append("\n");
            sb.Append("  InspectionFeesDuringRehabilitation: ").Append(InspectionFeesDuringRehabilitation).Append("\n");
            sb.Append("  TitleUpdateFees: ").Append(TitleUpdateFees).Append("\n");
            sb.Append("  RehabilitationEscrowAmountBalanceForFutureDraws: ").Append(RehabilitationEscrowAmountBalanceForFutureDraws).Append("\n");
            sb.Append("  LimitedProgram: ").Append(LimitedProgram).Append("\n");
            sb.Append("  CriteriaForAppropriateLTVFactor: ").Append(CriteriaForAppropriateLTVFactor).Append("\n");
            sb.Append("  LessLeadBasedPaintCredit: ").Append(LessLeadBasedPaintCredit).Append("\n");
            sb.Append("  CaseLTV: ").Append(CaseLTV).Append("\n");
            sb.Append("  InitialDrawAtClosingConsultantFees: ").Append(InitialDrawAtClosingConsultantFees).Append("\n");
            sb.Append("  InitialDrawAtClosingArchitecturalorEngineeringFees: ").Append(InitialDrawAtClosingArchitecturalorEngineeringFees).Append("\n");
            sb.Append("  InitialDrawAtClosingPermitFees: ").Append(InitialDrawAtClosingPermitFees).Append("\n");
            sb.Append("  UnpaidPrincipalBalanceFirstLien: ").Append(UnpaidPrincipalBalanceFirstLien).Append("\n");
            sb.Append("  UnpaidPrincipalBalanceOfPurchaseJuniorLiens: ").Append(UnpaidPrincipalBalanceOfPurchaseJuniorLiens).Append("\n");
            sb.Append("  UnpaidPrincipalBalanceOfAnyJuniorLiens: ").Append(UnpaidPrincipalBalanceOfAnyJuniorLiens).Append("\n");
            sb.Append("  InterestDueonExistingMortgage: ").Append(InterestDueonExistingMortgage).Append("\n");
            sb.Append("  MIPDueOnExistingMortgage: ").Append(MIPDueOnExistingMortgage).Append("\n");
            sb.Append("  PrepaymentPenalties: ").Append(PrepaymentPenalties).Append("\n");
            sb.Append("  LateCharges: ").Append(LateCharges).Append("\n");
            sb.Append("  EscrowShortages: ").Append(EscrowShortages).Append("\n");
            sb.Append("  Existing203KDebtTotal: ").Append(Existing203KDebtTotal).Append("\n");
            sb.Append("  WaterPurificationOrganization: ").Append(WaterPurificationOrganization).Append("\n");
            sb.Append("  WaterPurificationAgent: ").Append(WaterPurificationAgent).Append("\n");
            sb.Append("  WaterPurificationPayees: ").Append(WaterPurificationPayees).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LoanContractHudLoanData);
        }

        /// <summary>
        /// Returns true if LoanContractHudLoanData instances are equal
        /// </summary>
        /// <param name="input">Instance of LoanContractHudLoanData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoanContractHudLoanData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ActualCashInvRequired == input.ActualCashInvRequired ||
                    (this.ActualCashInvRequired != null &&
                    this.ActualCashInvRequired.Equals(input.ActualCashInvRequired))
                ) && 
                (
                    this.AdjustedMaxMtgAmount == input.AdjustedMaxMtgAmount ||
                    (this.AdjustedMaxMtgAmount != null &&
                    this.AdjustedMaxMtgAmount.Equals(input.AdjustedMaxMtgAmount))
                ) && 
                (
                    this.AfterImprovedValue == input.AfterImprovedValue ||
                    (this.AfterImprovedValue != null &&
                    this.AfterImprovedValue.Equals(input.AfterImprovedValue))
                ) && 
                (
                    this.AllowableEnergyImprovements == input.AllowableEnergyImprovements ||
                    (this.AllowableEnergyImprovements != null &&
                    this.AllowableEnergyImprovements.Equals(input.AllowableEnergyImprovements))
                ) && 
                (
                    this.ArchitecturalEngineeringFee == input.ArchitecturalEngineeringFee ||
                    (this.ArchitecturalEngineeringFee != null &&
                    this.ArchitecturalEngineeringFee.Equals(input.ArchitecturalEngineeringFee))
                ) && 
                (
                    this.AsIsValue == input.AsIsValue ||
                    (this.AsIsValue != null &&
                    this.AsIsValue.Equals(input.AsIsValue))
                ) && 
                (
                    this.BorrowerAcknowledgement == input.BorrowerAcknowledgement ||
                    (this.BorrowerAcknowledgement != null &&
                    this.BorrowerAcknowledgement.Equals(input.BorrowerAcknowledgement))
                ) && 
                (
                    this.BorrowerEstimatedProfit1 == input.BorrowerEstimatedProfit1 ||
                    (this.BorrowerEstimatedProfit1 != null &&
                    this.BorrowerEstimatedProfit1.Equals(input.BorrowerEstimatedProfit1))
                ) && 
                (
                    this.BorrowerEstimatedProfit2 == input.BorrowerEstimatedProfit2 ||
                    (this.BorrowerEstimatedProfit2 != null &&
                    this.BorrowerEstimatedProfit2.Equals(input.BorrowerEstimatedProfit2))
                ) && 
                (
                    this.BorrowerPaidClosingCosts == input.BorrowerPaidClosingCosts ||
                    (this.BorrowerPaidClosingCosts != null &&
                    this.BorrowerPaidClosingCosts.Equals(input.BorrowerPaidClosingCosts))
                ) && 
                (
                    this.BorrowerRequiredInvestment == input.BorrowerRequiredInvestment ||
                    (this.BorrowerRequiredInvestment != null &&
                    this.BorrowerRequiredInvestment.Equals(input.BorrowerRequiredInvestment))
                ) && 
                (
                    this.BuildingOnOwnLand == input.BuildingOnOwnLand ||
                    (this.BuildingOnOwnLand != null &&
                    this.BuildingOnOwnLand.Equals(input.BuildingOnOwnLand))
                ) && 
                (
                    this.SimpleRefinance == input.SimpleRefinance ||
                    (this.SimpleRefinance != null &&
                    this.SimpleRefinance.Equals(input.SimpleRefinance))
                ) && 
                (
                    this.CaseAssignedDate == input.CaseAssignedDate ||
                    (this.CaseAssignedDate != null &&
                    this.CaseAssignedDate.Equals(input.CaseAssignedDate))
                ) && 
                (
                    this.ChildSupportBalance == input.ChildSupportBalance ||
                    (this.ChildSupportBalance != null &&
                    this.ChildSupportBalance.Equals(input.ChildSupportBalance))
                ) && 
                (
                    this.CHUMSForAppraisal == input.CHUMSForAppraisal ||
                    (this.CHUMSForAppraisal != null &&
                    this.CHUMSForAppraisal.Equals(input.CHUMSForAppraisal))
                ) && 
                (
                    this.CommitmentMaximumMortgageAmount == input.CommitmentMaximumMortgageAmount ||
                    (this.CommitmentMaximumMortgageAmount != null &&
                    this.CommitmentMaximumMortgageAmount.Equals(input.CommitmentMaximumMortgageAmount))
                ) && 
                (
                    this.CommitmentStage == input.CommitmentStage ||
                    (this.CommitmentStage != null &&
                    this.CommitmentStage.Equals(input.CommitmentStage))
                ) && 
                (
                    this.ContingencyReserveCostsAmount == input.ContingencyReserveCostsAmount ||
                    (this.ContingencyReserveCostsAmount != null &&
                    this.ContingencyReserveCostsAmount.Equals(input.ContingencyReserveCostsAmount))
                ) && 
                (
                    this.ContingencyReserveCostsPercent == input.ContingencyReserveCostsPercent ||
                    (this.ContingencyReserveCostsPercent != null &&
                    this.ContingencyReserveCostsPercent.Equals(input.ContingencyReserveCostsPercent))
                ) && 
                (
                    this.ContractSalesPrice == input.ContractSalesPrice ||
                    (this.ContractSalesPrice != null &&
                    this.ContractSalesPrice.Equals(input.ContractSalesPrice))
                ) && 
                (
                    this.DealerContractorAddress == input.DealerContractorAddress ||
                    (this.DealerContractorAddress != null &&
                    this.DealerContractorAddress.Equals(input.DealerContractorAddress))
                ) && 
                (
                    this.DealerContractorCity == input.DealerContractorCity ||
                    (this.DealerContractorCity != null &&
                    this.DealerContractorCity.Equals(input.DealerContractorCity))
                ) && 
                (
                    this.DealerContractorName == input.DealerContractorName ||
                    (this.DealerContractorName != null &&
                    this.DealerContractorName.Equals(input.DealerContractorName))
                ) && 
                (
                    this.DealerContractorPostalCode == input.DealerContractorPostalCode ||
                    (this.DealerContractorPostalCode != null &&
                    this.DealerContractorPostalCode.Equals(input.DealerContractorPostalCode))
                ) && 
                (
                    this.DealerContractorState == input.DealerContractorState ||
                    (this.DealerContractorState != null &&
                    this.DealerContractorState.Equals(input.DealerContractorState))
                ) && 
                (
                    this.DiscountPointsAmount == input.DiscountPointsAmount ||
                    (this.DiscountPointsAmount != null &&
                    this.DiscountPointsAmount.Equals(input.DiscountPointsAmount))
                ) && 
                (
                    this.DiscountPointsPercent == input.DiscountPointsPercent ||
                    (this.DiscountPointsPercent != null &&
                    this.DiscountPointsPercent.Equals(input.DiscountPointsPercent))
                ) && 
                (
                    this.EEMIndicator == input.EEMIndicator ||
                    (this.EEMIndicator != null &&
                    this.EEMIndicator.Equals(input.EEMIndicator))
                ) && 
                (
                    this.EnergyEfficientMortgageAmount == input.EnergyEfficientMortgageAmount ||
                    (this.EnergyEfficientMortgageAmount != null &&
                    this.EnergyEfficientMortgageAmount.Equals(input.EnergyEfficientMortgageAmount))
                ) && 
                (
                    this.EscrowCommitment == input.EscrowCommitment ||
                    (this.EscrowCommitment != null &&
                    this.EscrowCommitment.Equals(input.EscrowCommitment))
                ) && 
                (
                    this.ExistingDebt == input.ExistingDebt ||
                    (this.ExistingDebt != null &&
                    this.ExistingDebt.Equals(input.ExistingDebt))
                ) && 
                (
                    this.FHA203kB10SubTotal == input.FHA203kB10SubTotal ||
                    (this.FHA203kB10SubTotal != null &&
                    this.FHA203kB10SubTotal.Equals(input.FHA203kB10SubTotal))
                ) && 
                (
                    this.FHA203kRemarks == input.FHA203kRemarks ||
                    (this.FHA203kRemarks != null &&
                    this.FHA203kRemarks.Equals(input.FHA203kRemarks))
                ) && 
                (
                    this.FHAStreamlineType == input.FHAStreamlineType ||
                    (this.FHAStreamlineType != null &&
                    this.FHAStreamlineType.Equals(input.FHAStreamlineType))
                ) && 
                (
                    this.HaveOtherPendingApplicationForFHA == input.HaveOtherPendingApplicationForFHA ||
                    (this.HaveOtherPendingApplicationForFHA != null &&
                    this.HaveOtherPendingApplicationForFHA.Equals(input.HaveOtherPendingApplicationForFHA))
                ) && 
                (
                    this.HUDOwned == input.HUDOwned ||
                    (this.HUDOwned != null &&
                    this.HUDOwned.Equals(input.HUDOwned))
                ) && 
                (
                    this.HUDREOIndicator == input.HUDREOIndicator ||
                    (this.HUDREOIndicator != null &&
                    this.HUDREOIndicator.Equals(input.HUDREOIndicator))
                ) && 
                (
                    this.IndependentConsultantFee == input.IndependentConsultantFee ||
                    (this.IndependentConsultantFee != null &&
                    this.IndependentConsultantFee.Equals(input.IndependentConsultantFee))
                ) && 
                (
                    this.InspectionFeeAmount == input.InspectionFeeAmount ||
                    (this.InspectionFeeAmount != null &&
                    this.InspectionFeeAmount.Equals(input.InspectionFeeAmount))
                ) && 
                (
                    this.InspectionFeeTimes == input.InspectionFeeTimes ||
                    (this.InspectionFeeTimes != null &&
                    this.InspectionFeeTimes.Equals(input.InspectionFeeTimes))
                ) && 
                (
                    this.LDPGSAForBorrower == input.LDPGSAForBorrower ||
                    (this.LDPGSAForBorrower != null &&
                    this.LDPGSAForBorrower.Equals(input.LDPGSAForBorrower))
                ) && 
                (
                    this.LDPGSAForCoBorrower == input.LDPGSAForCoBorrower ||
                    (this.LDPGSAForCoBorrower != null &&
                    this.LDPGSAForCoBorrower.Equals(input.LDPGSAForCoBorrower))
                ) && 
                (
                    this.LeasedFromSomeoneElse == input.LeasedFromSomeoneElse ||
                    (this.LeasedFromSomeoneElse != null &&
                    this.LeasedFromSomeoneElse.Equals(input.LeasedFromSomeoneElse))
                ) && 
                (
                    this.LeaseExpiradionDate == input.LeaseExpiradionDate ||
                    (this.LeaseExpiradionDate != null &&
                    this.LeaseExpiradionDate.Equals(input.LeaseExpiradionDate))
                ) && 
                (
                    this.LeaseMonthlyPayment == input.LeaseMonthlyPayment ||
                    (this.LeaseMonthlyPayment != null &&
                    this.LeaseMonthlyPayment.Equals(input.LeaseMonthlyPayment))
                ) && 
                (
                    this.LessAllowableDownpayment == input.LessAllowableDownpayment ||
                    (this.LessAllowableDownpayment != null &&
                    this.LessAllowableDownpayment.Equals(input.LessAllowableDownpayment))
                ) && 
                (
                    this.LesserOfSalesPrice == input.LesserOfSalesPrice ||
                    (this.LesserOfSalesPrice != null &&
                    this.LesserOfSalesPrice.Equals(input.LesserOfSalesPrice))
                ) && 
                (
                    this.LesserOfSumAmount == input.LesserOfSumAmount ||
                    (this.LesserOfSumAmount != null &&
                    this.LesserOfSumAmount.Equals(input.LesserOfSumAmount))
                ) && 
                (
                    this.LesserOfSumAsIs == input.LesserOfSumAsIs ||
                    (this.LesserOfSumAsIs != null &&
                    this.LesserOfSumAsIs.Equals(input.LesserOfSumAsIs))
                ) && 
                (
                    this.LesserOfSumPercent == input.LesserOfSumPercent ||
                    (this.LesserOfSumPercent != null &&
                    this.LesserOfSumPercent.Equals(input.LesserOfSumPercent))
                ) && 
                (
                    this.LoanFor203KIndicator == input.LoanFor203KIndicator ||
                    (this.LoanFor203KIndicator != null &&
                    this.LoanFor203KIndicator.Equals(input.LoanFor203KIndicator))
                ) && 
                (
                    this.LoanPurpose == input.LoanPurpose ||
                    (this.LoanPurpose != null &&
                    this.LoanPurpose.Equals(input.LoanPurpose))
                ) && 
                (
                    this.MaximumMortgageWithUFMIP == input.MaximumMortgageWithUFMIP ||
                    (this.MaximumMortgageWithUFMIP != null &&
                    this.MaximumMortgageWithUFMIP.Equals(input.MaximumMortgageWithUFMIP))
                ) && 
                (
                    this.MtgOrDeedOfTrusOnProperty == input.MtgOrDeedOfTrusOnProperty ||
                    (this.MtgOrDeedOfTrusOnProperty != null &&
                    this.MtgOrDeedOfTrusOnProperty.Equals(input.MtgOrDeedOfTrusOnProperty))
                ) && 
                (
                    this.MtgPaymentEscrowedAmount == input.MtgPaymentEscrowedAmount ||
                    (this.MtgPaymentEscrowedAmount != null &&
                    this.MtgPaymentEscrowedAmount.Equals(input.MtgPaymentEscrowedAmount))
                ) && 
                (
                    this.MtgPaymentEscrowedTimes == input.MtgPaymentEscrowedTimes ||
                    (this.MtgPaymentEscrowedTimes != null &&
                    this.MtgPaymentEscrowedTimes.Equals(input.MtgPaymentEscrowedTimes))
                ) && 
                (
                    this.NewResidential == input.NewResidential ||
                    (this.NewResidential != null &&
                    this.NewResidential.Equals(input.NewResidential))
                ) && 
                (
                    this.NonresidentialTypeOfUse == input.NonresidentialTypeOfUse ||
                    (this.NonresidentialTypeOfUse != null &&
                    this.NonresidentialTypeOfUse.Equals(input.NonresidentialTypeOfUse))
                ) && 
                (
                    this.NumberOfHistoricUnits == input.NumberOfHistoricUnits ||
                    (this.NumberOfHistoricUnits != null &&
                    this.NumberOfHistoricUnits.Equals(input.NumberOfHistoricUnits))
                ) && 
                (
                    this.NumberOfMultifamilyUnits == input.NumberOfMultifamilyUnits ||
                    (this.NumberOfMultifamilyUnits != null &&
                    this.NumberOfMultifamilyUnits.Equals(input.NumberOfMultifamilyUnits))
                ) && 
                (
                    this.OtherDescription == input.OtherDescription ||
                    (this.OtherDescription != null &&
                    this.OtherDescription.Equals(input.OtherDescription))
                ) && 
                (
                    this.OwnedByBorrower == input.OwnedByBorrower ||
                    (this.OwnedByBorrower != null &&
                    this.OwnedByBorrower.Equals(input.OwnedByBorrower))
                ) && 
                (
                    this.PercentAfterImprovedValue == input.PercentAfterImprovedValue ||
                    (this.PercentAfterImprovedValue != null &&
                    this.PercentAfterImprovedValue.Equals(input.PercentAfterImprovedValue))
                ) && 
                (
                    this.PermitsAndOtherFee == input.PermitsAndOtherFee ||
                    (this.PermitsAndOtherFee != null &&
                    this.PermitsAndOtherFee.Equals(input.PermitsAndOtherFee))
                ) && 
                (
                    this.PlanReviewerFeeAddition == input.PlanReviewerFeeAddition ||
                    (this.PlanReviewerFeeAddition != null &&
                    this.PlanReviewerFeeAddition.Equals(input.PlanReviewerFeeAddition))
                ) && 
                (
                    this.PlanReviewerFeeAmount == input.PlanReviewerFeeAmount ||
                    (this.PlanReviewerFeeAmount != null &&
                    this.PlanReviewerFeeAmount.Equals(input.PlanReviewerFeeAmount))
                ) && 
                (
                    this.PlanReviewerFeeMiles == input.PlanReviewerFeeMiles ||
                    (this.PlanReviewerFeeMiles != null &&
                    this.PlanReviewerFeeMiles.Equals(input.PlanReviewerFeeMiles))
                ) && 
                (
                    this.PropertyOwnerAddress == input.PropertyOwnerAddress ||
                    (this.PropertyOwnerAddress != null &&
                    this.PropertyOwnerAddress.Equals(input.PropertyOwnerAddress))
                ) && 
                (
                    this.PropertyOwnerCity == input.PropertyOwnerCity ||
                    (this.PropertyOwnerCity != null &&
                    this.PropertyOwnerCity.Equals(input.PropertyOwnerCity))
                ) && 
                (
                    this.PropertyOwnerName == input.PropertyOwnerName ||
                    (this.PropertyOwnerName != null &&
                    this.PropertyOwnerName.Equals(input.PropertyOwnerName))
                ) && 
                (
                    this.PropertyOwnerPostalCode == input.PropertyOwnerPostalCode ||
                    (this.PropertyOwnerPostalCode != null &&
                    this.PropertyOwnerPostalCode.Equals(input.PropertyOwnerPostalCode))
                ) && 
                (
                    this.PropertyOwnerState == input.PropertyOwnerState ||
                    (this.PropertyOwnerState != null &&
                    this.PropertyOwnerState.Equals(input.PropertyOwnerState))
                ) && 
                (
                    this.PropertyToBeImproved == input.PropertyToBeImproved ||
                    (this.PropertyToBeImproved != null &&
                    this.PropertyToBeImproved.Equals(input.PropertyToBeImproved))
                ) && 
                (
                    this.PropertyType == input.PropertyType ||
                    (this.PropertyType != null &&
                    this.PropertyType.Equals(input.PropertyType))
                ) && 
                (
                    this.PurchaseDate == input.PurchaseDate ||
                    (this.PurchaseDate != null &&
                    this.PurchaseDate.Equals(input.PurchaseDate))
                ) && 
                (
                    this.PurchasedOnContract == input.PurchasedOnContract ||
                    (this.PurchasedOnContract != null &&
                    this.PurchasedOnContract.Equals(input.PurchasedOnContract))
                ) && 
                (
                    this.PurchaseMaximumMortgageAmount == input.PurchaseMaximumMortgageAmount ||
                    (this.PurchaseMaximumMortgageAmount != null &&
                    this.PurchaseMaximumMortgageAmount.Equals(input.PurchaseMaximumMortgageAmount))
                ) && 
                (
                    this.PurchaseMaximumMortgagePercent == input.PurchaseMaximumMortgagePercent ||
                    (this.PurchaseMaximumMortgagePercent != null &&
                    this.PurchaseMaximumMortgagePercent.Equals(input.PurchaseMaximumMortgagePercent))
                ) && 
                (
                    this.RefinanceMaximumMortgageAmount == input.RefinanceMaximumMortgageAmount ||
                    (this.RefinanceMaximumMortgageAmount != null &&
                    this.RefinanceMaximumMortgageAmount.Equals(input.RefinanceMaximumMortgageAmount))
                ) && 
                (
                    this.RefinancingATitleILoan == input.RefinancingATitleILoan ||
                    (this.RefinancingATitleILoan != null &&
                    this.RefinancingATitleILoan.Equals(input.RefinancingATitleILoan))
                ) && 
                (
                    this.RentalCashFlowBalance == input.RentalCashFlowBalance ||
                    (this.RentalCashFlowBalance != null &&
                    this.RentalCashFlowBalance.Equals(input.RentalCashFlowBalance))
                ) && 
                (
                    this.ResidencyType == input.ResidencyType ||
                    (this.ResidencyType != null &&
                    this.ResidencyType.Equals(input.ResidencyType))
                ) && 
                (
                    this.RiskClass == input.RiskClass ||
                    (this.RiskClass != null &&
                    this.RiskClass.Equals(input.RiskClass))
                ) && 
                (
                    this.ScoredByTotal == input.ScoredByTotal ||
                    (this.ScoredByTotal != null &&
                    this.ScoredByTotal.Equals(input.ScoredByTotal))
                ) && 
                (
                    this.SecondaryFinancingProviders == input.SecondaryFinancingProviders ||
                    this.SecondaryFinancingProviders != null &&
                    this.SecondaryFinancingProviders.SequenceEqual(input.SecondaryFinancingProviders)
                ) && 
                (
                    this.SellerContributionRate == input.SellerContributionRate ||
                    (this.SellerContributionRate != null &&
                    this.SellerContributionRate.Equals(input.SellerContributionRate))
                ) && 
                (
                    this.StatutoryInvestment == input.StatutoryInvestment ||
                    (this.StatutoryInvestment != null &&
                    this.StatutoryInvestment.Equals(input.StatutoryInvestment))
                ) && 
                (
                    this.Streamlined == input.Streamlined ||
                    (this.Streamlined != null &&
                    this.Streamlined.Equals(input.Streamlined))
                ) && 
                (
                    this.SubTotalForEscrowAccount == input.SubTotalForEscrowAccount ||
                    (this.SubTotalForEscrowAccount != null &&
                    this.SubTotalForEscrowAccount.Equals(input.SubTotalForEscrowAccount))
                ) && 
                (
                    this.SubTotalForReleaseAtClosing == input.SubTotalForReleaseAtClosing ||
                    (this.SubTotalForReleaseAtClosing != null &&
                    this.SubTotalForReleaseAtClosing.Equals(input.SubTotalForReleaseAtClosing))
                ) && 
                (
                    this.SumForInvestor == input.SumForInvestor ||
                    (this.SumForInvestor != null &&
                    this.SumForInvestor.Equals(input.SumForInvestor))
                ) && 
                (
                    this.SumForOwnerOccupied == input.SumForOwnerOccupied ||
                    (this.SumForOwnerOccupied != null &&
                    this.SumForOwnerOccupied.Equals(input.SumForOwnerOccupied))
                ) && 
                (
                    this.SumOfExistingDebt == input.SumOfExistingDebt ||
                    (this.SumOfExistingDebt != null &&
                    this.SumOfExistingDebt.Equals(input.SumOfExistingDebt))
                ) && 
                (
                    this.SuplementalOriginationFee == input.SuplementalOriginationFee ||
                    (this.SuplementalOriginationFee != null &&
                    this.SuplementalOriginationFee.Equals(input.SuplementalOriginationFee))
                ) && 
                (
                    this.Title1LoanBalance == input.Title1LoanBalance ||
                    (this.Title1LoanBalance != null &&
                    this.Title1LoanBalance.Equals(input.Title1LoanBalance))
                ) && 
                (
                    this.Title1LoanNumber == input.Title1LoanNumber ||
                    (this.Title1LoanNumber != null &&
                    this.Title1LoanNumber.Equals(input.Title1LoanNumber))
                ) && 
                (
                    this.Title1LoanWithWhom == input.Title1LoanWithWhom ||
                    (this.Title1LoanWithWhom != null &&
                    this.Title1LoanWithWhom.Equals(input.Title1LoanWithWhom))
                ) && 
                (
                    this.TitleUpdateFeeAmount == input.TitleUpdateFeeAmount ||
                    (this.TitleUpdateFeeAmount != null &&
                    this.TitleUpdateFeeAmount.Equals(input.TitleUpdateFeeAmount))
                ) && 
                (
                    this.TitleUpdateFeeTimes == input.TitleUpdateFeeTimes ||
                    (this.TitleUpdateFeeTimes != null &&
                    this.TitleUpdateFeeTimes.Equals(input.TitleUpdateFeeTimes))
                ) && 
                (
                    this.TotalCostsOfRepairsInA6 == input.TotalCostsOfRepairsInA6 ||
                    (this.TotalCostsOfRepairsInA6 != null &&
                    this.TotalCostsOfRepairsInA6.Equals(input.TotalCostsOfRepairsInA6))
                ) && 
                (
                    this.TotalEscrowCommitment == input.TotalEscrowCommitment ||
                    (this.TotalEscrowCommitment != null &&
                    this.TotalEscrowCommitment.Equals(input.TotalEscrowCommitment))
                ) && 
                (
                    this.TotalEscrowedFunds == input.TotalEscrowedFunds ||
                    (this.TotalEscrowedFunds != null &&
                    this.TotalEscrowedFunds.Equals(input.TotalEscrowedFunds))
                ) && 
                (
                    this.TotalFixedUnpaidBalance == input.TotalFixedUnpaidBalance ||
                    (this.TotalFixedUnpaidBalance != null &&
                    this.TotalFixedUnpaidBalance.Equals(input.TotalFixedUnpaidBalance))
                ) && 
                (
                    this.TotalForBorrowerEstimatedProfit == input.TotalForBorrowerEstimatedProfit ||
                    (this.TotalForBorrowerEstimatedProfit != null &&
                    this.TotalForBorrowerEstimatedProfit.Equals(input.TotalForBorrowerEstimatedProfit))
                ) && 
                (
                    this.TotalForInspectionAndTitleFee == input.TotalForInspectionAndTitleFee ||
                    (this.TotalForInspectionAndTitleFee != null &&
                    this.TotalForInspectionAndTitleFee.Equals(input.TotalForInspectionAndTitleFee))
                ) && 
                (
                    this.TotalForLesserOfSumAsIs == input.TotalForLesserOfSumAsIs ||
                    (this.TotalForLesserOfSumAsIs != null &&
                    this.TotalForLesserOfSumAsIs.Equals(input.TotalForLesserOfSumAsIs))
                ) && 
                (
                    this.TotalForMtgPaymentEscrowed == input.TotalForMtgPaymentEscrowed ||
                    (this.TotalForMtgPaymentEscrowed != null &&
                    this.TotalForMtgPaymentEscrowed.Equals(input.TotalForMtgPaymentEscrowed))
                ) && 
                (
                    this.TotalForPlanReviewerFee == input.TotalForPlanReviewerFee ||
                    (this.TotalForPlanReviewerFee != null &&
                    this.TotalForPlanReviewerFee.Equals(input.TotalForPlanReviewerFee))
                ) && 
                (
                    this.TotalForRehabilitationCost == input.TotalForRehabilitationCost ||
                    (this.TotalForRehabilitationCost != null &&
                    this.TotalForRehabilitationCost.Equals(input.TotalForRehabilitationCost))
                ) && 
                (
                    this.TotalRehabilitationCosts == input.TotalRehabilitationCosts ||
                    (this.TotalRehabilitationCosts != null &&
                    this.TotalRehabilitationCosts.Equals(input.TotalRehabilitationCosts))
                ) && 
                (
                    this.ValueEstablished == input.ValueEstablished ||
                    (this.ValueEstablished != null &&
                    this.ValueEstablished.Equals(input.ValueEstablished))
                ) && 
                (
                    this.ConstructionRepairsRehabilitationCosts == input.ConstructionRepairsRehabilitationCosts ||
                    (this.ConstructionRepairsRehabilitationCosts != null &&
                    this.ConstructionRepairsRehabilitationCosts.Equals(input.ConstructionRepairsRehabilitationCosts))
                ) && 
                (
                    this.FeasibilityStudyWhenNecessary == input.FeasibilityStudyWhenNecessary ||
                    (this.FeasibilityStudyWhenNecessary != null &&
                    this.FeasibilityStudyWhenNecessary.Equals(input.FeasibilityStudyWhenNecessary))
                ) && 
                (
                    this.FinanceableMortgageFeesIfCharged == input.FinanceableMortgageFeesIfCharged ||
                    (this.FinanceableMortgageFeesIfCharged != null &&
                    this.FinanceableMortgageFeesIfCharged.Equals(input.FinanceableMortgageFeesIfCharged))
                ) && 
                (
                    this.TotalRehabilitationCostsFeesReserves == input.TotalRehabilitationCostsFeesReserves ||
                    (this.TotalRehabilitationCostsFeesReserves != null &&
                    this.TotalRehabilitationCostsFeesReserves.Equals(input.TotalRehabilitationCostsFeesReserves))
                ) && 
                (
                    this.PurchasePriceLessInducementToPurchase == input.PurchasePriceLessInducementToPurchase ||
                    (this.PurchasePriceLessInducementToPurchase != null &&
                    this.PurchasePriceLessInducementToPurchase.Equals(input.PurchasePriceLessInducementToPurchase))
                ) && 
                (
                    this.Step2EPlusStep1E == input.Step2EPlusStep1E ||
                    (this.Step2EPlusStep1E != null &&
                    this.Step2EPlusStep1E.Equals(input.Step2EPlusStep1E))
                ) && 
                (
                    this.LesserOf3AOr3B == input.LesserOf3AOr3B ||
                    (this.LesserOf3AOr3B != null &&
                    this.LesserOf3AOr3B.Equals(input.LesserOf3AOr3B))
                ) && 
                (
                    this.AppropriateLTVFactor == input.AppropriateLTVFactor ||
                    (this.AppropriateLTVFactor != null &&
                    this.AppropriateLTVFactor.Equals(input.AppropriateLTVFactor))
                ) && 
                (
                    this.LesserOf3AOr3BMultiply3F == input.LesserOf3AOr3BMultiply3F ||
                    (this.LesserOf3AOr3BMultiply3F != null &&
                    this.LesserOf3AOr3BMultiply3F.Equals(input.LesserOf3AOr3BMultiply3F))
                ) && 
                (
                    this.NationwideMortgageLimit == input.NationwideMortgageLimit ||
                    (this.NationwideMortgageLimit != null &&
                    this.NationwideMortgageLimit.Equals(input.NationwideMortgageLimit))
                ) && 
                (
                    this.BaseMortgageAmountFrom3COr3D == input.BaseMortgageAmountFrom3COr3D ||
                    (this.BaseMortgageAmountFrom3COr3D != null &&
                    this.BaseMortgageAmountFrom3COr3D.Equals(input.BaseMortgageAmountFrom3COr3D))
                ) && 
                (
                    this.MaterialCostsOrderedPrepaidByBorrowerContractor == input.MaterialCostsOrderedPrepaidByBorrowerContractor ||
                    (this.MaterialCostsOrderedPrepaidByBorrowerContractor != null &&
                    this.MaterialCostsOrderedPrepaidByBorrowerContractor.Equals(input.MaterialCostsOrderedPrepaidByBorrowerContractor))
                ) && 
                (
                    this.MaterialCostsOrderedPrepaidByBorrowerContractorAfter50Percent == input.MaterialCostsOrderedPrepaidByBorrowerContractorAfter50Percent ||
                    (this.MaterialCostsOrderedPrepaidByBorrowerContractorAfter50Percent != null &&
                    this.MaterialCostsOrderedPrepaidByBorrowerContractorAfter50Percent.Equals(input.MaterialCostsOrderedPrepaidByBorrowerContractorAfter50Percent))
                ) && 
                (
                    this.InitialDrawAtClosingTotal == input.InitialDrawAtClosingTotal ||
                    (this.InitialDrawAtClosingTotal != null &&
                    this.InitialDrawAtClosingTotal.Equals(input.InitialDrawAtClosingTotal))
                ) && 
                (
                    this.BorrowersOwnFundsforContingencyReserves == input.BorrowersOwnFundsforContingencyReserves ||
                    (this.BorrowersOwnFundsforContingencyReserves != null &&
                    this.BorrowersOwnFundsforContingencyReserves.Equals(input.BorrowersOwnFundsforContingencyReserves))
                ) && 
                (
                    this.InitialBaseMortgageAmountPlusEEMImprovementAmount == input.InitialBaseMortgageAmountPlusEEMImprovementAmount ||
                    (this.InitialBaseMortgageAmountPlusEEMImprovementAmount != null &&
                    this.InitialBaseMortgageAmountPlusEEMImprovementAmount.Equals(input.InitialBaseMortgageAmountPlusEEMImprovementAmount))
                ) && 
                (
                    this.WindEnergySystemActualCost == input.WindEnergySystemActualCost ||
                    (this.WindEnergySystemActualCost != null &&
                    this.WindEnergySystemActualCost.Equals(input.WindEnergySystemActualCost))
                ) && 
                (
                    this.AfterImprovedValueAfter20Percent == input.AfterImprovedValueAfter20Percent ||
                    (this.AfterImprovedValueAfter20Percent != null &&
                    this.AfterImprovedValueAfter20Percent.Equals(input.AfterImprovedValueAfter20Percent))
                ) && 
                (
                    this.LesserOfMaximumFinanceableSolarOrWindEnergyAmount == input.LesserOfMaximumFinanceableSolarOrWindEnergyAmount ||
                    (this.LesserOfMaximumFinanceableSolarOrWindEnergyAmount != null &&
                    this.LesserOfMaximumFinanceableSolarOrWindEnergyAmount.Equals(input.LesserOfMaximumFinanceableSolarOrWindEnergyAmount))
                ) && 
                (
                    this.NationwideMortgageLimitAfter120Percent == input.NationwideMortgageLimitAfter120Percent ||
                    (this.NationwideMortgageLimitAfter120Percent != null &&
                    this.NationwideMortgageLimitAfter120Percent.Equals(input.NationwideMortgageLimitAfter120Percent))
                ) && 
                (
                    this.FinalBaseMortgageAmount == input.FinalBaseMortgageAmount ||
                    (this.FinalBaseMortgageAmount != null &&
                    this.FinalBaseMortgageAmount.Equals(input.FinalBaseMortgageAmount))
                ) && 
                (
                    this.RehabilitationEscrowAccount == input.RehabilitationEscrowAccount ||
                    (this.RehabilitationEscrowAccount != null &&
                    this.RehabilitationEscrowAccount.Equals(input.RehabilitationEscrowAccount))
                ) && 
                (
                    this.MIPLTV == input.MIPLTV ||
                    (this.MIPLTV != null &&
                    this.MIPLTV.Equals(input.MIPLTV))
                ) && 
                (
                    this.FeesAssociatedWithNewLoan == input.FeesAssociatedWithNewLoan ||
                    (this.FeesAssociatedWithNewLoan != null &&
                    this.FeesAssociatedWithNewLoan.Equals(input.FeesAssociatedWithNewLoan))
                ) && 
                (
                    this.ExistingDebtPlusRehabCosts == input.ExistingDebtPlusRehabCosts ||
                    (this.ExistingDebtPlusRehabCosts != null &&
                    this.ExistingDebtPlusRehabCosts.Equals(input.ExistingDebtPlusRehabCosts))
                ) && 
                (
                    this.ExistingDebtPlusRehabCostsPlusNewLoanFees == input.ExistingDebtPlusRehabCostsPlusNewLoanFees ||
                    (this.ExistingDebtPlusRehabCostsPlusNewLoanFees != null &&
                    this.ExistingDebtPlusRehabCostsPlusNewLoanFees.Equals(input.ExistingDebtPlusRehabCostsPlusNewLoanFees))
                ) && 
                (
                    this.InspectionFeesDuringRehabilitation == input.InspectionFeesDuringRehabilitation ||
                    (this.InspectionFeesDuringRehabilitation != null &&
                    this.InspectionFeesDuringRehabilitation.Equals(input.InspectionFeesDuringRehabilitation))
                ) && 
                (
                    this.TitleUpdateFees == input.TitleUpdateFees ||
                    (this.TitleUpdateFees != null &&
                    this.TitleUpdateFees.Equals(input.TitleUpdateFees))
                ) && 
                (
                    this.RehabilitationEscrowAmountBalanceForFutureDraws == input.RehabilitationEscrowAmountBalanceForFutureDraws ||
                    (this.RehabilitationEscrowAmountBalanceForFutureDraws != null &&
                    this.RehabilitationEscrowAmountBalanceForFutureDraws.Equals(input.RehabilitationEscrowAmountBalanceForFutureDraws))
                ) && 
                (
                    this.LimitedProgram == input.LimitedProgram ||
                    (this.LimitedProgram != null &&
                    this.LimitedProgram.Equals(input.LimitedProgram))
                ) && 
                (
                    this.CriteriaForAppropriateLTVFactor == input.CriteriaForAppropriateLTVFactor ||
                    (this.CriteriaForAppropriateLTVFactor != null &&
                    this.CriteriaForAppropriateLTVFactor.Equals(input.CriteriaForAppropriateLTVFactor))
                ) && 
                (
                    this.LessLeadBasedPaintCredit == input.LessLeadBasedPaintCredit ||
                    (this.LessLeadBasedPaintCredit != null &&
                    this.LessLeadBasedPaintCredit.Equals(input.LessLeadBasedPaintCredit))
                ) && 
                (
                    this.CaseLTV == input.CaseLTV ||
                    (this.CaseLTV != null &&
                    this.CaseLTV.Equals(input.CaseLTV))
                ) && 
                (
                    this.InitialDrawAtClosingConsultantFees == input.InitialDrawAtClosingConsultantFees ||
                    (this.InitialDrawAtClosingConsultantFees != null &&
                    this.InitialDrawAtClosingConsultantFees.Equals(input.InitialDrawAtClosingConsultantFees))
                ) && 
                (
                    this.InitialDrawAtClosingArchitecturalorEngineeringFees == input.InitialDrawAtClosingArchitecturalorEngineeringFees ||
                    (this.InitialDrawAtClosingArchitecturalorEngineeringFees != null &&
                    this.InitialDrawAtClosingArchitecturalorEngineeringFees.Equals(input.InitialDrawAtClosingArchitecturalorEngineeringFees))
                ) && 
                (
                    this.InitialDrawAtClosingPermitFees == input.InitialDrawAtClosingPermitFees ||
                    (this.InitialDrawAtClosingPermitFees != null &&
                    this.InitialDrawAtClosingPermitFees.Equals(input.InitialDrawAtClosingPermitFees))
                ) && 
                (
                    this.UnpaidPrincipalBalanceFirstLien == input.UnpaidPrincipalBalanceFirstLien ||
                    (this.UnpaidPrincipalBalanceFirstLien != null &&
                    this.UnpaidPrincipalBalanceFirstLien.Equals(input.UnpaidPrincipalBalanceFirstLien))
                ) && 
                (
                    this.UnpaidPrincipalBalanceOfPurchaseJuniorLiens == input.UnpaidPrincipalBalanceOfPurchaseJuniorLiens ||
                    (this.UnpaidPrincipalBalanceOfPurchaseJuniorLiens != null &&
                    this.UnpaidPrincipalBalanceOfPurchaseJuniorLiens.Equals(input.UnpaidPrincipalBalanceOfPurchaseJuniorLiens))
                ) && 
                (
                    this.UnpaidPrincipalBalanceOfAnyJuniorLiens == input.UnpaidPrincipalBalanceOfAnyJuniorLiens ||
                    (this.UnpaidPrincipalBalanceOfAnyJuniorLiens != null &&
                    this.UnpaidPrincipalBalanceOfAnyJuniorLiens.Equals(input.UnpaidPrincipalBalanceOfAnyJuniorLiens))
                ) && 
                (
                    this.InterestDueonExistingMortgage == input.InterestDueonExistingMortgage ||
                    (this.InterestDueonExistingMortgage != null &&
                    this.InterestDueonExistingMortgage.Equals(input.InterestDueonExistingMortgage))
                ) && 
                (
                    this.MIPDueOnExistingMortgage == input.MIPDueOnExistingMortgage ||
                    (this.MIPDueOnExistingMortgage != null &&
                    this.MIPDueOnExistingMortgage.Equals(input.MIPDueOnExistingMortgage))
                ) && 
                (
                    this.PrepaymentPenalties == input.PrepaymentPenalties ||
                    (this.PrepaymentPenalties != null &&
                    this.PrepaymentPenalties.Equals(input.PrepaymentPenalties))
                ) && 
                (
                    this.LateCharges == input.LateCharges ||
                    (this.LateCharges != null &&
                    this.LateCharges.Equals(input.LateCharges))
                ) && 
                (
                    this.EscrowShortages == input.EscrowShortages ||
                    (this.EscrowShortages != null &&
                    this.EscrowShortages.Equals(input.EscrowShortages))
                ) && 
                (
                    this.Existing203KDebtTotal == input.Existing203KDebtTotal ||
                    (this.Existing203KDebtTotal != null &&
                    this.Existing203KDebtTotal.Equals(input.Existing203KDebtTotal))
                ) && 
                (
                    this.WaterPurificationOrganization == input.WaterPurificationOrganization ||
                    (this.WaterPurificationOrganization != null &&
                    this.WaterPurificationOrganization.Equals(input.WaterPurificationOrganization))
                ) && 
                (
                    this.WaterPurificationAgent == input.WaterPurificationAgent ||
                    (this.WaterPurificationAgent != null &&
                    this.WaterPurificationAgent.Equals(input.WaterPurificationAgent))
                ) && 
                (
                    this.WaterPurificationPayees == input.WaterPurificationPayees ||
                    (this.WaterPurificationPayees != null &&
                    this.WaterPurificationPayees.Equals(input.WaterPurificationPayees))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ActualCashInvRequired != null)
                    hashCode = hashCode * 59 + this.ActualCashInvRequired.GetHashCode();
                if (this.AdjustedMaxMtgAmount != null)
                    hashCode = hashCode * 59 + this.AdjustedMaxMtgAmount.GetHashCode();
                if (this.AfterImprovedValue != null)
                    hashCode = hashCode * 59 + this.AfterImprovedValue.GetHashCode();
                if (this.AllowableEnergyImprovements != null)
                    hashCode = hashCode * 59 + this.AllowableEnergyImprovements.GetHashCode();
                if (this.ArchitecturalEngineeringFee != null)
                    hashCode = hashCode * 59 + this.ArchitecturalEngineeringFee.GetHashCode();
                if (this.AsIsValue != null)
                    hashCode = hashCode * 59 + this.AsIsValue.GetHashCode();
                if (this.BorrowerAcknowledgement != null)
                    hashCode = hashCode * 59 + this.BorrowerAcknowledgement.GetHashCode();
                if (this.BorrowerEstimatedProfit1 != null)
                    hashCode = hashCode * 59 + this.BorrowerEstimatedProfit1.GetHashCode();
                if (this.BorrowerEstimatedProfit2 != null)
                    hashCode = hashCode * 59 + this.BorrowerEstimatedProfit2.GetHashCode();
                if (this.BorrowerPaidClosingCosts != null)
                    hashCode = hashCode * 59 + this.BorrowerPaidClosingCosts.GetHashCode();
                if (this.BorrowerRequiredInvestment != null)
                    hashCode = hashCode * 59 + this.BorrowerRequiredInvestment.GetHashCode();
                if (this.BuildingOnOwnLand != null)
                    hashCode = hashCode * 59 + this.BuildingOnOwnLand.GetHashCode();
                if (this.SimpleRefinance != null)
                    hashCode = hashCode * 59 + this.SimpleRefinance.GetHashCode();
                if (this.CaseAssignedDate != null)
                    hashCode = hashCode * 59 + this.CaseAssignedDate.GetHashCode();
                if (this.ChildSupportBalance != null)
                    hashCode = hashCode * 59 + this.ChildSupportBalance.GetHashCode();
                if (this.CHUMSForAppraisal != null)
                    hashCode = hashCode * 59 + this.CHUMSForAppraisal.GetHashCode();
                if (this.CommitmentMaximumMortgageAmount != null)
                    hashCode = hashCode * 59 + this.CommitmentMaximumMortgageAmount.GetHashCode();
                if (this.CommitmentStage != null)
                    hashCode = hashCode * 59 + this.CommitmentStage.GetHashCode();
                if (this.ContingencyReserveCostsAmount != null)
                    hashCode = hashCode * 59 + this.ContingencyReserveCostsAmount.GetHashCode();
                if (this.ContingencyReserveCostsPercent != null)
                    hashCode = hashCode * 59 + this.ContingencyReserveCostsPercent.GetHashCode();
                if (this.ContractSalesPrice != null)
                    hashCode = hashCode * 59 + this.ContractSalesPrice.GetHashCode();
                if (this.DealerContractorAddress != null)
                    hashCode = hashCode * 59 + this.DealerContractorAddress.GetHashCode();
                if (this.DealerContractorCity != null)
                    hashCode = hashCode * 59 + this.DealerContractorCity.GetHashCode();
                if (this.DealerContractorName != null)
                    hashCode = hashCode * 59 + this.DealerContractorName.GetHashCode();
                if (this.DealerContractorPostalCode != null)
                    hashCode = hashCode * 59 + this.DealerContractorPostalCode.GetHashCode();
                if (this.DealerContractorState != null)
                    hashCode = hashCode * 59 + this.DealerContractorState.GetHashCode();
                if (this.DiscountPointsAmount != null)
                    hashCode = hashCode * 59 + this.DiscountPointsAmount.GetHashCode();
                if (this.DiscountPointsPercent != null)
                    hashCode = hashCode * 59 + this.DiscountPointsPercent.GetHashCode();
                if (this.EEMIndicator != null)
                    hashCode = hashCode * 59 + this.EEMIndicator.GetHashCode();
                if (this.EnergyEfficientMortgageAmount != null)
                    hashCode = hashCode * 59 + this.EnergyEfficientMortgageAmount.GetHashCode();
                if (this.EscrowCommitment != null)
                    hashCode = hashCode * 59 + this.EscrowCommitment.GetHashCode();
                if (this.ExistingDebt != null)
                    hashCode = hashCode * 59 + this.ExistingDebt.GetHashCode();
                if (this.FHA203kB10SubTotal != null)
                    hashCode = hashCode * 59 + this.FHA203kB10SubTotal.GetHashCode();
                if (this.FHA203kRemarks != null)
                    hashCode = hashCode * 59 + this.FHA203kRemarks.GetHashCode();
                if (this.FHAStreamlineType != null)
                    hashCode = hashCode * 59 + this.FHAStreamlineType.GetHashCode();
                if (this.HaveOtherPendingApplicationForFHA != null)
                    hashCode = hashCode * 59 + this.HaveOtherPendingApplicationForFHA.GetHashCode();
                if (this.HUDOwned != null)
                    hashCode = hashCode * 59 + this.HUDOwned.GetHashCode();
                if (this.HUDREOIndicator != null)
                    hashCode = hashCode * 59 + this.HUDREOIndicator.GetHashCode();
                if (this.IndependentConsultantFee != null)
                    hashCode = hashCode * 59 + this.IndependentConsultantFee.GetHashCode();
                if (this.InspectionFeeAmount != null)
                    hashCode = hashCode * 59 + this.InspectionFeeAmount.GetHashCode();
                if (this.InspectionFeeTimes != null)
                    hashCode = hashCode * 59 + this.InspectionFeeTimes.GetHashCode();
                if (this.LDPGSAForBorrower != null)
                    hashCode = hashCode * 59 + this.LDPGSAForBorrower.GetHashCode();
                if (this.LDPGSAForCoBorrower != null)
                    hashCode = hashCode * 59 + this.LDPGSAForCoBorrower.GetHashCode();
                if (this.LeasedFromSomeoneElse != null)
                    hashCode = hashCode * 59 + this.LeasedFromSomeoneElse.GetHashCode();
                if (this.LeaseExpiradionDate != null)
                    hashCode = hashCode * 59 + this.LeaseExpiradionDate.GetHashCode();
                if (this.LeaseMonthlyPayment != null)
                    hashCode = hashCode * 59 + this.LeaseMonthlyPayment.GetHashCode();
                if (this.LessAllowableDownpayment != null)
                    hashCode = hashCode * 59 + this.LessAllowableDownpayment.GetHashCode();
                if (this.LesserOfSalesPrice != null)
                    hashCode = hashCode * 59 + this.LesserOfSalesPrice.GetHashCode();
                if (this.LesserOfSumAmount != null)
                    hashCode = hashCode * 59 + this.LesserOfSumAmount.GetHashCode();
                if (this.LesserOfSumAsIs != null)
                    hashCode = hashCode * 59 + this.LesserOfSumAsIs.GetHashCode();
                if (this.LesserOfSumPercent != null)
                    hashCode = hashCode * 59 + this.LesserOfSumPercent.GetHashCode();
                if (this.LoanFor203KIndicator != null)
                    hashCode = hashCode * 59 + this.LoanFor203KIndicator.GetHashCode();
                if (this.LoanPurpose != null)
                    hashCode = hashCode * 59 + this.LoanPurpose.GetHashCode();
                if (this.MaximumMortgageWithUFMIP != null)
                    hashCode = hashCode * 59 + this.MaximumMortgageWithUFMIP.GetHashCode();
                if (this.MtgOrDeedOfTrusOnProperty != null)
                    hashCode = hashCode * 59 + this.MtgOrDeedOfTrusOnProperty.GetHashCode();
                if (this.MtgPaymentEscrowedAmount != null)
                    hashCode = hashCode * 59 + this.MtgPaymentEscrowedAmount.GetHashCode();
                if (this.MtgPaymentEscrowedTimes != null)
                    hashCode = hashCode * 59 + this.MtgPaymentEscrowedTimes.GetHashCode();
                if (this.NewResidential != null)
                    hashCode = hashCode * 59 + this.NewResidential.GetHashCode();
                if (this.NonresidentialTypeOfUse != null)
                    hashCode = hashCode * 59 + this.NonresidentialTypeOfUse.GetHashCode();
                if (this.NumberOfHistoricUnits != null)
                    hashCode = hashCode * 59 + this.NumberOfHistoricUnits.GetHashCode();
                if (this.NumberOfMultifamilyUnits != null)
                    hashCode = hashCode * 59 + this.NumberOfMultifamilyUnits.GetHashCode();
                if (this.OtherDescription != null)
                    hashCode = hashCode * 59 + this.OtherDescription.GetHashCode();
                if (this.OwnedByBorrower != null)
                    hashCode = hashCode * 59 + this.OwnedByBorrower.GetHashCode();
                if (this.PercentAfterImprovedValue != null)
                    hashCode = hashCode * 59 + this.PercentAfterImprovedValue.GetHashCode();
                if (this.PermitsAndOtherFee != null)
                    hashCode = hashCode * 59 + this.PermitsAndOtherFee.GetHashCode();
                if (this.PlanReviewerFeeAddition != null)
                    hashCode = hashCode * 59 + this.PlanReviewerFeeAddition.GetHashCode();
                if (this.PlanReviewerFeeAmount != null)
                    hashCode = hashCode * 59 + this.PlanReviewerFeeAmount.GetHashCode();
                if (this.PlanReviewerFeeMiles != null)
                    hashCode = hashCode * 59 + this.PlanReviewerFeeMiles.GetHashCode();
                if (this.PropertyOwnerAddress != null)
                    hashCode = hashCode * 59 + this.PropertyOwnerAddress.GetHashCode();
                if (this.PropertyOwnerCity != null)
                    hashCode = hashCode * 59 + this.PropertyOwnerCity.GetHashCode();
                if (this.PropertyOwnerName != null)
                    hashCode = hashCode * 59 + this.PropertyOwnerName.GetHashCode();
                if (this.PropertyOwnerPostalCode != null)
                    hashCode = hashCode * 59 + this.PropertyOwnerPostalCode.GetHashCode();
                if (this.PropertyOwnerState != null)
                    hashCode = hashCode * 59 + this.PropertyOwnerState.GetHashCode();
                if (this.PropertyToBeImproved != null)
                    hashCode = hashCode * 59 + this.PropertyToBeImproved.GetHashCode();
                if (this.PropertyType != null)
                    hashCode = hashCode * 59 + this.PropertyType.GetHashCode();
                if (this.PurchaseDate != null)
                    hashCode = hashCode * 59 + this.PurchaseDate.GetHashCode();
                if (this.PurchasedOnContract != null)
                    hashCode = hashCode * 59 + this.PurchasedOnContract.GetHashCode();
                if (this.PurchaseMaximumMortgageAmount != null)
                    hashCode = hashCode * 59 + this.PurchaseMaximumMortgageAmount.GetHashCode();
                if (this.PurchaseMaximumMortgagePercent != null)
                    hashCode = hashCode * 59 + this.PurchaseMaximumMortgagePercent.GetHashCode();
                if (this.RefinanceMaximumMortgageAmount != null)
                    hashCode = hashCode * 59 + this.RefinanceMaximumMortgageAmount.GetHashCode();
                if (this.RefinancingATitleILoan != null)
                    hashCode = hashCode * 59 + this.RefinancingATitleILoan.GetHashCode();
                if (this.RentalCashFlowBalance != null)
                    hashCode = hashCode * 59 + this.RentalCashFlowBalance.GetHashCode();
                if (this.ResidencyType != null)
                    hashCode = hashCode * 59 + this.ResidencyType.GetHashCode();
                if (this.RiskClass != null)
                    hashCode = hashCode * 59 + this.RiskClass.GetHashCode();
                if (this.ScoredByTotal != null)
                    hashCode = hashCode * 59 + this.ScoredByTotal.GetHashCode();
                if (this.SecondaryFinancingProviders != null)
                    hashCode = hashCode * 59 + this.SecondaryFinancingProviders.GetHashCode();
                if (this.SellerContributionRate != null)
                    hashCode = hashCode * 59 + this.SellerContributionRate.GetHashCode();
                if (this.StatutoryInvestment != null)
                    hashCode = hashCode * 59 + this.StatutoryInvestment.GetHashCode();
                if (this.Streamlined != null)
                    hashCode = hashCode * 59 + this.Streamlined.GetHashCode();
                if (this.SubTotalForEscrowAccount != null)
                    hashCode = hashCode * 59 + this.SubTotalForEscrowAccount.GetHashCode();
                if (this.SubTotalForReleaseAtClosing != null)
                    hashCode = hashCode * 59 + this.SubTotalForReleaseAtClosing.GetHashCode();
                if (this.SumForInvestor != null)
                    hashCode = hashCode * 59 + this.SumForInvestor.GetHashCode();
                if (this.SumForOwnerOccupied != null)
                    hashCode = hashCode * 59 + this.SumForOwnerOccupied.GetHashCode();
                if (this.SumOfExistingDebt != null)
                    hashCode = hashCode * 59 + this.SumOfExistingDebt.GetHashCode();
                if (this.SuplementalOriginationFee != null)
                    hashCode = hashCode * 59 + this.SuplementalOriginationFee.GetHashCode();
                if (this.Title1LoanBalance != null)
                    hashCode = hashCode * 59 + this.Title1LoanBalance.GetHashCode();
                if (this.Title1LoanNumber != null)
                    hashCode = hashCode * 59 + this.Title1LoanNumber.GetHashCode();
                if (this.Title1LoanWithWhom != null)
                    hashCode = hashCode * 59 + this.Title1LoanWithWhom.GetHashCode();
                if (this.TitleUpdateFeeAmount != null)
                    hashCode = hashCode * 59 + this.TitleUpdateFeeAmount.GetHashCode();
                if (this.TitleUpdateFeeTimes != null)
                    hashCode = hashCode * 59 + this.TitleUpdateFeeTimes.GetHashCode();
                if (this.TotalCostsOfRepairsInA6 != null)
                    hashCode = hashCode * 59 + this.TotalCostsOfRepairsInA6.GetHashCode();
                if (this.TotalEscrowCommitment != null)
                    hashCode = hashCode * 59 + this.TotalEscrowCommitment.GetHashCode();
                if (this.TotalEscrowedFunds != null)
                    hashCode = hashCode * 59 + this.TotalEscrowedFunds.GetHashCode();
                if (this.TotalFixedUnpaidBalance != null)
                    hashCode = hashCode * 59 + this.TotalFixedUnpaidBalance.GetHashCode();
                if (this.TotalForBorrowerEstimatedProfit != null)
                    hashCode = hashCode * 59 + this.TotalForBorrowerEstimatedProfit.GetHashCode();
                if (this.TotalForInspectionAndTitleFee != null)
                    hashCode = hashCode * 59 + this.TotalForInspectionAndTitleFee.GetHashCode();
                if (this.TotalForLesserOfSumAsIs != null)
                    hashCode = hashCode * 59 + this.TotalForLesserOfSumAsIs.GetHashCode();
                if (this.TotalForMtgPaymentEscrowed != null)
                    hashCode = hashCode * 59 + this.TotalForMtgPaymentEscrowed.GetHashCode();
                if (this.TotalForPlanReviewerFee != null)
                    hashCode = hashCode * 59 + this.TotalForPlanReviewerFee.GetHashCode();
                if (this.TotalForRehabilitationCost != null)
                    hashCode = hashCode * 59 + this.TotalForRehabilitationCost.GetHashCode();
                if (this.TotalRehabilitationCosts != null)
                    hashCode = hashCode * 59 + this.TotalRehabilitationCosts.GetHashCode();
                if (this.ValueEstablished != null)
                    hashCode = hashCode * 59 + this.ValueEstablished.GetHashCode();
                if (this.ConstructionRepairsRehabilitationCosts != null)
                    hashCode = hashCode * 59 + this.ConstructionRepairsRehabilitationCosts.GetHashCode();
                if (this.FeasibilityStudyWhenNecessary != null)
                    hashCode = hashCode * 59 + this.FeasibilityStudyWhenNecessary.GetHashCode();
                if (this.FinanceableMortgageFeesIfCharged != null)
                    hashCode = hashCode * 59 + this.FinanceableMortgageFeesIfCharged.GetHashCode();
                if (this.TotalRehabilitationCostsFeesReserves != null)
                    hashCode = hashCode * 59 + this.TotalRehabilitationCostsFeesReserves.GetHashCode();
                if (this.PurchasePriceLessInducementToPurchase != null)
                    hashCode = hashCode * 59 + this.PurchasePriceLessInducementToPurchase.GetHashCode();
                if (this.Step2EPlusStep1E != null)
                    hashCode = hashCode * 59 + this.Step2EPlusStep1E.GetHashCode();
                if (this.LesserOf3AOr3B != null)
                    hashCode = hashCode * 59 + this.LesserOf3AOr3B.GetHashCode();
                if (this.AppropriateLTVFactor != null)
                    hashCode = hashCode * 59 + this.AppropriateLTVFactor.GetHashCode();
                if (this.LesserOf3AOr3BMultiply3F != null)
                    hashCode = hashCode * 59 + this.LesserOf3AOr3BMultiply3F.GetHashCode();
                if (this.NationwideMortgageLimit != null)
                    hashCode = hashCode * 59 + this.NationwideMortgageLimit.GetHashCode();
                if (this.BaseMortgageAmountFrom3COr3D != null)
                    hashCode = hashCode * 59 + this.BaseMortgageAmountFrom3COr3D.GetHashCode();
                if (this.MaterialCostsOrderedPrepaidByBorrowerContractor != null)
                    hashCode = hashCode * 59 + this.MaterialCostsOrderedPrepaidByBorrowerContractor.GetHashCode();
                if (this.MaterialCostsOrderedPrepaidByBorrowerContractorAfter50Percent != null)
                    hashCode = hashCode * 59 + this.MaterialCostsOrderedPrepaidByBorrowerContractorAfter50Percent.GetHashCode();
                if (this.InitialDrawAtClosingTotal != null)
                    hashCode = hashCode * 59 + this.InitialDrawAtClosingTotal.GetHashCode();
                if (this.BorrowersOwnFundsforContingencyReserves != null)
                    hashCode = hashCode * 59 + this.BorrowersOwnFundsforContingencyReserves.GetHashCode();
                if (this.InitialBaseMortgageAmountPlusEEMImprovementAmount != null)
                    hashCode = hashCode * 59 + this.InitialBaseMortgageAmountPlusEEMImprovementAmount.GetHashCode();
                if (this.WindEnergySystemActualCost != null)
                    hashCode = hashCode * 59 + this.WindEnergySystemActualCost.GetHashCode();
                if (this.AfterImprovedValueAfter20Percent != null)
                    hashCode = hashCode * 59 + this.AfterImprovedValueAfter20Percent.GetHashCode();
                if (this.LesserOfMaximumFinanceableSolarOrWindEnergyAmount != null)
                    hashCode = hashCode * 59 + this.LesserOfMaximumFinanceableSolarOrWindEnergyAmount.GetHashCode();
                if (this.NationwideMortgageLimitAfter120Percent != null)
                    hashCode = hashCode * 59 + this.NationwideMortgageLimitAfter120Percent.GetHashCode();
                if (this.FinalBaseMortgageAmount != null)
                    hashCode = hashCode * 59 + this.FinalBaseMortgageAmount.GetHashCode();
                if (this.RehabilitationEscrowAccount != null)
                    hashCode = hashCode * 59 + this.RehabilitationEscrowAccount.GetHashCode();
                if (this.MIPLTV != null)
                    hashCode = hashCode * 59 + this.MIPLTV.GetHashCode();
                if (this.FeesAssociatedWithNewLoan != null)
                    hashCode = hashCode * 59 + this.FeesAssociatedWithNewLoan.GetHashCode();
                if (this.ExistingDebtPlusRehabCosts != null)
                    hashCode = hashCode * 59 + this.ExistingDebtPlusRehabCosts.GetHashCode();
                if (this.ExistingDebtPlusRehabCostsPlusNewLoanFees != null)
                    hashCode = hashCode * 59 + this.ExistingDebtPlusRehabCostsPlusNewLoanFees.GetHashCode();
                if (this.InspectionFeesDuringRehabilitation != null)
                    hashCode = hashCode * 59 + this.InspectionFeesDuringRehabilitation.GetHashCode();
                if (this.TitleUpdateFees != null)
                    hashCode = hashCode * 59 + this.TitleUpdateFees.GetHashCode();
                if (this.RehabilitationEscrowAmountBalanceForFutureDraws != null)
                    hashCode = hashCode * 59 + this.RehabilitationEscrowAmountBalanceForFutureDraws.GetHashCode();
                if (this.LimitedProgram != null)
                    hashCode = hashCode * 59 + this.LimitedProgram.GetHashCode();
                if (this.CriteriaForAppropriateLTVFactor != null)
                    hashCode = hashCode * 59 + this.CriteriaForAppropriateLTVFactor.GetHashCode();
                if (this.LessLeadBasedPaintCredit != null)
                    hashCode = hashCode * 59 + this.LessLeadBasedPaintCredit.GetHashCode();
                if (this.CaseLTV != null)
                    hashCode = hashCode * 59 + this.CaseLTV.GetHashCode();
                if (this.InitialDrawAtClosingConsultantFees != null)
                    hashCode = hashCode * 59 + this.InitialDrawAtClosingConsultantFees.GetHashCode();
                if (this.InitialDrawAtClosingArchitecturalorEngineeringFees != null)
                    hashCode = hashCode * 59 + this.InitialDrawAtClosingArchitecturalorEngineeringFees.GetHashCode();
                if (this.InitialDrawAtClosingPermitFees != null)
                    hashCode = hashCode * 59 + this.InitialDrawAtClosingPermitFees.GetHashCode();
                if (this.UnpaidPrincipalBalanceFirstLien != null)
                    hashCode = hashCode * 59 + this.UnpaidPrincipalBalanceFirstLien.GetHashCode();
                if (this.UnpaidPrincipalBalanceOfPurchaseJuniorLiens != null)
                    hashCode = hashCode * 59 + this.UnpaidPrincipalBalanceOfPurchaseJuniorLiens.GetHashCode();
                if (this.UnpaidPrincipalBalanceOfAnyJuniorLiens != null)
                    hashCode = hashCode * 59 + this.UnpaidPrincipalBalanceOfAnyJuniorLiens.GetHashCode();
                if (this.InterestDueonExistingMortgage != null)
                    hashCode = hashCode * 59 + this.InterestDueonExistingMortgage.GetHashCode();
                if (this.MIPDueOnExistingMortgage != null)
                    hashCode = hashCode * 59 + this.MIPDueOnExistingMortgage.GetHashCode();
                if (this.PrepaymentPenalties != null)
                    hashCode = hashCode * 59 + this.PrepaymentPenalties.GetHashCode();
                if (this.LateCharges != null)
                    hashCode = hashCode * 59 + this.LateCharges.GetHashCode();
                if (this.EscrowShortages != null)
                    hashCode = hashCode * 59 + this.EscrowShortages.GetHashCode();
                if (this.Existing203KDebtTotal != null)
                    hashCode = hashCode * 59 + this.Existing203KDebtTotal.GetHashCode();
                if (this.WaterPurificationOrganization != null)
                    hashCode = hashCode * 59 + this.WaterPurificationOrganization.GetHashCode();
                if (this.WaterPurificationAgent != null)
                    hashCode = hashCode * 59 + this.WaterPurificationAgent.GetHashCode();
                if (this.WaterPurificationPayees != null)
                    hashCode = hashCode * 59 + this.WaterPurificationPayees.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
