/*
* Copyright 2017 Ellie Mae, Inc.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*
*  1. Redistributions of source code must retain the above copyright notice,
*     this list of conditions and the following disclaimer.
*
*  2. Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*  3. Neither the name of the copyright holder nor the names of its
*     contributors may be used to endorse or promote products derived from this
*     software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.
*/


/* 
 * Loan
 *
 * Returns the entire loan or specific entities of a loan.
 *
 * OpenAPI spec version: 1.4.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Elli.Api.Loans.Client.SwaggerDateConverter;

namespace Elli.Api.Loans.Model
{
    /// <summary>
    /// LoanContractFees
    /// </summary>
    [DataContract]
    public partial class LoanContractFees :  IEquatable<LoanContractFees>, IValidatableObject
    {
    
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public double? Amount { get; set; }

        /// <summary>
        /// Gets or Sets AmountPerDay
        /// </summary>
        [DataMember(Name="amountPerDay", EmitDefaultValue=false)]
        public double? AmountPerDay { get; set; }

        /// <summary>
        /// Gets or Sets TruncatedAmountPerDay
        /// </summary>
        [DataMember(Name="truncatedAmountPerDay", EmitDefaultValue=false)]
        public double? TruncatedAmountPerDay { get; set; }

        /// <summary>
        /// Gets or Sets BorPaidAmount
        /// </summary>
        [DataMember(Name="borPaidAmount", EmitDefaultValue=false)]
        public double? BorPaidAmount { get; set; }

        /// <summary>
        /// Gets or Sets DateFrom
        /// </summary>
        [DataMember(Name="dateFrom", EmitDefaultValue=false)]
        public DateTime? DateFrom { get; set; }

        /// <summary>
        /// Gets or Sets DateTo
        /// </summary>
        [DataMember(Name="dateTo", EmitDefaultValue=false)]
        public DateTime? DateTo { get; set; }

        /// <summary>
        /// Gets or Sets Days
        /// </summary>
        [DataMember(Name="days", EmitDefaultValue=false)]
        public int? Days { get; set; }

        /// <summary>
        /// Gets or Sets DeedAmount
        /// </summary>
        [DataMember(Name="deedAmount", EmitDefaultValue=false)]
        public double? DeedAmount { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets FeeType
        /// </summary>
        [DataMember(Name="feeType", EmitDefaultValue=false)]
        public string FeeType { get; set; }

        /// <summary>
        /// Gets or Sets FHA
        /// </summary>
        [DataMember(Name="fHA", EmitDefaultValue=false)]
        public bool? FHA { get; set; }

        /// <summary>
        /// Gets or Sets FWBC
        /// </summary>
        [DataMember(Name="fWBC", EmitDefaultValue=false)]
        public string FWBC { get; set; }

        /// <summary>
        /// Gets or Sets FWSC
        /// </summary>
        [DataMember(Name="fWSC", EmitDefaultValue=false)]
        public string FWSC { get; set; }

        /// <summary>
        /// Gets or Sets IncludeAboveNumber
        /// </summary>
        [DataMember(Name="includeAboveNumber", EmitDefaultValue=false)]
        public string IncludeAboveNumber { get; set; }

        /// <summary>
        /// Gets or Sets LenderCoverage
        /// </summary>
        [DataMember(Name="lenderCoverage", EmitDefaultValue=false)]
        public double? LenderCoverage { get; set; }

        /// <summary>
        /// Gets or Sets MonthlyPayment
        /// </summary>
        [DataMember(Name="monthlyPayment", EmitDefaultValue=false)]
        public double? MonthlyPayment { get; set; }

        /// <summary>
        /// Gets or Sets MortgageAmount
        /// </summary>
        [DataMember(Name="mortgageAmount", EmitDefaultValue=false)]
        public double? MortgageAmount { get; set; }

        /// <summary>
        /// Gets or Sets NewHUDBorPaidAmount
        /// </summary>
        [DataMember(Name="newHUDBorPaidAmount", EmitDefaultValue=false)]
        public string NewHUDBorPaidAmount { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfMonths
        /// </summary>
        [DataMember(Name="numberOfMonths", EmitDefaultValue=false)]
        public int? NumberOfMonths { get; set; }

        /// <summary>
        /// Gets or Sets OwnerCoverage
        /// </summary>
        [DataMember(Name="ownerCoverage", EmitDefaultValue=false)]
        public double? OwnerCoverage { get; set; }

        /// <summary>
        /// Gets or Sets PaidBy
        /// </summary>
        [DataMember(Name="paidBy", EmitDefaultValue=false)]
        public string PaidBy { get; set; }

        /// <summary>
        /// Gets or Sets PaidInAdvance
        /// </summary>
        [DataMember(Name="paidInAdvance", EmitDefaultValue=false)]
        public double? PaidInAdvance { get; set; }

        /// <summary>
        /// Gets or Sets PaidToBroker
        /// </summary>
        [DataMember(Name="paidToBroker", EmitDefaultValue=false)]
        public double? PaidToBroker { get; set; }

        /// <summary>
        /// Gets or Sets PaidToName
        /// </summary>
        [DataMember(Name="paidToName", EmitDefaultValue=false)]
        public string PaidToName { get; set; }

        /// <summary>
        /// Gets or Sets PaidToOthers
        /// </summary>
        [DataMember(Name="paidToOthers", EmitDefaultValue=false)]
        public double? PaidToOthers { get; set; }

        /// <summary>
        /// Gets or Sets Percentage
        /// </summary>
        [DataMember(Name="percentage", EmitDefaultValue=false)]
        public double? Percentage { get; set; }

        /// <summary>
        /// Gets or Sets PFC
        /// </summary>
        [DataMember(Name="pFC", EmitDefaultValue=false)]
        public bool? PFC { get; set; }

        /// <summary>
        /// Gets or Sets POC
        /// </summary>
        [DataMember(Name="pOC", EmitDefaultValue=false)]
        public bool? POC { get; set; }

        /// <summary>
        /// Gets or Sets PTB
        /// </summary>
        [DataMember(Name="pTB", EmitDefaultValue=false)]
        public string PTB { get; set; }

        /// <summary>
        /// Gets or Sets ReleasesAmount
        /// </summary>
        [DataMember(Name="releasesAmount", EmitDefaultValue=false)]
        public double? ReleasesAmount { get; set; }

        /// <summary>
        /// Gets or Sets SellerPaidAmount
        /// </summary>
        [DataMember(Name="sellerPaidAmount", EmitDefaultValue=false)]
        public double? SellerPaidAmount { get; set; }

        /// <summary>
        /// Gets or Sets Use4Decimals
        /// </summary>
        [DataMember(Name="use4Decimals", EmitDefaultValue=false)]
        public bool? Use4Decimals { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LoanContractFees {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  AmountPerDay: ").Append(AmountPerDay).Append("\n");
            sb.Append("  TruncatedAmountPerDay: ").Append(TruncatedAmountPerDay).Append("\n");
            sb.Append("  BorPaidAmount: ").Append(BorPaidAmount).Append("\n");
            sb.Append("  DateFrom: ").Append(DateFrom).Append("\n");
            sb.Append("  DateTo: ").Append(DateTo).Append("\n");
            sb.Append("  Days: ").Append(Days).Append("\n");
            sb.Append("  DeedAmount: ").Append(DeedAmount).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  FeeType: ").Append(FeeType).Append("\n");
            sb.Append("  FHA: ").Append(FHA).Append("\n");
            sb.Append("  FWBC: ").Append(FWBC).Append("\n");
            sb.Append("  FWSC: ").Append(FWSC).Append("\n");
            sb.Append("  IncludeAboveNumber: ").Append(IncludeAboveNumber).Append("\n");
            sb.Append("  LenderCoverage: ").Append(LenderCoverage).Append("\n");
            sb.Append("  MonthlyPayment: ").Append(MonthlyPayment).Append("\n");
            sb.Append("  MortgageAmount: ").Append(MortgageAmount).Append("\n");
            sb.Append("  NewHUDBorPaidAmount: ").Append(NewHUDBorPaidAmount).Append("\n");
            sb.Append("  NumberOfMonths: ").Append(NumberOfMonths).Append("\n");
            sb.Append("  OwnerCoverage: ").Append(OwnerCoverage).Append("\n");
            sb.Append("  PaidBy: ").Append(PaidBy).Append("\n");
            sb.Append("  PaidInAdvance: ").Append(PaidInAdvance).Append("\n");
            sb.Append("  PaidToBroker: ").Append(PaidToBroker).Append("\n");
            sb.Append("  PaidToName: ").Append(PaidToName).Append("\n");
            sb.Append("  PaidToOthers: ").Append(PaidToOthers).Append("\n");
            sb.Append("  Percentage: ").Append(Percentage).Append("\n");
            sb.Append("  PFC: ").Append(PFC).Append("\n");
            sb.Append("  POC: ").Append(POC).Append("\n");
            sb.Append("  PTB: ").Append(PTB).Append("\n");
            sb.Append("  ReleasesAmount: ").Append(ReleasesAmount).Append("\n");
            sb.Append("  SellerPaidAmount: ").Append(SellerPaidAmount).Append("\n");
            sb.Append("  Use4Decimals: ").Append(Use4Decimals).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LoanContractFees);
        }

        /// <summary>
        /// Returns true if LoanContractFees instances are equal
        /// </summary>
        /// <param name="input">Instance of LoanContractFees to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoanContractFees input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.AmountPerDay == input.AmountPerDay ||
                    (this.AmountPerDay != null &&
                    this.AmountPerDay.Equals(input.AmountPerDay))
                ) && 
                (
                    this.TruncatedAmountPerDay == input.TruncatedAmountPerDay ||
                    (this.TruncatedAmountPerDay != null &&
                    this.TruncatedAmountPerDay.Equals(input.TruncatedAmountPerDay))
                ) && 
                (
                    this.BorPaidAmount == input.BorPaidAmount ||
                    (this.BorPaidAmount != null &&
                    this.BorPaidAmount.Equals(input.BorPaidAmount))
                ) && 
                (
                    this.DateFrom == input.DateFrom ||
                    (this.DateFrom != null &&
                    this.DateFrom.Equals(input.DateFrom))
                ) && 
                (
                    this.DateTo == input.DateTo ||
                    (this.DateTo != null &&
                    this.DateTo.Equals(input.DateTo))
                ) && 
                (
                    this.Days == input.Days ||
                    (this.Days != null &&
                    this.Days.Equals(input.Days))
                ) && 
                (
                    this.DeedAmount == input.DeedAmount ||
                    (this.DeedAmount != null &&
                    this.DeedAmount.Equals(input.DeedAmount))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.FeeType == input.FeeType ||
                    (this.FeeType != null &&
                    this.FeeType.Equals(input.FeeType))
                ) && 
                (
                    this.FHA == input.FHA ||
                    (this.FHA != null &&
                    this.FHA.Equals(input.FHA))
                ) && 
                (
                    this.FWBC == input.FWBC ||
                    (this.FWBC != null &&
                    this.FWBC.Equals(input.FWBC))
                ) && 
                (
                    this.FWSC == input.FWSC ||
                    (this.FWSC != null &&
                    this.FWSC.Equals(input.FWSC))
                ) && 
                (
                    this.IncludeAboveNumber == input.IncludeAboveNumber ||
                    (this.IncludeAboveNumber != null &&
                    this.IncludeAboveNumber.Equals(input.IncludeAboveNumber))
                ) && 
                (
                    this.LenderCoverage == input.LenderCoverage ||
                    (this.LenderCoverage != null &&
                    this.LenderCoverage.Equals(input.LenderCoverage))
                ) && 
                (
                    this.MonthlyPayment == input.MonthlyPayment ||
                    (this.MonthlyPayment != null &&
                    this.MonthlyPayment.Equals(input.MonthlyPayment))
                ) && 
                (
                    this.MortgageAmount == input.MortgageAmount ||
                    (this.MortgageAmount != null &&
                    this.MortgageAmount.Equals(input.MortgageAmount))
                ) && 
                (
                    this.NewHUDBorPaidAmount == input.NewHUDBorPaidAmount ||
                    (this.NewHUDBorPaidAmount != null &&
                    this.NewHUDBorPaidAmount.Equals(input.NewHUDBorPaidAmount))
                ) && 
                (
                    this.NumberOfMonths == input.NumberOfMonths ||
                    (this.NumberOfMonths != null &&
                    this.NumberOfMonths.Equals(input.NumberOfMonths))
                ) && 
                (
                    this.OwnerCoverage == input.OwnerCoverage ||
                    (this.OwnerCoverage != null &&
                    this.OwnerCoverage.Equals(input.OwnerCoverage))
                ) && 
                (
                    this.PaidBy == input.PaidBy ||
                    (this.PaidBy != null &&
                    this.PaidBy.Equals(input.PaidBy))
                ) && 
                (
                    this.PaidInAdvance == input.PaidInAdvance ||
                    (this.PaidInAdvance != null &&
                    this.PaidInAdvance.Equals(input.PaidInAdvance))
                ) && 
                (
                    this.PaidToBroker == input.PaidToBroker ||
                    (this.PaidToBroker != null &&
                    this.PaidToBroker.Equals(input.PaidToBroker))
                ) && 
                (
                    this.PaidToName == input.PaidToName ||
                    (this.PaidToName != null &&
                    this.PaidToName.Equals(input.PaidToName))
                ) && 
                (
                    this.PaidToOthers == input.PaidToOthers ||
                    (this.PaidToOthers != null &&
                    this.PaidToOthers.Equals(input.PaidToOthers))
                ) && 
                (
                    this.Percentage == input.Percentage ||
                    (this.Percentage != null &&
                    this.Percentage.Equals(input.Percentage))
                ) && 
                (
                    this.PFC == input.PFC ||
                    (this.PFC != null &&
                    this.PFC.Equals(input.PFC))
                ) && 
                (
                    this.POC == input.POC ||
                    (this.POC != null &&
                    this.POC.Equals(input.POC))
                ) && 
                (
                    this.PTB == input.PTB ||
                    (this.PTB != null &&
                    this.PTB.Equals(input.PTB))
                ) && 
                (
                    this.ReleasesAmount == input.ReleasesAmount ||
                    (this.ReleasesAmount != null &&
                    this.ReleasesAmount.Equals(input.ReleasesAmount))
                ) && 
                (
                    this.SellerPaidAmount == input.SellerPaidAmount ||
                    (this.SellerPaidAmount != null &&
                    this.SellerPaidAmount.Equals(input.SellerPaidAmount))
                ) && 
                (
                    this.Use4Decimals == input.Use4Decimals ||
                    (this.Use4Decimals != null &&
                    this.Use4Decimals.Equals(input.Use4Decimals))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.AmountPerDay != null)
                    hashCode = hashCode * 59 + this.AmountPerDay.GetHashCode();
                if (this.TruncatedAmountPerDay != null)
                    hashCode = hashCode * 59 + this.TruncatedAmountPerDay.GetHashCode();
                if (this.BorPaidAmount != null)
                    hashCode = hashCode * 59 + this.BorPaidAmount.GetHashCode();
                if (this.DateFrom != null)
                    hashCode = hashCode * 59 + this.DateFrom.GetHashCode();
                if (this.DateTo != null)
                    hashCode = hashCode * 59 + this.DateTo.GetHashCode();
                if (this.Days != null)
                    hashCode = hashCode * 59 + this.Days.GetHashCode();
                if (this.DeedAmount != null)
                    hashCode = hashCode * 59 + this.DeedAmount.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.FeeType != null)
                    hashCode = hashCode * 59 + this.FeeType.GetHashCode();
                if (this.FHA != null)
                    hashCode = hashCode * 59 + this.FHA.GetHashCode();
                if (this.FWBC != null)
                    hashCode = hashCode * 59 + this.FWBC.GetHashCode();
                if (this.FWSC != null)
                    hashCode = hashCode * 59 + this.FWSC.GetHashCode();
                if (this.IncludeAboveNumber != null)
                    hashCode = hashCode * 59 + this.IncludeAboveNumber.GetHashCode();
                if (this.LenderCoverage != null)
                    hashCode = hashCode * 59 + this.LenderCoverage.GetHashCode();
                if (this.MonthlyPayment != null)
                    hashCode = hashCode * 59 + this.MonthlyPayment.GetHashCode();
                if (this.MortgageAmount != null)
                    hashCode = hashCode * 59 + this.MortgageAmount.GetHashCode();
                if (this.NewHUDBorPaidAmount != null)
                    hashCode = hashCode * 59 + this.NewHUDBorPaidAmount.GetHashCode();
                if (this.NumberOfMonths != null)
                    hashCode = hashCode * 59 + this.NumberOfMonths.GetHashCode();
                if (this.OwnerCoverage != null)
                    hashCode = hashCode * 59 + this.OwnerCoverage.GetHashCode();
                if (this.PaidBy != null)
                    hashCode = hashCode * 59 + this.PaidBy.GetHashCode();
                if (this.PaidInAdvance != null)
                    hashCode = hashCode * 59 + this.PaidInAdvance.GetHashCode();
                if (this.PaidToBroker != null)
                    hashCode = hashCode * 59 + this.PaidToBroker.GetHashCode();
                if (this.PaidToName != null)
                    hashCode = hashCode * 59 + this.PaidToName.GetHashCode();
                if (this.PaidToOthers != null)
                    hashCode = hashCode * 59 + this.PaidToOthers.GetHashCode();
                if (this.Percentage != null)
                    hashCode = hashCode * 59 + this.Percentage.GetHashCode();
                if (this.PFC != null)
                    hashCode = hashCode * 59 + this.PFC.GetHashCode();
                if (this.POC != null)
                    hashCode = hashCode * 59 + this.POC.GetHashCode();
                if (this.PTB != null)
                    hashCode = hashCode * 59 + this.PTB.GetHashCode();
                if (this.ReleasesAmount != null)
                    hashCode = hashCode * 59 + this.ReleasesAmount.GetHashCode();
                if (this.SellerPaidAmount != null)
                    hashCode = hashCode * 59 + this.SellerPaidAmount.GetHashCode();
                if (this.Use4Decimals != null)
                    hashCode = hashCode * 59 + this.Use4Decimals.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
