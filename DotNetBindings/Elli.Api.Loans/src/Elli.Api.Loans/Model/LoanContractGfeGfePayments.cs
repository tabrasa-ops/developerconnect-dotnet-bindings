/*
* Copyright 2017 Ellie Mae, Inc.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*
*  1. Redistributions of source code must retain the above copyright notice,
*     this list of conditions and the following disclaimer.
*
*  2. Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*  3. Neither the name of the copyright holder nor the names of its
*     contributors may be used to endorse or promote products derived from this
*     software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.
*/


/* 
 * Loan
 *
 * Returns the entire loan or specific entities of a loan.
 *
 * OpenAPI spec version: 1.4.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Elli.Api.Loans.Client.SwaggerDateConverter;

namespace Elli.Api.Loans.Model
{
    /// <summary>
    /// LoanContractGfeGfePayments
    /// </summary>
    [DataContract]
    public partial class LoanContractGfeGfePayments :  IEquatable<LoanContractGfeGfePayments>, IValidatableObject
    {
    
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets FixedRate
        /// </summary>
        [DataMember(Name="fixedRate", EmitDefaultValue=false)]
        public double? FixedRate { get; set; }

        /// <summary>
        /// Gets or Sets GfePaymentIndex
        /// </summary>
        [DataMember(Name="gfePaymentIndex", EmitDefaultValue=false)]
        public int? GfePaymentIndex { get; set; }

        /// <summary>
        /// Gets or Sets IndexRate
        /// </summary>
        [DataMember(Name="indexRate", EmitDefaultValue=false)]
        public double? IndexRate { get; set; }

        /// <summary>
        /// Gets or Sets IsBalanceReduced
        /// </summary>
        [DataMember(Name="isBalanceReduced", EmitDefaultValue=false)]
        public string IsBalanceReduced { get; set; }

        /// <summary>
        /// Gets or Sets LoanTypeExplanation
        /// </summary>
        [DataMember(Name="loanTypeExplanation", EmitDefaultValue=false)]
        public string LoanTypeExplanation { get; set; }

        /// <summary>
        /// Gets or Sets MarginRate
        /// </summary>
        [DataMember(Name="marginRate", EmitDefaultValue=false)]
        public double? MarginRate { get; set; }

        /// <summary>
        /// Gets or Sets MaximumDifference
        /// </summary>
        [DataMember(Name="maximumDifference", EmitDefaultValue=false)]
        public double? MaximumDifference { get; set; }

        /// <summary>
        /// Gets or Sets MaximumRate
        /// </summary>
        [DataMember(Name="maximumRate", EmitDefaultValue=false)]
        public double? MaximumRate { get; set; }

        /// <summary>
        /// Gets or Sets MinimumDifference
        /// </summary>
        [DataMember(Name="minimumDifference", EmitDefaultValue=false)]
        public double? MinimumDifference { get; set; }

        /// <summary>
        /// Gets or Sets MinimumMonthlyPayment
        /// </summary>
        [DataMember(Name="minimumMonthlyPayment", EmitDefaultValue=false)]
        public double? MinimumMonthlyPayment { get; set; }

        /// <summary>
        /// Gets or Sets MonthlyPaymentYear1
        /// </summary>
        [DataMember(Name="monthlyPaymentYear1", EmitDefaultValue=false)]
        public double? MonthlyPaymentYear1 { get; set; }

        /// <summary>
        /// Gets or Sets MonthlyPaymentYear6
        /// </summary>
        [DataMember(Name="monthlyPaymentYear6", EmitDefaultValue=false)]
        public double? MonthlyPaymentYear6 { get; set; }

        /// <summary>
        /// Gets or Sets MonthlyPaymentYear6Change
        /// </summary>
        [DataMember(Name="monthlyPaymentYear6Change", EmitDefaultValue=false)]
        public double? MonthlyPaymentYear6Change { get; set; }

        /// <summary>
        /// Gets or Sets MonthlyPaymentYear6MaxChange
        /// </summary>
        [DataMember(Name="monthlyPaymentYear6MaxChange", EmitDefaultValue=false)]
        public double? MonthlyPaymentYear6MaxChange { get; set; }

        /// <summary>
        /// Gets or Sets NotOfferedIndicator
        /// </summary>
        [DataMember(Name="notOfferedIndicator", EmitDefaultValue=false)]
        public bool? NotOfferedIndicator { get; set; }

        /// <summary>
        /// Gets or Sets OwedAfter5Years
        /// </summary>
        [DataMember(Name="owedAfter5Years", EmitDefaultValue=false)]
        public double? OwedAfter5Years { get; set; }

        /// <summary>
        /// Gets or Sets RateInMonth2
        /// </summary>
        [DataMember(Name="rateInMonth2", EmitDefaultValue=false)]
        public double? RateInMonth2 { get; set; }

        /// <summary>
        /// Gets or Sets ReducedLoanBalance
        /// </summary>
        [DataMember(Name="reducedLoanBalance", EmitDefaultValue=false)]
        public double? ReducedLoanBalance { get; set; }

        /// <summary>
        /// Gets or Sets ReducedStatus
        /// </summary>
        [DataMember(Name="reducedStatus", EmitDefaultValue=false)]
        public string ReducedStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LoanContractGfeGfePayments {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  FixedRate: ").Append(FixedRate).Append("\n");
            sb.Append("  GfePaymentIndex: ").Append(GfePaymentIndex).Append("\n");
            sb.Append("  IndexRate: ").Append(IndexRate).Append("\n");
            sb.Append("  IsBalanceReduced: ").Append(IsBalanceReduced).Append("\n");
            sb.Append("  LoanTypeExplanation: ").Append(LoanTypeExplanation).Append("\n");
            sb.Append("  MarginRate: ").Append(MarginRate).Append("\n");
            sb.Append("  MaximumDifference: ").Append(MaximumDifference).Append("\n");
            sb.Append("  MaximumRate: ").Append(MaximumRate).Append("\n");
            sb.Append("  MinimumDifference: ").Append(MinimumDifference).Append("\n");
            sb.Append("  MinimumMonthlyPayment: ").Append(MinimumMonthlyPayment).Append("\n");
            sb.Append("  MonthlyPaymentYear1: ").Append(MonthlyPaymentYear1).Append("\n");
            sb.Append("  MonthlyPaymentYear6: ").Append(MonthlyPaymentYear6).Append("\n");
            sb.Append("  MonthlyPaymentYear6Change: ").Append(MonthlyPaymentYear6Change).Append("\n");
            sb.Append("  MonthlyPaymentYear6MaxChange: ").Append(MonthlyPaymentYear6MaxChange).Append("\n");
            sb.Append("  NotOfferedIndicator: ").Append(NotOfferedIndicator).Append("\n");
            sb.Append("  OwedAfter5Years: ").Append(OwedAfter5Years).Append("\n");
            sb.Append("  RateInMonth2: ").Append(RateInMonth2).Append("\n");
            sb.Append("  ReducedLoanBalance: ").Append(ReducedLoanBalance).Append("\n");
            sb.Append("  ReducedStatus: ").Append(ReducedStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LoanContractGfeGfePayments);
        }

        /// <summary>
        /// Returns true if LoanContractGfeGfePayments instances are equal
        /// </summary>
        /// <param name="input">Instance of LoanContractGfeGfePayments to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoanContractGfeGfePayments input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.FixedRate == input.FixedRate ||
                    (this.FixedRate != null &&
                    this.FixedRate.Equals(input.FixedRate))
                ) && 
                (
                    this.GfePaymentIndex == input.GfePaymentIndex ||
                    (this.GfePaymentIndex != null &&
                    this.GfePaymentIndex.Equals(input.GfePaymentIndex))
                ) && 
                (
                    this.IndexRate == input.IndexRate ||
                    (this.IndexRate != null &&
                    this.IndexRate.Equals(input.IndexRate))
                ) && 
                (
                    this.IsBalanceReduced == input.IsBalanceReduced ||
                    (this.IsBalanceReduced != null &&
                    this.IsBalanceReduced.Equals(input.IsBalanceReduced))
                ) && 
                (
                    this.LoanTypeExplanation == input.LoanTypeExplanation ||
                    (this.LoanTypeExplanation != null &&
                    this.LoanTypeExplanation.Equals(input.LoanTypeExplanation))
                ) && 
                (
                    this.MarginRate == input.MarginRate ||
                    (this.MarginRate != null &&
                    this.MarginRate.Equals(input.MarginRate))
                ) && 
                (
                    this.MaximumDifference == input.MaximumDifference ||
                    (this.MaximumDifference != null &&
                    this.MaximumDifference.Equals(input.MaximumDifference))
                ) && 
                (
                    this.MaximumRate == input.MaximumRate ||
                    (this.MaximumRate != null &&
                    this.MaximumRate.Equals(input.MaximumRate))
                ) && 
                (
                    this.MinimumDifference == input.MinimumDifference ||
                    (this.MinimumDifference != null &&
                    this.MinimumDifference.Equals(input.MinimumDifference))
                ) && 
                (
                    this.MinimumMonthlyPayment == input.MinimumMonthlyPayment ||
                    (this.MinimumMonthlyPayment != null &&
                    this.MinimumMonthlyPayment.Equals(input.MinimumMonthlyPayment))
                ) && 
                (
                    this.MonthlyPaymentYear1 == input.MonthlyPaymentYear1 ||
                    (this.MonthlyPaymentYear1 != null &&
                    this.MonthlyPaymentYear1.Equals(input.MonthlyPaymentYear1))
                ) && 
                (
                    this.MonthlyPaymentYear6 == input.MonthlyPaymentYear6 ||
                    (this.MonthlyPaymentYear6 != null &&
                    this.MonthlyPaymentYear6.Equals(input.MonthlyPaymentYear6))
                ) && 
                (
                    this.MonthlyPaymentYear6Change == input.MonthlyPaymentYear6Change ||
                    (this.MonthlyPaymentYear6Change != null &&
                    this.MonthlyPaymentYear6Change.Equals(input.MonthlyPaymentYear6Change))
                ) && 
                (
                    this.MonthlyPaymentYear6MaxChange == input.MonthlyPaymentYear6MaxChange ||
                    (this.MonthlyPaymentYear6MaxChange != null &&
                    this.MonthlyPaymentYear6MaxChange.Equals(input.MonthlyPaymentYear6MaxChange))
                ) && 
                (
                    this.NotOfferedIndicator == input.NotOfferedIndicator ||
                    (this.NotOfferedIndicator != null &&
                    this.NotOfferedIndicator.Equals(input.NotOfferedIndicator))
                ) && 
                (
                    this.OwedAfter5Years == input.OwedAfter5Years ||
                    (this.OwedAfter5Years != null &&
                    this.OwedAfter5Years.Equals(input.OwedAfter5Years))
                ) && 
                (
                    this.RateInMonth2 == input.RateInMonth2 ||
                    (this.RateInMonth2 != null &&
                    this.RateInMonth2.Equals(input.RateInMonth2))
                ) && 
                (
                    this.ReducedLoanBalance == input.ReducedLoanBalance ||
                    (this.ReducedLoanBalance != null &&
                    this.ReducedLoanBalance.Equals(input.ReducedLoanBalance))
                ) && 
                (
                    this.ReducedStatus == input.ReducedStatus ||
                    (this.ReducedStatus != null &&
                    this.ReducedStatus.Equals(input.ReducedStatus))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.FixedRate != null)
                    hashCode = hashCode * 59 + this.FixedRate.GetHashCode();
                if (this.GfePaymentIndex != null)
                    hashCode = hashCode * 59 + this.GfePaymentIndex.GetHashCode();
                if (this.IndexRate != null)
                    hashCode = hashCode * 59 + this.IndexRate.GetHashCode();
                if (this.IsBalanceReduced != null)
                    hashCode = hashCode * 59 + this.IsBalanceReduced.GetHashCode();
                if (this.LoanTypeExplanation != null)
                    hashCode = hashCode * 59 + this.LoanTypeExplanation.GetHashCode();
                if (this.MarginRate != null)
                    hashCode = hashCode * 59 + this.MarginRate.GetHashCode();
                if (this.MaximumDifference != null)
                    hashCode = hashCode * 59 + this.MaximumDifference.GetHashCode();
                if (this.MaximumRate != null)
                    hashCode = hashCode * 59 + this.MaximumRate.GetHashCode();
                if (this.MinimumDifference != null)
                    hashCode = hashCode * 59 + this.MinimumDifference.GetHashCode();
                if (this.MinimumMonthlyPayment != null)
                    hashCode = hashCode * 59 + this.MinimumMonthlyPayment.GetHashCode();
                if (this.MonthlyPaymentYear1 != null)
                    hashCode = hashCode * 59 + this.MonthlyPaymentYear1.GetHashCode();
                if (this.MonthlyPaymentYear6 != null)
                    hashCode = hashCode * 59 + this.MonthlyPaymentYear6.GetHashCode();
                if (this.MonthlyPaymentYear6Change != null)
                    hashCode = hashCode * 59 + this.MonthlyPaymentYear6Change.GetHashCode();
                if (this.MonthlyPaymentYear6MaxChange != null)
                    hashCode = hashCode * 59 + this.MonthlyPaymentYear6MaxChange.GetHashCode();
                if (this.NotOfferedIndicator != null)
                    hashCode = hashCode * 59 + this.NotOfferedIndicator.GetHashCode();
                if (this.OwedAfter5Years != null)
                    hashCode = hashCode * 59 + this.OwedAfter5Years.GetHashCode();
                if (this.RateInMonth2 != null)
                    hashCode = hashCode * 59 + this.RateInMonth2.GetHashCode();
                if (this.ReducedLoanBalance != null)
                    hashCode = hashCode * 59 + this.ReducedLoanBalance.GetHashCode();
                if (this.ReducedStatus != null)
                    hashCode = hashCode * 59 + this.ReducedStatus.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
