/*
* Copyright 2017 Ellie Mae, Inc.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*
*  1. Redistributions of source code must retain the above copyright notice,
*     this list of conditions and the following disclaimer.
*
*  2. Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*  3. Neither the name of the copyright holder nor the names of its
*     contributors may be used to endorse or promote products derived from this
*     software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.
*/


/* 
 * Loan
 *
 * Returns the entire loan or specific entities of a loan.
 *
 * OpenAPI spec version: 1.4.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Elli.Api.Loans.Client.SwaggerDateConverter;

namespace Elli.Api.Loans.Model
{
    /// <summary>
    /// LoanContractCorrespondent
    /// </summary>
    [DataContract]
    public partial class LoanContractCorrespondent :  IEquatable<LoanContractCorrespondent>, IValidatableObject
    {
    
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets CorrespondentStatus
        /// </summary>
        [DataMember(Name="correspondentStatus", EmitDefaultValue=false)]
        public string CorrespondentStatus { get; set; }

        /// <summary>
        /// Gets or Sets ReceivedDate
        /// </summary>
        [DataMember(Name="receivedDate", EmitDefaultValue=false)]
        public DateTime? ReceivedDate { get; set; }

        /// <summary>
        /// Gets or Sets InitialSuspenseDate
        /// </summary>
        [DataMember(Name="initialSuspenseDate", EmitDefaultValue=false)]
        public DateTime? InitialSuspenseDate { get; set; }

        /// <summary>
        /// Gets or Sets LatestConditionsDate
        /// </summary>
        [DataMember(Name="latestConditionsDate", EmitDefaultValue=false)]
        public DateTime? LatestConditionsDate { get; set; }

        /// <summary>
        /// Gets or Sets ConditionsReceivedDate
        /// </summary>
        [DataMember(Name="conditionsReceivedDate", EmitDefaultValue=false)]
        public DateTime? ConditionsReceivedDate { get; set; }

        /// <summary>
        /// Gets or Sets ApprovedToFundDate
        /// </summary>
        [DataMember(Name="approvedToFundDate", EmitDefaultValue=false)]
        public DateTime? ApprovedToFundDate { get; set; }

        /// <summary>
        /// Gets or Sets FundedDate
        /// </summary>
        [DataMember(Name="fundedDate", EmitDefaultValue=false)]
        public DateTime? FundedDate { get; set; }

        /// <summary>
        /// Gets or Sets Ratesheet
        /// </summary>
        [DataMember(Name="ratesheet", EmitDefaultValue=false)]
        public string Ratesheet { get; set; }

        /// <summary>
        /// Gets or Sets BasePrice
        /// </summary>
        [DataMember(Name="basePrice", EmitDefaultValue=false)]
        public double? BasePrice { get; set; }

        /// <summary>
        /// Gets or Sets NoteDate
        /// </summary>
        [DataMember(Name="noteDate", EmitDefaultValue=false)]
        public DateTime? NoteDate { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryExpirationDate
        /// </summary>
        [DataMember(Name="deliveryExpirationDate", EmitDefaultValue=false)]
        public DateTime? DeliveryExpirationDate { get; set; }

        /// <summary>
        /// Gets or Sets GracePeriodDays
        /// </summary>
        [DataMember(Name="gracePeriodDays", EmitDefaultValue=false)]
        public int? GracePeriodDays { get; set; }

        /// <summary>
        /// Gets or Sets LateDaysBegin
        /// </summary>
        [DataMember(Name="lateDaysBegin", EmitDefaultValue=false)]
        public DateTime? LateDaysBegin { get; set; }

        /// <summary>
        /// Gets or Sets LateDaysEnd
        /// </summary>
        [DataMember(Name="lateDaysEnd", EmitDefaultValue=false)]
        public DateTime? LateDaysEnd { get; set; }

        /// <summary>
        /// Gets or Sets TotalLateDays
        /// </summary>
        [DataMember(Name="totalLateDays", EmitDefaultValue=false)]
        public int? TotalLateDays { get; set; }

        /// <summary>
        /// Gets or Sets LateFeePercentage
        /// </summary>
        [DataMember(Name="lateFeePercentage", EmitDefaultValue=false)]
        public double? LateFeePercentage { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalLateFeeCharge
        /// </summary>
        [DataMember(Name="additionalLateFeeCharge", EmitDefaultValue=false)]
        public double? AdditionalLateFeeCharge { get; set; }

        /// <summary>
        /// Gets or Sets LateFeeFrequency
        /// </summary>
        [DataMember(Name="lateFeeFrequency", EmitDefaultValue=false)]
        public string LateFeeFrequency { get; set; }

        /// <summary>
        /// Gets or Sets LateFeeTotalPriceAdjustment
        /// </summary>
        [DataMember(Name="lateFeeTotalPriceAdjustment", EmitDefaultValue=false)]
        public double? LateFeeTotalPriceAdjustment { get; set; }

        /// <summary>
        /// Gets or Sets LateFeeNotes
        /// </summary>
        [DataMember(Name="lateFeeNotes", EmitDefaultValue=false)]
        public string LateFeeNotes { get; set; }

        /// <summary>
        /// Gets or Sets LateFeeChargeType
        /// </summary>
        [DataMember(Name="lateFeeChargeType", EmitDefaultValue=false)]
        public string LateFeeChargeType { get; set; }

        /// <summary>
        /// Gets or Sets TotalLateFee
        /// </summary>
        [DataMember(Name="totalLateFee", EmitDefaultValue=false)]
        public double? TotalLateFee { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryType
        /// </summary>
        [DataMember(Name="deliveryType", EmitDefaultValue=false)]
        public string DeliveryType { get; set; }

        /// <summary>
        /// Gets or Sets RejectedDate
        /// </summary>
        [DataMember(Name="rejectedDate", EmitDefaultValue=false)]
        public DateTime? RejectedDate { get; set; }

        /// <summary>
        /// Gets or Sets LFSCalculateAs
        /// </summary>
        [DataMember(Name="lFSCalculateAs", EmitDefaultValue=false)]
        public int? LFSCalculateAs { get; set; }

        /// <summary>
        /// Gets or Sets LFSFeeHandledAs
        /// </summary>
        [DataMember(Name="lFSFeeHandledAs", EmitDefaultValue=false)]
        public int? LFSFeeHandledAs { get; set; }

        /// <summary>
        /// Gets or Sets LFSGracePeriodCalendar
        /// </summary>
        [DataMember(Name="lFSGracePeriodCalendar", EmitDefaultValue=false)]
        public int? LFSGracePeriodCalendar { get; set; }

        /// <summary>
        /// Gets or Sets LFSGracePeriodLaterOf
        /// </summary>
        [DataMember(Name="lFSGracePeriodLaterOf", EmitDefaultValue=false)]
        public int? LFSGracePeriodLaterOf { get; set; }

        /// <summary>
        /// Gets or Sets LFSGracePeriodStarts
        /// </summary>
        [DataMember(Name="lFSGracePeriodStarts", EmitDefaultValue=false)]
        public int? LFSGracePeriodStarts { get; set; }

        /// <summary>
        /// Gets or Sets LFSIncludeDay
        /// </summary>
        [DataMember(Name="lFSIncludeDay", EmitDefaultValue=false)]
        public int? LFSIncludeDay { get; set; }

        /// <summary>
        /// Gets or Sets LFSLateFeeBasedOn
        /// </summary>
        [DataMember(Name="lFSLateFeeBasedOn", EmitDefaultValue=false)]
        public int? LFSLateFeeBasedOn { get; set; }

        /// <summary>
        /// Gets or Sets LFSMaxLateDays
        /// </summary>
        [DataMember(Name="lFSMaxLateDays", EmitDefaultValue=false)]
        public int? LFSMaxLateDays { get; set; }

        /// <summary>
        /// Gets or Sets LFSOtherDate
        /// </summary>
        [DataMember(Name="lFSOtherDate", EmitDefaultValue=false)]
        public string LFSOtherDate { get; set; }

        /// <summary>
        /// Gets or Sets LFSStartOnWeekend
        /// </summary>
        [DataMember(Name="lFSStartOnWeekend", EmitDefaultValue=false)]
        public int? LFSStartOnWeekend { get; set; }

        /// <summary>
        /// Gets or Sets LFSGracePeriodDays
        /// </summary>
        [DataMember(Name="lFSGracePeriodDays", EmitDefaultValue=false)]
        public int? LFSGracePeriodDays { get; set; }

        /// <summary>
        /// Gets or Sets LFSDayCleared
        /// </summary>
        [DataMember(Name="lFSDayCleared", EmitDefaultValue=false)]
        public int? LFSDayCleared { get; set; }

        /// <summary>
        /// Gets or Sets LFSDayClearedOtherDate
        /// </summary>
        [DataMember(Name="lFSDayClearedOtherDate", EmitDefaultValue=false)]
        public string LFSDayClearedOtherDate { get; set; }

        /// <summary>
        /// Gets or Sets LFSOtherDateValue
        /// </summary>
        [DataMember(Name="lFSOtherDateValue", EmitDefaultValue=false)]
        public string LFSOtherDateValue { get; set; }

        /// <summary>
        /// Gets or Sets LFSDayClearedOtherDateValue
        /// </summary>
        [DataMember(Name="lFSDayClearedOtherDateValue", EmitDefaultValue=false)]
        public string LFSDayClearedOtherDateValue { get; set; }

        /// <summary>
        /// Gets or Sets LFSLateFee
        /// </summary>
        [DataMember(Name="lFSLateFee", EmitDefaultValue=false)]
        public double? LFSLateFee { get; set; }

        /// <summary>
        /// Gets or Sets LFSAmount
        /// </summary>
        [DataMember(Name="lFSAmount", EmitDefaultValue=false)]
        public double? LFSAmount { get; set; }

        /// <summary>
        /// Gets or Sets CommitmentType
        /// </summary>
        [DataMember(Name="commitmentType", EmitDefaultValue=false)]
        public string CommitmentType { get; set; }

        /// <summary>
        /// Gets or Sets UnpaidPrincipalBalance
        /// </summary>
        [DataMember(Name="unpaidPrincipalBalance", EmitDefaultValue=false)]
        public double? UnpaidPrincipalBalance { get; set; }

        /// <summary>
        /// Gets or Sets OriginalPrincipalBalance
        /// </summary>
        [DataMember(Name="originalPrincipalBalance", EmitDefaultValue=false)]
        public double? OriginalPrincipalBalance { get; set; }

        /// <summary>
        /// Gets or Sets GracePeriodStartDate
        /// </summary>
        [DataMember(Name="gracePeriodStartDate", EmitDefaultValue=false)]
        public DateTime? GracePeriodStartDate { get; set; }

        /// <summary>
        /// Gets or Sets GracePeriodStartTrigger
        /// </summary>
        [DataMember(Name="gracePeriodStartTrigger", EmitDefaultValue=false)]
        public string GracePeriodStartTrigger { get; set; }

        /// <summary>
        /// Gets or Sets LateDaysEndTrigger
        /// </summary>
        [DataMember(Name="lateDaysEndTrigger", EmitDefaultValue=false)]
        public string LateDaysEndTrigger { get; set; }

        /// <summary>
        /// Gets or Sets SubmittedforPurchaseDate
        /// </summary>
        [DataMember(Name="submittedforPurchaseDate", EmitDefaultValue=false)]
        public DateTime? SubmittedforPurchaseDate { get; set; }

        /// <summary>
        /// Gets or Sets WithdrawnDate
        /// </summary>
        [DataMember(Name="withdrawnDate", EmitDefaultValue=false)]
        public DateTime? WithdrawnDate { get; set; }

        /// <summary>
        /// Gets or Sets CancelledDate
        /// </summary>
        [DataMember(Name="cancelledDate", EmitDefaultValue=false)]
        public DateTime? CancelledDate { get; set; }

        /// <summary>
        /// Gets or Sets VoidedDate
        /// </summary>
        [DataMember(Name="voidedDate", EmitDefaultValue=false)]
        public DateTime? VoidedDate { get; set; }

        /// <summary>
        /// Gets or Sets WithdrawalRequestedDate
        /// </summary>
        [DataMember(Name="withdrawalRequestedDate", EmitDefaultValue=false)]
        public DateTime? WithdrawalRequestedDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LoanContractCorrespondent {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CorrespondentStatus: ").Append(CorrespondentStatus).Append("\n");
            sb.Append("  ReceivedDate: ").Append(ReceivedDate).Append("\n");
            sb.Append("  InitialSuspenseDate: ").Append(InitialSuspenseDate).Append("\n");
            sb.Append("  LatestConditionsDate: ").Append(LatestConditionsDate).Append("\n");
            sb.Append("  ConditionsReceivedDate: ").Append(ConditionsReceivedDate).Append("\n");
            sb.Append("  ApprovedToFundDate: ").Append(ApprovedToFundDate).Append("\n");
            sb.Append("  FundedDate: ").Append(FundedDate).Append("\n");
            sb.Append("  Ratesheet: ").Append(Ratesheet).Append("\n");
            sb.Append("  BasePrice: ").Append(BasePrice).Append("\n");
            sb.Append("  NoteDate: ").Append(NoteDate).Append("\n");
            sb.Append("  DeliveryExpirationDate: ").Append(DeliveryExpirationDate).Append("\n");
            sb.Append("  GracePeriodDays: ").Append(GracePeriodDays).Append("\n");
            sb.Append("  LateDaysBegin: ").Append(LateDaysBegin).Append("\n");
            sb.Append("  LateDaysEnd: ").Append(LateDaysEnd).Append("\n");
            sb.Append("  TotalLateDays: ").Append(TotalLateDays).Append("\n");
            sb.Append("  LateFeePercentage: ").Append(LateFeePercentage).Append("\n");
            sb.Append("  AdditionalLateFeeCharge: ").Append(AdditionalLateFeeCharge).Append("\n");
            sb.Append("  LateFeeFrequency: ").Append(LateFeeFrequency).Append("\n");
            sb.Append("  LateFeeTotalPriceAdjustment: ").Append(LateFeeTotalPriceAdjustment).Append("\n");
            sb.Append("  LateFeeNotes: ").Append(LateFeeNotes).Append("\n");
            sb.Append("  LateFeeChargeType: ").Append(LateFeeChargeType).Append("\n");
            sb.Append("  TotalLateFee: ").Append(TotalLateFee).Append("\n");
            sb.Append("  DeliveryType: ").Append(DeliveryType).Append("\n");
            sb.Append("  RejectedDate: ").Append(RejectedDate).Append("\n");
            sb.Append("  LFSCalculateAs: ").Append(LFSCalculateAs).Append("\n");
            sb.Append("  LFSFeeHandledAs: ").Append(LFSFeeHandledAs).Append("\n");
            sb.Append("  LFSGracePeriodCalendar: ").Append(LFSGracePeriodCalendar).Append("\n");
            sb.Append("  LFSGracePeriodLaterOf: ").Append(LFSGracePeriodLaterOf).Append("\n");
            sb.Append("  LFSGracePeriodStarts: ").Append(LFSGracePeriodStarts).Append("\n");
            sb.Append("  LFSIncludeDay: ").Append(LFSIncludeDay).Append("\n");
            sb.Append("  LFSLateFeeBasedOn: ").Append(LFSLateFeeBasedOn).Append("\n");
            sb.Append("  LFSMaxLateDays: ").Append(LFSMaxLateDays).Append("\n");
            sb.Append("  LFSOtherDate: ").Append(LFSOtherDate).Append("\n");
            sb.Append("  LFSStartOnWeekend: ").Append(LFSStartOnWeekend).Append("\n");
            sb.Append("  LFSGracePeriodDays: ").Append(LFSGracePeriodDays).Append("\n");
            sb.Append("  LFSDayCleared: ").Append(LFSDayCleared).Append("\n");
            sb.Append("  LFSDayClearedOtherDate: ").Append(LFSDayClearedOtherDate).Append("\n");
            sb.Append("  LFSOtherDateValue: ").Append(LFSOtherDateValue).Append("\n");
            sb.Append("  LFSDayClearedOtherDateValue: ").Append(LFSDayClearedOtherDateValue).Append("\n");
            sb.Append("  LFSLateFee: ").Append(LFSLateFee).Append("\n");
            sb.Append("  LFSAmount: ").Append(LFSAmount).Append("\n");
            sb.Append("  CommitmentType: ").Append(CommitmentType).Append("\n");
            sb.Append("  UnpaidPrincipalBalance: ").Append(UnpaidPrincipalBalance).Append("\n");
            sb.Append("  OriginalPrincipalBalance: ").Append(OriginalPrincipalBalance).Append("\n");
            sb.Append("  GracePeriodStartDate: ").Append(GracePeriodStartDate).Append("\n");
            sb.Append("  GracePeriodStartTrigger: ").Append(GracePeriodStartTrigger).Append("\n");
            sb.Append("  LateDaysEndTrigger: ").Append(LateDaysEndTrigger).Append("\n");
            sb.Append("  SubmittedforPurchaseDate: ").Append(SubmittedforPurchaseDate).Append("\n");
            sb.Append("  WithdrawnDate: ").Append(WithdrawnDate).Append("\n");
            sb.Append("  CancelledDate: ").Append(CancelledDate).Append("\n");
            sb.Append("  VoidedDate: ").Append(VoidedDate).Append("\n");
            sb.Append("  WithdrawalRequestedDate: ").Append(WithdrawalRequestedDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LoanContractCorrespondent);
        }

        /// <summary>
        /// Returns true if LoanContractCorrespondent instances are equal
        /// </summary>
        /// <param name="input">Instance of LoanContractCorrespondent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoanContractCorrespondent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CorrespondentStatus == input.CorrespondentStatus ||
                    (this.CorrespondentStatus != null &&
                    this.CorrespondentStatus.Equals(input.CorrespondentStatus))
                ) && 
                (
                    this.ReceivedDate == input.ReceivedDate ||
                    (this.ReceivedDate != null &&
                    this.ReceivedDate.Equals(input.ReceivedDate))
                ) && 
                (
                    this.InitialSuspenseDate == input.InitialSuspenseDate ||
                    (this.InitialSuspenseDate != null &&
                    this.InitialSuspenseDate.Equals(input.InitialSuspenseDate))
                ) && 
                (
                    this.LatestConditionsDate == input.LatestConditionsDate ||
                    (this.LatestConditionsDate != null &&
                    this.LatestConditionsDate.Equals(input.LatestConditionsDate))
                ) && 
                (
                    this.ConditionsReceivedDate == input.ConditionsReceivedDate ||
                    (this.ConditionsReceivedDate != null &&
                    this.ConditionsReceivedDate.Equals(input.ConditionsReceivedDate))
                ) && 
                (
                    this.ApprovedToFundDate == input.ApprovedToFundDate ||
                    (this.ApprovedToFundDate != null &&
                    this.ApprovedToFundDate.Equals(input.ApprovedToFundDate))
                ) && 
                (
                    this.FundedDate == input.FundedDate ||
                    (this.FundedDate != null &&
                    this.FundedDate.Equals(input.FundedDate))
                ) && 
                (
                    this.Ratesheet == input.Ratesheet ||
                    (this.Ratesheet != null &&
                    this.Ratesheet.Equals(input.Ratesheet))
                ) && 
                (
                    this.BasePrice == input.BasePrice ||
                    (this.BasePrice != null &&
                    this.BasePrice.Equals(input.BasePrice))
                ) && 
                (
                    this.NoteDate == input.NoteDate ||
                    (this.NoteDate != null &&
                    this.NoteDate.Equals(input.NoteDate))
                ) && 
                (
                    this.DeliveryExpirationDate == input.DeliveryExpirationDate ||
                    (this.DeliveryExpirationDate != null &&
                    this.DeliveryExpirationDate.Equals(input.DeliveryExpirationDate))
                ) && 
                (
                    this.GracePeriodDays == input.GracePeriodDays ||
                    (this.GracePeriodDays != null &&
                    this.GracePeriodDays.Equals(input.GracePeriodDays))
                ) && 
                (
                    this.LateDaysBegin == input.LateDaysBegin ||
                    (this.LateDaysBegin != null &&
                    this.LateDaysBegin.Equals(input.LateDaysBegin))
                ) && 
                (
                    this.LateDaysEnd == input.LateDaysEnd ||
                    (this.LateDaysEnd != null &&
                    this.LateDaysEnd.Equals(input.LateDaysEnd))
                ) && 
                (
                    this.TotalLateDays == input.TotalLateDays ||
                    (this.TotalLateDays != null &&
                    this.TotalLateDays.Equals(input.TotalLateDays))
                ) && 
                (
                    this.LateFeePercentage == input.LateFeePercentage ||
                    (this.LateFeePercentage != null &&
                    this.LateFeePercentage.Equals(input.LateFeePercentage))
                ) && 
                (
                    this.AdditionalLateFeeCharge == input.AdditionalLateFeeCharge ||
                    (this.AdditionalLateFeeCharge != null &&
                    this.AdditionalLateFeeCharge.Equals(input.AdditionalLateFeeCharge))
                ) && 
                (
                    this.LateFeeFrequency == input.LateFeeFrequency ||
                    (this.LateFeeFrequency != null &&
                    this.LateFeeFrequency.Equals(input.LateFeeFrequency))
                ) && 
                (
                    this.LateFeeTotalPriceAdjustment == input.LateFeeTotalPriceAdjustment ||
                    (this.LateFeeTotalPriceAdjustment != null &&
                    this.LateFeeTotalPriceAdjustment.Equals(input.LateFeeTotalPriceAdjustment))
                ) && 
                (
                    this.LateFeeNotes == input.LateFeeNotes ||
                    (this.LateFeeNotes != null &&
                    this.LateFeeNotes.Equals(input.LateFeeNotes))
                ) && 
                (
                    this.LateFeeChargeType == input.LateFeeChargeType ||
                    (this.LateFeeChargeType != null &&
                    this.LateFeeChargeType.Equals(input.LateFeeChargeType))
                ) && 
                (
                    this.TotalLateFee == input.TotalLateFee ||
                    (this.TotalLateFee != null &&
                    this.TotalLateFee.Equals(input.TotalLateFee))
                ) && 
                (
                    this.DeliveryType == input.DeliveryType ||
                    (this.DeliveryType != null &&
                    this.DeliveryType.Equals(input.DeliveryType))
                ) && 
                (
                    this.RejectedDate == input.RejectedDate ||
                    (this.RejectedDate != null &&
                    this.RejectedDate.Equals(input.RejectedDate))
                ) && 
                (
                    this.LFSCalculateAs == input.LFSCalculateAs ||
                    (this.LFSCalculateAs != null &&
                    this.LFSCalculateAs.Equals(input.LFSCalculateAs))
                ) && 
                (
                    this.LFSFeeHandledAs == input.LFSFeeHandledAs ||
                    (this.LFSFeeHandledAs != null &&
                    this.LFSFeeHandledAs.Equals(input.LFSFeeHandledAs))
                ) && 
                (
                    this.LFSGracePeriodCalendar == input.LFSGracePeriodCalendar ||
                    (this.LFSGracePeriodCalendar != null &&
                    this.LFSGracePeriodCalendar.Equals(input.LFSGracePeriodCalendar))
                ) && 
                (
                    this.LFSGracePeriodLaterOf == input.LFSGracePeriodLaterOf ||
                    (this.LFSGracePeriodLaterOf != null &&
                    this.LFSGracePeriodLaterOf.Equals(input.LFSGracePeriodLaterOf))
                ) && 
                (
                    this.LFSGracePeriodStarts == input.LFSGracePeriodStarts ||
                    (this.LFSGracePeriodStarts != null &&
                    this.LFSGracePeriodStarts.Equals(input.LFSGracePeriodStarts))
                ) && 
                (
                    this.LFSIncludeDay == input.LFSIncludeDay ||
                    (this.LFSIncludeDay != null &&
                    this.LFSIncludeDay.Equals(input.LFSIncludeDay))
                ) && 
                (
                    this.LFSLateFeeBasedOn == input.LFSLateFeeBasedOn ||
                    (this.LFSLateFeeBasedOn != null &&
                    this.LFSLateFeeBasedOn.Equals(input.LFSLateFeeBasedOn))
                ) && 
                (
                    this.LFSMaxLateDays == input.LFSMaxLateDays ||
                    (this.LFSMaxLateDays != null &&
                    this.LFSMaxLateDays.Equals(input.LFSMaxLateDays))
                ) && 
                (
                    this.LFSOtherDate == input.LFSOtherDate ||
                    (this.LFSOtherDate != null &&
                    this.LFSOtherDate.Equals(input.LFSOtherDate))
                ) && 
                (
                    this.LFSStartOnWeekend == input.LFSStartOnWeekend ||
                    (this.LFSStartOnWeekend != null &&
                    this.LFSStartOnWeekend.Equals(input.LFSStartOnWeekend))
                ) && 
                (
                    this.LFSGracePeriodDays == input.LFSGracePeriodDays ||
                    (this.LFSGracePeriodDays != null &&
                    this.LFSGracePeriodDays.Equals(input.LFSGracePeriodDays))
                ) && 
                (
                    this.LFSDayCleared == input.LFSDayCleared ||
                    (this.LFSDayCleared != null &&
                    this.LFSDayCleared.Equals(input.LFSDayCleared))
                ) && 
                (
                    this.LFSDayClearedOtherDate == input.LFSDayClearedOtherDate ||
                    (this.LFSDayClearedOtherDate != null &&
                    this.LFSDayClearedOtherDate.Equals(input.LFSDayClearedOtherDate))
                ) && 
                (
                    this.LFSOtherDateValue == input.LFSOtherDateValue ||
                    (this.LFSOtherDateValue != null &&
                    this.LFSOtherDateValue.Equals(input.LFSOtherDateValue))
                ) && 
                (
                    this.LFSDayClearedOtherDateValue == input.LFSDayClearedOtherDateValue ||
                    (this.LFSDayClearedOtherDateValue != null &&
                    this.LFSDayClearedOtherDateValue.Equals(input.LFSDayClearedOtherDateValue))
                ) && 
                (
                    this.LFSLateFee == input.LFSLateFee ||
                    (this.LFSLateFee != null &&
                    this.LFSLateFee.Equals(input.LFSLateFee))
                ) && 
                (
                    this.LFSAmount == input.LFSAmount ||
                    (this.LFSAmount != null &&
                    this.LFSAmount.Equals(input.LFSAmount))
                ) && 
                (
                    this.CommitmentType == input.CommitmentType ||
                    (this.CommitmentType != null &&
                    this.CommitmentType.Equals(input.CommitmentType))
                ) && 
                (
                    this.UnpaidPrincipalBalance == input.UnpaidPrincipalBalance ||
                    (this.UnpaidPrincipalBalance != null &&
                    this.UnpaidPrincipalBalance.Equals(input.UnpaidPrincipalBalance))
                ) && 
                (
                    this.OriginalPrincipalBalance == input.OriginalPrincipalBalance ||
                    (this.OriginalPrincipalBalance != null &&
                    this.OriginalPrincipalBalance.Equals(input.OriginalPrincipalBalance))
                ) && 
                (
                    this.GracePeriodStartDate == input.GracePeriodStartDate ||
                    (this.GracePeriodStartDate != null &&
                    this.GracePeriodStartDate.Equals(input.GracePeriodStartDate))
                ) && 
                (
                    this.GracePeriodStartTrigger == input.GracePeriodStartTrigger ||
                    (this.GracePeriodStartTrigger != null &&
                    this.GracePeriodStartTrigger.Equals(input.GracePeriodStartTrigger))
                ) && 
                (
                    this.LateDaysEndTrigger == input.LateDaysEndTrigger ||
                    (this.LateDaysEndTrigger != null &&
                    this.LateDaysEndTrigger.Equals(input.LateDaysEndTrigger))
                ) && 
                (
                    this.SubmittedforPurchaseDate == input.SubmittedforPurchaseDate ||
                    (this.SubmittedforPurchaseDate != null &&
                    this.SubmittedforPurchaseDate.Equals(input.SubmittedforPurchaseDate))
                ) && 
                (
                    this.WithdrawnDate == input.WithdrawnDate ||
                    (this.WithdrawnDate != null &&
                    this.WithdrawnDate.Equals(input.WithdrawnDate))
                ) && 
                (
                    this.CancelledDate == input.CancelledDate ||
                    (this.CancelledDate != null &&
                    this.CancelledDate.Equals(input.CancelledDate))
                ) && 
                (
                    this.VoidedDate == input.VoidedDate ||
                    (this.VoidedDate != null &&
                    this.VoidedDate.Equals(input.VoidedDate))
                ) && 
                (
                    this.WithdrawalRequestedDate == input.WithdrawalRequestedDate ||
                    (this.WithdrawalRequestedDate != null &&
                    this.WithdrawalRequestedDate.Equals(input.WithdrawalRequestedDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CorrespondentStatus != null)
                    hashCode = hashCode * 59 + this.CorrespondentStatus.GetHashCode();
                if (this.ReceivedDate != null)
                    hashCode = hashCode * 59 + this.ReceivedDate.GetHashCode();
                if (this.InitialSuspenseDate != null)
                    hashCode = hashCode * 59 + this.InitialSuspenseDate.GetHashCode();
                if (this.LatestConditionsDate != null)
                    hashCode = hashCode * 59 + this.LatestConditionsDate.GetHashCode();
                if (this.ConditionsReceivedDate != null)
                    hashCode = hashCode * 59 + this.ConditionsReceivedDate.GetHashCode();
                if (this.ApprovedToFundDate != null)
                    hashCode = hashCode * 59 + this.ApprovedToFundDate.GetHashCode();
                if (this.FundedDate != null)
                    hashCode = hashCode * 59 + this.FundedDate.GetHashCode();
                if (this.Ratesheet != null)
                    hashCode = hashCode * 59 + this.Ratesheet.GetHashCode();
                if (this.BasePrice != null)
                    hashCode = hashCode * 59 + this.BasePrice.GetHashCode();
                if (this.NoteDate != null)
                    hashCode = hashCode * 59 + this.NoteDate.GetHashCode();
                if (this.DeliveryExpirationDate != null)
                    hashCode = hashCode * 59 + this.DeliveryExpirationDate.GetHashCode();
                if (this.GracePeriodDays != null)
                    hashCode = hashCode * 59 + this.GracePeriodDays.GetHashCode();
                if (this.LateDaysBegin != null)
                    hashCode = hashCode * 59 + this.LateDaysBegin.GetHashCode();
                if (this.LateDaysEnd != null)
                    hashCode = hashCode * 59 + this.LateDaysEnd.GetHashCode();
                if (this.TotalLateDays != null)
                    hashCode = hashCode * 59 + this.TotalLateDays.GetHashCode();
                if (this.LateFeePercentage != null)
                    hashCode = hashCode * 59 + this.LateFeePercentage.GetHashCode();
                if (this.AdditionalLateFeeCharge != null)
                    hashCode = hashCode * 59 + this.AdditionalLateFeeCharge.GetHashCode();
                if (this.LateFeeFrequency != null)
                    hashCode = hashCode * 59 + this.LateFeeFrequency.GetHashCode();
                if (this.LateFeeTotalPriceAdjustment != null)
                    hashCode = hashCode * 59 + this.LateFeeTotalPriceAdjustment.GetHashCode();
                if (this.LateFeeNotes != null)
                    hashCode = hashCode * 59 + this.LateFeeNotes.GetHashCode();
                if (this.LateFeeChargeType != null)
                    hashCode = hashCode * 59 + this.LateFeeChargeType.GetHashCode();
                if (this.TotalLateFee != null)
                    hashCode = hashCode * 59 + this.TotalLateFee.GetHashCode();
                if (this.DeliveryType != null)
                    hashCode = hashCode * 59 + this.DeliveryType.GetHashCode();
                if (this.RejectedDate != null)
                    hashCode = hashCode * 59 + this.RejectedDate.GetHashCode();
                if (this.LFSCalculateAs != null)
                    hashCode = hashCode * 59 + this.LFSCalculateAs.GetHashCode();
                if (this.LFSFeeHandledAs != null)
                    hashCode = hashCode * 59 + this.LFSFeeHandledAs.GetHashCode();
                if (this.LFSGracePeriodCalendar != null)
                    hashCode = hashCode * 59 + this.LFSGracePeriodCalendar.GetHashCode();
                if (this.LFSGracePeriodLaterOf != null)
                    hashCode = hashCode * 59 + this.LFSGracePeriodLaterOf.GetHashCode();
                if (this.LFSGracePeriodStarts != null)
                    hashCode = hashCode * 59 + this.LFSGracePeriodStarts.GetHashCode();
                if (this.LFSIncludeDay != null)
                    hashCode = hashCode * 59 + this.LFSIncludeDay.GetHashCode();
                if (this.LFSLateFeeBasedOn != null)
                    hashCode = hashCode * 59 + this.LFSLateFeeBasedOn.GetHashCode();
                if (this.LFSMaxLateDays != null)
                    hashCode = hashCode * 59 + this.LFSMaxLateDays.GetHashCode();
                if (this.LFSOtherDate != null)
                    hashCode = hashCode * 59 + this.LFSOtherDate.GetHashCode();
                if (this.LFSStartOnWeekend != null)
                    hashCode = hashCode * 59 + this.LFSStartOnWeekend.GetHashCode();
                if (this.LFSGracePeriodDays != null)
                    hashCode = hashCode * 59 + this.LFSGracePeriodDays.GetHashCode();
                if (this.LFSDayCleared != null)
                    hashCode = hashCode * 59 + this.LFSDayCleared.GetHashCode();
                if (this.LFSDayClearedOtherDate != null)
                    hashCode = hashCode * 59 + this.LFSDayClearedOtherDate.GetHashCode();
                if (this.LFSOtherDateValue != null)
                    hashCode = hashCode * 59 + this.LFSOtherDateValue.GetHashCode();
                if (this.LFSDayClearedOtherDateValue != null)
                    hashCode = hashCode * 59 + this.LFSDayClearedOtherDateValue.GetHashCode();
                if (this.LFSLateFee != null)
                    hashCode = hashCode * 59 + this.LFSLateFee.GetHashCode();
                if (this.LFSAmount != null)
                    hashCode = hashCode * 59 + this.LFSAmount.GetHashCode();
                if (this.CommitmentType != null)
                    hashCode = hashCode * 59 + this.CommitmentType.GetHashCode();
                if (this.UnpaidPrincipalBalance != null)
                    hashCode = hashCode * 59 + this.UnpaidPrincipalBalance.GetHashCode();
                if (this.OriginalPrincipalBalance != null)
                    hashCode = hashCode * 59 + this.OriginalPrincipalBalance.GetHashCode();
                if (this.GracePeriodStartDate != null)
                    hashCode = hashCode * 59 + this.GracePeriodStartDate.GetHashCode();
                if (this.GracePeriodStartTrigger != null)
                    hashCode = hashCode * 59 + this.GracePeriodStartTrigger.GetHashCode();
                if (this.LateDaysEndTrigger != null)
                    hashCode = hashCode * 59 + this.LateDaysEndTrigger.GetHashCode();
                if (this.SubmittedforPurchaseDate != null)
                    hashCode = hashCode * 59 + this.SubmittedforPurchaseDate.GetHashCode();
                if (this.WithdrawnDate != null)
                    hashCode = hashCode * 59 + this.WithdrawnDate.GetHashCode();
                if (this.CancelledDate != null)
                    hashCode = hashCode * 59 + this.CancelledDate.GetHashCode();
                if (this.VoidedDate != null)
                    hashCode = hashCode * 59 + this.VoidedDate.GetHashCode();
                if (this.WithdrawalRequestedDate != null)
                    hashCode = hashCode * 59 + this.WithdrawalRequestedDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
