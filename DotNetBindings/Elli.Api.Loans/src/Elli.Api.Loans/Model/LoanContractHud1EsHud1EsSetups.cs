/*
* Copyright 2017 Ellie Mae, Inc.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*
*  1. Redistributions of source code must retain the above copyright notice,
*     this list of conditions and the following disclaimer.
*
*  2. Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*  3. Neither the name of the copyright holder nor the names of its
*     contributors may be used to endorse or promote products derived from this
*     software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.
*/


/* 
 * Loan
 *
 * Returns the entire loan or specific entities of a loan.
 *
 * OpenAPI spec version: 1.4.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Elli.Api.Loans.Client.SwaggerDateConverter;

namespace Elli.Api.Loans.Model
{
    /// <summary>
    /// LoanContractHud1EsHud1EsSetups
    /// </summary>
    [DataContract]
    public partial class LoanContractHud1EsHud1EsSetups :  IEquatable<LoanContractHud1EsHud1EsSetups>, IValidatableObject
    {
    
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets AnnualFeePrepaid
        /// </summary>
        [DataMember(Name="annualFeePrepaid", EmitDefaultValue=false)]
        public bool? AnnualFeePrepaid { get; set; }

        /// <summary>
        /// Gets or Sets AnnualFees
        /// </summary>
        [DataMember(Name="annualFees", EmitDefaultValue=false)]
        public int? AnnualFees { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public string Date { get; set; }

        /// <summary>
        /// Gets or Sets FloodInsDisb
        /// </summary>
        [DataMember(Name="floodInsDisb", EmitDefaultValue=false)]
        public int? FloodInsDisb { get; set; }

        /// <summary>
        /// Gets or Sets FloodInsPrepaid
        /// </summary>
        [DataMember(Name="floodInsPrepaid", EmitDefaultValue=false)]
        public bool? FloodInsPrepaid { get; set; }

        /// <summary>
        /// Gets or Sets HazInsDisb
        /// </summary>
        [DataMember(Name="hazInsDisb", EmitDefaultValue=false)]
        public int? HazInsDisb { get; set; }

        /// <summary>
        /// Gets or Sets HazInsPrepaid
        /// </summary>
        [DataMember(Name="hazInsPrepaid", EmitDefaultValue=false)]
        public bool? HazInsPrepaid { get; set; }

        /// <summary>
        /// Gets or Sets Hud1EsSetupIndex
        /// </summary>
        [DataMember(Name="hud1EsSetupIndex", EmitDefaultValue=false)]
        public int? Hud1EsSetupIndex { get; set; }

        /// <summary>
        /// Gets or Sets MtgInsDisb
        /// </summary>
        [DataMember(Name="mtgInsDisb", EmitDefaultValue=false)]
        public int? MtgInsDisb { get; set; }

        /// <summary>
        /// Gets or Sets MtgInsPrepaid
        /// </summary>
        [DataMember(Name="mtgInsPrepaid", EmitDefaultValue=false)]
        public bool? MtgInsPrepaid { get; set; }

        /// <summary>
        /// Gets or Sets SchoolTaxes
        /// </summary>
        [DataMember(Name="schoolTaxes", EmitDefaultValue=false)]
        public int? SchoolTaxes { get; set; }

        /// <summary>
        /// Gets or Sets SchoolTaxesPrepaid
        /// </summary>
        [DataMember(Name="schoolTaxesPrepaid", EmitDefaultValue=false)]
        public bool? SchoolTaxesPrepaid { get; set; }

        /// <summary>
        /// Gets or Sets TaxDisb
        /// </summary>
        [DataMember(Name="taxDisb", EmitDefaultValue=false)]
        public int? TaxDisb { get; set; }

        /// <summary>
        /// Gets or Sets TaxPrepaid
        /// </summary>
        [DataMember(Name="taxPrepaid", EmitDefaultValue=false)]
        public bool? TaxPrepaid { get; set; }

        /// <summary>
        /// Gets or Sets UserDefined1
        /// </summary>
        [DataMember(Name="userDefined1", EmitDefaultValue=false)]
        public int? UserDefined1 { get; set; }

        /// <summary>
        /// Gets or Sets UserDefined2
        /// </summary>
        [DataMember(Name="userDefined2", EmitDefaultValue=false)]
        public int? UserDefined2 { get; set; }

        /// <summary>
        /// Gets or Sets UserDefined3
        /// </summary>
        [DataMember(Name="userDefined3", EmitDefaultValue=false)]
        public int? UserDefined3 { get; set; }

        /// <summary>
        /// Gets or Sets UserDefinedPrepaid1
        /// </summary>
        [DataMember(Name="userDefinedPrepaid1", EmitDefaultValue=false)]
        public bool? UserDefinedPrepaid1 { get; set; }

        /// <summary>
        /// Gets or Sets UserDefinedPrepaid2
        /// </summary>
        [DataMember(Name="userDefinedPrepaid2", EmitDefaultValue=false)]
        public bool? UserDefinedPrepaid2 { get; set; }

        /// <summary>
        /// Gets or Sets UserDefinedPrepaid3
        /// </summary>
        [DataMember(Name="userDefinedPrepaid3", EmitDefaultValue=false)]
        public bool? UserDefinedPrepaid3 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LoanContractHud1EsHud1EsSetups {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AnnualFeePrepaid: ").Append(AnnualFeePrepaid).Append("\n");
            sb.Append("  AnnualFees: ").Append(AnnualFees).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  FloodInsDisb: ").Append(FloodInsDisb).Append("\n");
            sb.Append("  FloodInsPrepaid: ").Append(FloodInsPrepaid).Append("\n");
            sb.Append("  HazInsDisb: ").Append(HazInsDisb).Append("\n");
            sb.Append("  HazInsPrepaid: ").Append(HazInsPrepaid).Append("\n");
            sb.Append("  Hud1EsSetupIndex: ").Append(Hud1EsSetupIndex).Append("\n");
            sb.Append("  MtgInsDisb: ").Append(MtgInsDisb).Append("\n");
            sb.Append("  MtgInsPrepaid: ").Append(MtgInsPrepaid).Append("\n");
            sb.Append("  SchoolTaxes: ").Append(SchoolTaxes).Append("\n");
            sb.Append("  SchoolTaxesPrepaid: ").Append(SchoolTaxesPrepaid).Append("\n");
            sb.Append("  TaxDisb: ").Append(TaxDisb).Append("\n");
            sb.Append("  TaxPrepaid: ").Append(TaxPrepaid).Append("\n");
            sb.Append("  UserDefined1: ").Append(UserDefined1).Append("\n");
            sb.Append("  UserDefined2: ").Append(UserDefined2).Append("\n");
            sb.Append("  UserDefined3: ").Append(UserDefined3).Append("\n");
            sb.Append("  UserDefinedPrepaid1: ").Append(UserDefinedPrepaid1).Append("\n");
            sb.Append("  UserDefinedPrepaid2: ").Append(UserDefinedPrepaid2).Append("\n");
            sb.Append("  UserDefinedPrepaid3: ").Append(UserDefinedPrepaid3).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LoanContractHud1EsHud1EsSetups);
        }

        /// <summary>
        /// Returns true if LoanContractHud1EsHud1EsSetups instances are equal
        /// </summary>
        /// <param name="input">Instance of LoanContractHud1EsHud1EsSetups to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoanContractHud1EsHud1EsSetups input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.AnnualFeePrepaid == input.AnnualFeePrepaid ||
                    (this.AnnualFeePrepaid != null &&
                    this.AnnualFeePrepaid.Equals(input.AnnualFeePrepaid))
                ) && 
                (
                    this.AnnualFees == input.AnnualFees ||
                    (this.AnnualFees != null &&
                    this.AnnualFees.Equals(input.AnnualFees))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.FloodInsDisb == input.FloodInsDisb ||
                    (this.FloodInsDisb != null &&
                    this.FloodInsDisb.Equals(input.FloodInsDisb))
                ) && 
                (
                    this.FloodInsPrepaid == input.FloodInsPrepaid ||
                    (this.FloodInsPrepaid != null &&
                    this.FloodInsPrepaid.Equals(input.FloodInsPrepaid))
                ) && 
                (
                    this.HazInsDisb == input.HazInsDisb ||
                    (this.HazInsDisb != null &&
                    this.HazInsDisb.Equals(input.HazInsDisb))
                ) && 
                (
                    this.HazInsPrepaid == input.HazInsPrepaid ||
                    (this.HazInsPrepaid != null &&
                    this.HazInsPrepaid.Equals(input.HazInsPrepaid))
                ) && 
                (
                    this.Hud1EsSetupIndex == input.Hud1EsSetupIndex ||
                    (this.Hud1EsSetupIndex != null &&
                    this.Hud1EsSetupIndex.Equals(input.Hud1EsSetupIndex))
                ) && 
                (
                    this.MtgInsDisb == input.MtgInsDisb ||
                    (this.MtgInsDisb != null &&
                    this.MtgInsDisb.Equals(input.MtgInsDisb))
                ) && 
                (
                    this.MtgInsPrepaid == input.MtgInsPrepaid ||
                    (this.MtgInsPrepaid != null &&
                    this.MtgInsPrepaid.Equals(input.MtgInsPrepaid))
                ) && 
                (
                    this.SchoolTaxes == input.SchoolTaxes ||
                    (this.SchoolTaxes != null &&
                    this.SchoolTaxes.Equals(input.SchoolTaxes))
                ) && 
                (
                    this.SchoolTaxesPrepaid == input.SchoolTaxesPrepaid ||
                    (this.SchoolTaxesPrepaid != null &&
                    this.SchoolTaxesPrepaid.Equals(input.SchoolTaxesPrepaid))
                ) && 
                (
                    this.TaxDisb == input.TaxDisb ||
                    (this.TaxDisb != null &&
                    this.TaxDisb.Equals(input.TaxDisb))
                ) && 
                (
                    this.TaxPrepaid == input.TaxPrepaid ||
                    (this.TaxPrepaid != null &&
                    this.TaxPrepaid.Equals(input.TaxPrepaid))
                ) && 
                (
                    this.UserDefined1 == input.UserDefined1 ||
                    (this.UserDefined1 != null &&
                    this.UserDefined1.Equals(input.UserDefined1))
                ) && 
                (
                    this.UserDefined2 == input.UserDefined2 ||
                    (this.UserDefined2 != null &&
                    this.UserDefined2.Equals(input.UserDefined2))
                ) && 
                (
                    this.UserDefined3 == input.UserDefined3 ||
                    (this.UserDefined3 != null &&
                    this.UserDefined3.Equals(input.UserDefined3))
                ) && 
                (
                    this.UserDefinedPrepaid1 == input.UserDefinedPrepaid1 ||
                    (this.UserDefinedPrepaid1 != null &&
                    this.UserDefinedPrepaid1.Equals(input.UserDefinedPrepaid1))
                ) && 
                (
                    this.UserDefinedPrepaid2 == input.UserDefinedPrepaid2 ||
                    (this.UserDefinedPrepaid2 != null &&
                    this.UserDefinedPrepaid2.Equals(input.UserDefinedPrepaid2))
                ) && 
                (
                    this.UserDefinedPrepaid3 == input.UserDefinedPrepaid3 ||
                    (this.UserDefinedPrepaid3 != null &&
                    this.UserDefinedPrepaid3.Equals(input.UserDefinedPrepaid3))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.AnnualFeePrepaid != null)
                    hashCode = hashCode * 59 + this.AnnualFeePrepaid.GetHashCode();
                if (this.AnnualFees != null)
                    hashCode = hashCode * 59 + this.AnnualFees.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.FloodInsDisb != null)
                    hashCode = hashCode * 59 + this.FloodInsDisb.GetHashCode();
                if (this.FloodInsPrepaid != null)
                    hashCode = hashCode * 59 + this.FloodInsPrepaid.GetHashCode();
                if (this.HazInsDisb != null)
                    hashCode = hashCode * 59 + this.HazInsDisb.GetHashCode();
                if (this.HazInsPrepaid != null)
                    hashCode = hashCode * 59 + this.HazInsPrepaid.GetHashCode();
                if (this.Hud1EsSetupIndex != null)
                    hashCode = hashCode * 59 + this.Hud1EsSetupIndex.GetHashCode();
                if (this.MtgInsDisb != null)
                    hashCode = hashCode * 59 + this.MtgInsDisb.GetHashCode();
                if (this.MtgInsPrepaid != null)
                    hashCode = hashCode * 59 + this.MtgInsPrepaid.GetHashCode();
                if (this.SchoolTaxes != null)
                    hashCode = hashCode * 59 + this.SchoolTaxes.GetHashCode();
                if (this.SchoolTaxesPrepaid != null)
                    hashCode = hashCode * 59 + this.SchoolTaxesPrepaid.GetHashCode();
                if (this.TaxDisb != null)
                    hashCode = hashCode * 59 + this.TaxDisb.GetHashCode();
                if (this.TaxPrepaid != null)
                    hashCode = hashCode * 59 + this.TaxPrepaid.GetHashCode();
                if (this.UserDefined1 != null)
                    hashCode = hashCode * 59 + this.UserDefined1.GetHashCode();
                if (this.UserDefined2 != null)
                    hashCode = hashCode * 59 + this.UserDefined2.GetHashCode();
                if (this.UserDefined3 != null)
                    hashCode = hashCode * 59 + this.UserDefined3.GetHashCode();
                if (this.UserDefinedPrepaid1 != null)
                    hashCode = hashCode * 59 + this.UserDefinedPrepaid1.GetHashCode();
                if (this.UserDefinedPrepaid2 != null)
                    hashCode = hashCode * 59 + this.UserDefinedPrepaid2.GetHashCode();
                if (this.UserDefinedPrepaid3 != null)
                    hashCode = hashCode * 59 + this.UserDefinedPrepaid3.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
