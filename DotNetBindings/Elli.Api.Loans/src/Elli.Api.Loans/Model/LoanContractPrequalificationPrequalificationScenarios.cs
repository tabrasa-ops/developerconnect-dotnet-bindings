/*
* Copyright 2017 Ellie Mae, Inc.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*
*  1. Redistributions of source code must retain the above copyright notice,
*     this list of conditions and the following disclaimer.
*
*  2. Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*  3. Neither the name of the copyright holder nor the names of its
*     contributors may be used to endorse or promote products derived from this
*     software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.
*/


/* 
 * Loan
 *
 * Returns the entire loan or specific entities of a loan.
 *
 * OpenAPI spec version: 1.4.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Elli.Api.Loans.Client.SwaggerDateConverter;

namespace Elli.Api.Loans.Model
{
    /// <summary>
    /// LoanContractPrequalificationPrequalificationScenarios
    /// </summary>
    [DataContract]
    public partial class LoanContractPrequalificationPrequalificationScenarios :  IEquatable<LoanContractPrequalificationPrequalificationScenarios>, IValidatableObject
    {
    
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets AppraisedValue
        /// </summary>
        [DataMember(Name="appraisedValue", EmitDefaultValue=false)]
        public int? AppraisedValue { get; set; }

        /// <summary>
        /// Gets or Sets Apr
        /// </summary>
        [DataMember(Name="apr", EmitDefaultValue=false)]
        public double? Apr { get; set; }

        /// <summary>
        /// Gets or Sets CashToClose
        /// </summary>
        [DataMember(Name="cashToClose", EmitDefaultValue=false)]
        public double? CashToClose { get; set; }

        /// <summary>
        /// Gets or Sets ClosingCost
        /// </summary>
        [DataMember(Name="closingCost", EmitDefaultValue=false)]
        public double? ClosingCost { get; set; }

        /// <summary>
        /// Gets or Sets Cltv
        /// </summary>
        [DataMember(Name="cltv", EmitDefaultValue=false)]
        public double? Cltv { get; set; }

        /// <summary>
        /// Gets or Sets Comments
        /// </summary>
        [DataMember(Name="comments", EmitDefaultValue=false)]
        public string Comments { get; set; }

        /// <summary>
        /// Gets or Sets CreditScore
        /// </summary>
        [DataMember(Name="creditScore", EmitDefaultValue=false)]
        public string CreditScore { get; set; }

        /// <summary>
        /// Gets or Sets CurrentStatus
        /// </summary>
        [DataMember(Name="currentStatus", EmitDefaultValue=false)]
        public string CurrentStatus { get; set; }

        /// <summary>
        /// Gets or Sets DownPaymentAmount
        /// </summary>
        [DataMember(Name="downPaymentAmount", EmitDefaultValue=false)]
        public double? DownPaymentAmount { get; set; }

        /// <summary>
        /// Gets or Sets DownPaymentPercent
        /// </summary>
        [DataMember(Name="downPaymentPercent", EmitDefaultValue=false)]
        public double? DownPaymentPercent { get; set; }

        /// <summary>
        /// Gets or Sets FhaUpfrontMIPremiumPercent
        /// </summary>
        [DataMember(Name="fhaUpfrontMIPremiumPercent", EmitDefaultValue=false)]
        public double? FhaUpfrontMIPremiumPercent { get; set; }

        /// <summary>
        /// Gets or Sets GrossNegativeCashFlow
        /// </summary>
        [DataMember(Name="grossNegativeCashFlow", EmitDefaultValue=false)]
        public double? GrossNegativeCashFlow { get; set; }

        /// <summary>
        /// Gets or Sets LoanAmount
        /// </summary>
        [DataMember(Name="loanAmount", EmitDefaultValue=false)]
        public double? LoanAmount { get; set; }

        /// <summary>
        /// Gets or Sets Ltv
        /// </summary>
        [DataMember(Name="ltv", EmitDefaultValue=false)]
        public double? Ltv { get; set; }

        /// <summary>
        /// Gets or Sets MaximumDebt
        /// </summary>
        [DataMember(Name="maximumDebt", EmitDefaultValue=false)]
        public double? MaximumDebt { get; set; }

        /// <summary>
        /// Gets or Sets MaximumLoanAmount
        /// </summary>
        [DataMember(Name="maximumLoanAmount", EmitDefaultValue=false)]
        public double? MaximumLoanAmount { get; set; }

        /// <summary>
        /// Gets or Sets MiAndFundingFeeFinancedAmount
        /// </summary>
        [DataMember(Name="miAndFundingFeeFinancedAmount", EmitDefaultValue=false)]
        public double? MiAndFundingFeeFinancedAmount { get; set; }

        /// <summary>
        /// Gets or Sets MinimumIncome
        /// </summary>
        [DataMember(Name="minimumIncome", EmitDefaultValue=false)]
        public double? MinimumIncome { get; set; }

        /// <summary>
        /// Gets or Sets MonthlyPayment
        /// </summary>
        [DataMember(Name="monthlyPayment", EmitDefaultValue=false)]
        public double? MonthlyPayment { get; set; }

        /// <summary>
        /// Gets or Sets PrepaidItemsEstimatedAmount
        /// </summary>
        [DataMember(Name="prepaidItemsEstimatedAmount", EmitDefaultValue=false)]
        public double? PrepaidItemsEstimatedAmount { get; set; }

        /// <summary>
        /// Gets or Sets PrequalificationScenarioIndex
        /// </summary>
        [DataMember(Name="prequalificationScenarioIndex", EmitDefaultValue=false)]
        public int? PrequalificationScenarioIndex { get; set; }

        /// <summary>
        /// Gets or Sets QualBottomRatioPercent
        /// </summary>
        [DataMember(Name="qualBottomRatioPercent", EmitDefaultValue=false)]
        public double? QualBottomRatioPercent { get; set; }

        /// <summary>
        /// Gets or Sets QualTopRatioPercent
        /// </summary>
        [DataMember(Name="qualTopRatioPercent", EmitDefaultValue=false)]
        public double? QualTopRatioPercent { get; set; }

        /// <summary>
        /// Gets or Sets SalesPrice
        /// </summary>
        [DataMember(Name="salesPrice", EmitDefaultValue=false)]
        public double? SalesPrice { get; set; }

        /// <summary>
        /// Gets or Sets SubordinateFin
        /// </summary>
        [DataMember(Name="subordinateFin", EmitDefaultValue=false)]
        public double? SubordinateFin { get; set; }

        /// <summary>
        /// Gets or Sets TotalBaseCost
        /// </summary>
        [DataMember(Name="totalBaseCost", EmitDefaultValue=false)]
        public double? TotalBaseCost { get; set; }

        /// <summary>
        /// Gets or Sets TotalCashAvailable
        /// </summary>
        [DataMember(Name="totalCashAvailable", EmitDefaultValue=false)]
        public double? TotalCashAvailable { get; set; }

        /// <summary>
        /// Gets or Sets TotalCashLeft
        /// </summary>
        [DataMember(Name="totalCashLeft", EmitDefaultValue=false)]
        public double? TotalCashLeft { get; set; }

        /// <summary>
        /// Gets or Sets TotalCosts
        /// </summary>
        [DataMember(Name="totalCosts", EmitDefaultValue=false)]
        public double? TotalCosts { get; set; }

        /// <summary>
        /// Gets or Sets TotalFinancing
        /// </summary>
        [DataMember(Name="totalFinancing", EmitDefaultValue=false)]
        public double? TotalFinancing { get; set; }

        /// <summary>
        /// Gets or Sets TotalHe
        /// </summary>
        [DataMember(Name="totalHe", EmitDefaultValue=false)]
        public double? TotalHe { get; set; }

        /// <summary>
        /// Gets or Sets TotalIncome
        /// </summary>
        [DataMember(Name="totalIncome", EmitDefaultValue=false)]
        public double? TotalIncome { get; set; }

        /// <summary>
        /// Gets or Sets TotalLoanAmount
        /// </summary>
        [DataMember(Name="totalLoanAmount", EmitDefaultValue=false)]
        public double? TotalLoanAmount { get; set; }

        /// <summary>
        /// Gets or Sets TotalOtherExpense
        /// </summary>
        [DataMember(Name="totalOtherExpense", EmitDefaultValue=false)]
        public double? TotalOtherExpense { get; set; }

        /// <summary>
        /// Gets or Sets TotalPaidOffMortgage
        /// </summary>
        [DataMember(Name="totalPaidOffMortgage", EmitDefaultValue=false)]
        public double? TotalPaidOffMortgage { get; set; }

        /// <summary>
        /// Gets or Sets TotalPaidOffOthers
        /// </summary>
        [DataMember(Name="totalPaidOffOthers", EmitDefaultValue=false)]
        public double? TotalPaidOffOthers { get; set; }

        /// <summary>
        /// Gets or Sets TotalPayments
        /// </summary>
        [DataMember(Name="totalPayments", EmitDefaultValue=false)]
        public double? TotalPayments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LoanContractPrequalificationPrequalificationScenarios {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AppraisedValue: ").Append(AppraisedValue).Append("\n");
            sb.Append("  Apr: ").Append(Apr).Append("\n");
            sb.Append("  CashToClose: ").Append(CashToClose).Append("\n");
            sb.Append("  ClosingCost: ").Append(ClosingCost).Append("\n");
            sb.Append("  Cltv: ").Append(Cltv).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  CreditScore: ").Append(CreditScore).Append("\n");
            sb.Append("  CurrentStatus: ").Append(CurrentStatus).Append("\n");
            sb.Append("  DownPaymentAmount: ").Append(DownPaymentAmount).Append("\n");
            sb.Append("  DownPaymentPercent: ").Append(DownPaymentPercent).Append("\n");
            sb.Append("  FhaUpfrontMIPremiumPercent: ").Append(FhaUpfrontMIPremiumPercent).Append("\n");
            sb.Append("  GrossNegativeCashFlow: ").Append(GrossNegativeCashFlow).Append("\n");
            sb.Append("  LoanAmount: ").Append(LoanAmount).Append("\n");
            sb.Append("  Ltv: ").Append(Ltv).Append("\n");
            sb.Append("  MaximumDebt: ").Append(MaximumDebt).Append("\n");
            sb.Append("  MaximumLoanAmount: ").Append(MaximumLoanAmount).Append("\n");
            sb.Append("  MiAndFundingFeeFinancedAmount: ").Append(MiAndFundingFeeFinancedAmount).Append("\n");
            sb.Append("  MinimumIncome: ").Append(MinimumIncome).Append("\n");
            sb.Append("  MonthlyPayment: ").Append(MonthlyPayment).Append("\n");
            sb.Append("  PrepaidItemsEstimatedAmount: ").Append(PrepaidItemsEstimatedAmount).Append("\n");
            sb.Append("  PrequalificationScenarioIndex: ").Append(PrequalificationScenarioIndex).Append("\n");
            sb.Append("  QualBottomRatioPercent: ").Append(QualBottomRatioPercent).Append("\n");
            sb.Append("  QualTopRatioPercent: ").Append(QualTopRatioPercent).Append("\n");
            sb.Append("  SalesPrice: ").Append(SalesPrice).Append("\n");
            sb.Append("  SubordinateFin: ").Append(SubordinateFin).Append("\n");
            sb.Append("  TotalBaseCost: ").Append(TotalBaseCost).Append("\n");
            sb.Append("  TotalCashAvailable: ").Append(TotalCashAvailable).Append("\n");
            sb.Append("  TotalCashLeft: ").Append(TotalCashLeft).Append("\n");
            sb.Append("  TotalCosts: ").Append(TotalCosts).Append("\n");
            sb.Append("  TotalFinancing: ").Append(TotalFinancing).Append("\n");
            sb.Append("  TotalHe: ").Append(TotalHe).Append("\n");
            sb.Append("  TotalIncome: ").Append(TotalIncome).Append("\n");
            sb.Append("  TotalLoanAmount: ").Append(TotalLoanAmount).Append("\n");
            sb.Append("  TotalOtherExpense: ").Append(TotalOtherExpense).Append("\n");
            sb.Append("  TotalPaidOffMortgage: ").Append(TotalPaidOffMortgage).Append("\n");
            sb.Append("  TotalPaidOffOthers: ").Append(TotalPaidOffOthers).Append("\n");
            sb.Append("  TotalPayments: ").Append(TotalPayments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LoanContractPrequalificationPrequalificationScenarios);
        }

        /// <summary>
        /// Returns true if LoanContractPrequalificationPrequalificationScenarios instances are equal
        /// </summary>
        /// <param name="input">Instance of LoanContractPrequalificationPrequalificationScenarios to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoanContractPrequalificationPrequalificationScenarios input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.AppraisedValue == input.AppraisedValue ||
                    (this.AppraisedValue != null &&
                    this.AppraisedValue.Equals(input.AppraisedValue))
                ) && 
                (
                    this.Apr == input.Apr ||
                    (this.Apr != null &&
                    this.Apr.Equals(input.Apr))
                ) && 
                (
                    this.CashToClose == input.CashToClose ||
                    (this.CashToClose != null &&
                    this.CashToClose.Equals(input.CashToClose))
                ) && 
                (
                    this.ClosingCost == input.ClosingCost ||
                    (this.ClosingCost != null &&
                    this.ClosingCost.Equals(input.ClosingCost))
                ) && 
                (
                    this.Cltv == input.Cltv ||
                    (this.Cltv != null &&
                    this.Cltv.Equals(input.Cltv))
                ) && 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                ) && 
                (
                    this.CreditScore == input.CreditScore ||
                    (this.CreditScore != null &&
                    this.CreditScore.Equals(input.CreditScore))
                ) && 
                (
                    this.CurrentStatus == input.CurrentStatus ||
                    (this.CurrentStatus != null &&
                    this.CurrentStatus.Equals(input.CurrentStatus))
                ) && 
                (
                    this.DownPaymentAmount == input.DownPaymentAmount ||
                    (this.DownPaymentAmount != null &&
                    this.DownPaymentAmount.Equals(input.DownPaymentAmount))
                ) && 
                (
                    this.DownPaymentPercent == input.DownPaymentPercent ||
                    (this.DownPaymentPercent != null &&
                    this.DownPaymentPercent.Equals(input.DownPaymentPercent))
                ) && 
                (
                    this.FhaUpfrontMIPremiumPercent == input.FhaUpfrontMIPremiumPercent ||
                    (this.FhaUpfrontMIPremiumPercent != null &&
                    this.FhaUpfrontMIPremiumPercent.Equals(input.FhaUpfrontMIPremiumPercent))
                ) && 
                (
                    this.GrossNegativeCashFlow == input.GrossNegativeCashFlow ||
                    (this.GrossNegativeCashFlow != null &&
                    this.GrossNegativeCashFlow.Equals(input.GrossNegativeCashFlow))
                ) && 
                (
                    this.LoanAmount == input.LoanAmount ||
                    (this.LoanAmount != null &&
                    this.LoanAmount.Equals(input.LoanAmount))
                ) && 
                (
                    this.Ltv == input.Ltv ||
                    (this.Ltv != null &&
                    this.Ltv.Equals(input.Ltv))
                ) && 
                (
                    this.MaximumDebt == input.MaximumDebt ||
                    (this.MaximumDebt != null &&
                    this.MaximumDebt.Equals(input.MaximumDebt))
                ) && 
                (
                    this.MaximumLoanAmount == input.MaximumLoanAmount ||
                    (this.MaximumLoanAmount != null &&
                    this.MaximumLoanAmount.Equals(input.MaximumLoanAmount))
                ) && 
                (
                    this.MiAndFundingFeeFinancedAmount == input.MiAndFundingFeeFinancedAmount ||
                    (this.MiAndFundingFeeFinancedAmount != null &&
                    this.MiAndFundingFeeFinancedAmount.Equals(input.MiAndFundingFeeFinancedAmount))
                ) && 
                (
                    this.MinimumIncome == input.MinimumIncome ||
                    (this.MinimumIncome != null &&
                    this.MinimumIncome.Equals(input.MinimumIncome))
                ) && 
                (
                    this.MonthlyPayment == input.MonthlyPayment ||
                    (this.MonthlyPayment != null &&
                    this.MonthlyPayment.Equals(input.MonthlyPayment))
                ) && 
                (
                    this.PrepaidItemsEstimatedAmount == input.PrepaidItemsEstimatedAmount ||
                    (this.PrepaidItemsEstimatedAmount != null &&
                    this.PrepaidItemsEstimatedAmount.Equals(input.PrepaidItemsEstimatedAmount))
                ) && 
                (
                    this.PrequalificationScenarioIndex == input.PrequalificationScenarioIndex ||
                    (this.PrequalificationScenarioIndex != null &&
                    this.PrequalificationScenarioIndex.Equals(input.PrequalificationScenarioIndex))
                ) && 
                (
                    this.QualBottomRatioPercent == input.QualBottomRatioPercent ||
                    (this.QualBottomRatioPercent != null &&
                    this.QualBottomRatioPercent.Equals(input.QualBottomRatioPercent))
                ) && 
                (
                    this.QualTopRatioPercent == input.QualTopRatioPercent ||
                    (this.QualTopRatioPercent != null &&
                    this.QualTopRatioPercent.Equals(input.QualTopRatioPercent))
                ) && 
                (
                    this.SalesPrice == input.SalesPrice ||
                    (this.SalesPrice != null &&
                    this.SalesPrice.Equals(input.SalesPrice))
                ) && 
                (
                    this.SubordinateFin == input.SubordinateFin ||
                    (this.SubordinateFin != null &&
                    this.SubordinateFin.Equals(input.SubordinateFin))
                ) && 
                (
                    this.TotalBaseCost == input.TotalBaseCost ||
                    (this.TotalBaseCost != null &&
                    this.TotalBaseCost.Equals(input.TotalBaseCost))
                ) && 
                (
                    this.TotalCashAvailable == input.TotalCashAvailable ||
                    (this.TotalCashAvailable != null &&
                    this.TotalCashAvailable.Equals(input.TotalCashAvailable))
                ) && 
                (
                    this.TotalCashLeft == input.TotalCashLeft ||
                    (this.TotalCashLeft != null &&
                    this.TotalCashLeft.Equals(input.TotalCashLeft))
                ) && 
                (
                    this.TotalCosts == input.TotalCosts ||
                    (this.TotalCosts != null &&
                    this.TotalCosts.Equals(input.TotalCosts))
                ) && 
                (
                    this.TotalFinancing == input.TotalFinancing ||
                    (this.TotalFinancing != null &&
                    this.TotalFinancing.Equals(input.TotalFinancing))
                ) && 
                (
                    this.TotalHe == input.TotalHe ||
                    (this.TotalHe != null &&
                    this.TotalHe.Equals(input.TotalHe))
                ) && 
                (
                    this.TotalIncome == input.TotalIncome ||
                    (this.TotalIncome != null &&
                    this.TotalIncome.Equals(input.TotalIncome))
                ) && 
                (
                    this.TotalLoanAmount == input.TotalLoanAmount ||
                    (this.TotalLoanAmount != null &&
                    this.TotalLoanAmount.Equals(input.TotalLoanAmount))
                ) && 
                (
                    this.TotalOtherExpense == input.TotalOtherExpense ||
                    (this.TotalOtherExpense != null &&
                    this.TotalOtherExpense.Equals(input.TotalOtherExpense))
                ) && 
                (
                    this.TotalPaidOffMortgage == input.TotalPaidOffMortgage ||
                    (this.TotalPaidOffMortgage != null &&
                    this.TotalPaidOffMortgage.Equals(input.TotalPaidOffMortgage))
                ) && 
                (
                    this.TotalPaidOffOthers == input.TotalPaidOffOthers ||
                    (this.TotalPaidOffOthers != null &&
                    this.TotalPaidOffOthers.Equals(input.TotalPaidOffOthers))
                ) && 
                (
                    this.TotalPayments == input.TotalPayments ||
                    (this.TotalPayments != null &&
                    this.TotalPayments.Equals(input.TotalPayments))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.AppraisedValue != null)
                    hashCode = hashCode * 59 + this.AppraisedValue.GetHashCode();
                if (this.Apr != null)
                    hashCode = hashCode * 59 + this.Apr.GetHashCode();
                if (this.CashToClose != null)
                    hashCode = hashCode * 59 + this.CashToClose.GetHashCode();
                if (this.ClosingCost != null)
                    hashCode = hashCode * 59 + this.ClosingCost.GetHashCode();
                if (this.Cltv != null)
                    hashCode = hashCode * 59 + this.Cltv.GetHashCode();
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                if (this.CreditScore != null)
                    hashCode = hashCode * 59 + this.CreditScore.GetHashCode();
                if (this.CurrentStatus != null)
                    hashCode = hashCode * 59 + this.CurrentStatus.GetHashCode();
                if (this.DownPaymentAmount != null)
                    hashCode = hashCode * 59 + this.DownPaymentAmount.GetHashCode();
                if (this.DownPaymentPercent != null)
                    hashCode = hashCode * 59 + this.DownPaymentPercent.GetHashCode();
                if (this.FhaUpfrontMIPremiumPercent != null)
                    hashCode = hashCode * 59 + this.FhaUpfrontMIPremiumPercent.GetHashCode();
                if (this.GrossNegativeCashFlow != null)
                    hashCode = hashCode * 59 + this.GrossNegativeCashFlow.GetHashCode();
                if (this.LoanAmount != null)
                    hashCode = hashCode * 59 + this.LoanAmount.GetHashCode();
                if (this.Ltv != null)
                    hashCode = hashCode * 59 + this.Ltv.GetHashCode();
                if (this.MaximumDebt != null)
                    hashCode = hashCode * 59 + this.MaximumDebt.GetHashCode();
                if (this.MaximumLoanAmount != null)
                    hashCode = hashCode * 59 + this.MaximumLoanAmount.GetHashCode();
                if (this.MiAndFundingFeeFinancedAmount != null)
                    hashCode = hashCode * 59 + this.MiAndFundingFeeFinancedAmount.GetHashCode();
                if (this.MinimumIncome != null)
                    hashCode = hashCode * 59 + this.MinimumIncome.GetHashCode();
                if (this.MonthlyPayment != null)
                    hashCode = hashCode * 59 + this.MonthlyPayment.GetHashCode();
                if (this.PrepaidItemsEstimatedAmount != null)
                    hashCode = hashCode * 59 + this.PrepaidItemsEstimatedAmount.GetHashCode();
                if (this.PrequalificationScenarioIndex != null)
                    hashCode = hashCode * 59 + this.PrequalificationScenarioIndex.GetHashCode();
                if (this.QualBottomRatioPercent != null)
                    hashCode = hashCode * 59 + this.QualBottomRatioPercent.GetHashCode();
                if (this.QualTopRatioPercent != null)
                    hashCode = hashCode * 59 + this.QualTopRatioPercent.GetHashCode();
                if (this.SalesPrice != null)
                    hashCode = hashCode * 59 + this.SalesPrice.GetHashCode();
                if (this.SubordinateFin != null)
                    hashCode = hashCode * 59 + this.SubordinateFin.GetHashCode();
                if (this.TotalBaseCost != null)
                    hashCode = hashCode * 59 + this.TotalBaseCost.GetHashCode();
                if (this.TotalCashAvailable != null)
                    hashCode = hashCode * 59 + this.TotalCashAvailable.GetHashCode();
                if (this.TotalCashLeft != null)
                    hashCode = hashCode * 59 + this.TotalCashLeft.GetHashCode();
                if (this.TotalCosts != null)
                    hashCode = hashCode * 59 + this.TotalCosts.GetHashCode();
                if (this.TotalFinancing != null)
                    hashCode = hashCode * 59 + this.TotalFinancing.GetHashCode();
                if (this.TotalHe != null)
                    hashCode = hashCode * 59 + this.TotalHe.GetHashCode();
                if (this.TotalIncome != null)
                    hashCode = hashCode * 59 + this.TotalIncome.GetHashCode();
                if (this.TotalLoanAmount != null)
                    hashCode = hashCode * 59 + this.TotalLoanAmount.GetHashCode();
                if (this.TotalOtherExpense != null)
                    hashCode = hashCode * 59 + this.TotalOtherExpense.GetHashCode();
                if (this.TotalPaidOffMortgage != null)
                    hashCode = hashCode * 59 + this.TotalPaidOffMortgage.GetHashCode();
                if (this.TotalPaidOffOthers != null)
                    hashCode = hashCode * 59 + this.TotalPaidOffOthers.GetHashCode();
                if (this.TotalPayments != null)
                    hashCode = hashCode * 59 + this.TotalPayments.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
