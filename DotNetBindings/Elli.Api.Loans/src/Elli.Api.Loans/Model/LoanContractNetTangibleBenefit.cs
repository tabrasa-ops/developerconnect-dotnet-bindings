/*
* Copyright 2017 Ellie Mae, Inc.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*
*  1. Redistributions of source code must retain the above copyright notice,
*     this list of conditions and the following disclaimer.
*
*  2. Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*  3. Neither the name of the copyright holder nor the names of its
*     contributors may be used to endorse or promote products derived from this
*     software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.
*/


/* 
 * Loan
 *
 * Returns the entire loan or specific entities of a loan.
 *
 * OpenAPI spec version: 1.4.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Elli.Api.Loans.Client.SwaggerDateConverter;

namespace Elli.Api.Loans.Model
{
    /// <summary>
    /// LoanContractNetTangibleBenefit
    /// </summary>
    [DataContract]
    public partial class LoanContractNetTangibleBenefit :  IEquatable<LoanContractNetTangibleBenefit>, IValidatableObject
    {
    
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets AprNotExceedIndicator
        /// </summary>
        [DataMember(Name="aprNotExceedIndicator", EmitDefaultValue=false)]
        public bool? AprNotExceedIndicator { get; set; }

        /// <summary>
        /// Gets or Sets AvoidingForeclosureIndicator
        /// </summary>
        [DataMember(Name="avoidingForeclosureIndicator", EmitDefaultValue=false)]
        public bool? AvoidingForeclosureIndicator { get; set; }

        /// <summary>
        /// Gets or Sets BeneficialChangedForBorrowerIndicator
        /// </summary>
        [DataMember(Name="beneficialChangedForBorrowerIndicator", EmitDefaultValue=false)]
        public bool? BeneficialChangedForBorrowerIndicator { get; set; }

        /// <summary>
        /// Gets or Sets BonaFideFinancialEmergency
        /// </summary>
        [DataMember(Name="bonaFideFinancialEmergency", EmitDefaultValue=false)]
        public string BonaFideFinancialEmergency { get; set; }

        /// <summary>
        /// Gets or Sets BorrowerCanRecoupCostofRefinancingIndicator
        /// </summary>
        [DataMember(Name="borrowerCanRecoupCostofRefinancingIndicator", EmitDefaultValue=false)]
        public bool? BorrowerCanRecoupCostofRefinancingIndicator { get; set; }

        /// <summary>
        /// Gets or Sets BorrowerCanRecoupIndicator
        /// </summary>
        [DataMember(Name="borrowerCanRecoupIndicator", EmitDefaultValue=false)]
        public bool? BorrowerCanRecoupIndicator { get; set; }

        /// <summary>
        /// Gets or Sets BorrowerMonthlyPaymentLowerThan20Indicator
        /// </summary>
        [DataMember(Name="borrowerMonthlyPaymentLowerThan20Indicator", EmitDefaultValue=false)]
        public bool? BorrowerMonthlyPaymentLowerThan20Indicator { get; set; }

        /// <summary>
        /// Gets or Sets BorrowerReceivedReasonable
        /// </summary>
        [DataMember(Name="borrowerReceivedReasonable", EmitDefaultValue=false)]
        public string BorrowerReceivedReasonable { get; set; }

        /// <summary>
        /// Gets or Sets BorrowerReceivesAmountExcessCostAndFeesIndicator
        /// </summary>
        [DataMember(Name="borrowerReceivesAmountExcessCostAndFeesIndicator", EmitDefaultValue=false)]
        public bool? BorrowerReceivesAmountExcessCostAndFeesIndicator { get; set; }

        /// <summary>
        /// Gets or Sets ChangeLoanFromArmtoFixedIndicator
        /// </summary>
        [DataMember(Name="changeLoanFromArmtoFixedIndicator", EmitDefaultValue=false)]
        public bool? ChangeLoanFromArmtoFixedIndicator { get; set; }

        /// <summary>
        /// Gets or Sets ChangingLoanToFixedRateIndicator
        /// </summary>
        [DataMember(Name="changingLoanToFixedRateIndicator", EmitDefaultValue=false)]
        public bool? ChangingLoanToFixedRateIndicator { get; set; }

        /// <summary>
        /// Gets or Sets ConsolidatingOtherExistingLoansIntoNewLoanIndicator
        /// </summary>
        [DataMember(Name="consolidatingOtherExistingLoansIntoNewLoanIndicator", EmitDefaultValue=false)]
        public bool? ConsolidatingOtherExistingLoansIntoNewLoanIndicator { get; set; }

        /// <summary>
        /// Gets or Sets EliminatingBalloonPaymentIndicator
        /// </summary>
        [DataMember(Name="eliminatingBalloonPaymentIndicator", EmitDefaultValue=false)]
        public bool? EliminatingBalloonPaymentIndicator { get; set; }

        /// <summary>
        /// Gets or Sets EliminatingNegArmIndicator
        /// </summary>
        [DataMember(Name="eliminatingNegArmIndicator", EmitDefaultValue=false)]
        public bool? EliminatingNegArmIndicator { get; set; }

        /// <summary>
        /// Gets or Sets EliminatingPrivateMortgageInsuranceIndicator
        /// </summary>
        [DataMember(Name="eliminatingPrivateMortgageInsuranceIndicator", EmitDefaultValue=false)]
        public bool? EliminatingPrivateMortgageInsuranceIndicator { get; set; }

        /// <summary>
        /// Gets or Sets ExistingLoanAprPercent
        /// </summary>
        [DataMember(Name="existingLoanAprPercent", EmitDefaultValue=false)]
        public double? ExistingLoanAprPercent { get; set; }

        /// <summary>
        /// Gets or Sets ExistingLoanBalloonIndicator
        /// </summary>
        [DataMember(Name="existingLoanBalloonIndicator", EmitDefaultValue=false)]
        public bool? ExistingLoanBalloonIndicator { get; set; }

        /// <summary>
        /// Gets or Sets ExistingLoanBorrowerReceivesCashOutAmount
        /// </summary>
        [DataMember(Name="existingLoanBorrowerReceivesCashOutAmount", EmitDefaultValue=false)]
        public double? ExistingLoanBorrowerReceivesCashOutAmount { get; set; }

        /// <summary>
        /// Gets or Sets ExistingLoanBorrowerReceivesCashOutIndicator
        /// </summary>
        [DataMember(Name="existingLoanBorrowerReceivesCashOutIndicator", EmitDefaultValue=false)]
        public bool? ExistingLoanBorrowerReceivesCashOutIndicator { get; set; }

        /// <summary>
        /// Gets or Sets ExistingLoanBottomRatioPercent
        /// </summary>
        [DataMember(Name="existingLoanBottomRatioPercent", EmitDefaultValue=false)]
        public double? ExistingLoanBottomRatioPercent { get; set; }

        /// <summary>
        /// Gets or Sets ExistingLoanDateLoanClosed
        /// </summary>
        [DataMember(Name="existingLoanDateLoanClosed", EmitDefaultValue=false)]
        public DateTime? ExistingLoanDateLoanClosed { get; set; }

        /// <summary>
        /// Gets or Sets ExistingLoanFullyIndexRatePercent
        /// </summary>
        [DataMember(Name="existingLoanFullyIndexRatePercent", EmitDefaultValue=false)]
        public double? ExistingLoanFullyIndexRatePercent { get; set; }

        /// <summary>
        /// Gets or Sets ExistingLoanInterestRatePercent
        /// </summary>
        [DataMember(Name="existingLoanInterestRatePercent", EmitDefaultValue=false)]
        public double? ExistingLoanInterestRatePercent { get; set; }

        /// <summary>
        /// Gets or Sets ExistingLoanIsGuaranteedIndicator
        /// </summary>
        [DataMember(Name="existingLoanIsGuaranteedIndicator", EmitDefaultValue=false)]
        public bool? ExistingLoanIsGuaranteedIndicator { get; set; }

        /// <summary>
        /// Gets or Sets ExistingLoanIsLoanRefinancedAsSpecial
        /// </summary>
        [DataMember(Name="existingLoanIsLoanRefinancedAsSpecial", EmitDefaultValue=false)]
        public bool? ExistingLoanIsLoanRefinancedAsSpecial { get; set; }

        /// <summary>
        /// Gets or Sets ExistingLoanIsNegativeAmortizationFeatureIndicator
        /// </summary>
        [DataMember(Name="existingLoanIsNegativeAmortizationFeatureIndicator", EmitDefaultValue=false)]
        public bool? ExistingLoanIsNegativeAmortizationFeatureIndicator { get; set; }

        /// <summary>
        /// Gets or Sets ExistingLoanIsPrepaymentPenalty
        /// </summary>
        [DataMember(Name="existingLoanIsPrepaymentPenalty", EmitDefaultValue=false)]
        public bool? ExistingLoanIsPrepaymentPenalty { get; set; }

        /// <summary>
        /// Gets or Sets ExistingLoanLoanAmortizationType
        /// </summary>
        [DataMember(Name="existingLoanLoanAmortizationType", EmitDefaultValue=false)]
        public string ExistingLoanLoanAmortizationType { get; set; }

        /// <summary>
        /// Gets or Sets ExistingLoanLoanAmount
        /// </summary>
        [DataMember(Name="existingLoanLoanAmount", EmitDefaultValue=false)]
        public double? ExistingLoanLoanAmount { get; set; }

        /// <summary>
        /// Gets or Sets ExistingLoanLoanTerm
        /// </summary>
        [DataMember(Name="existingLoanLoanTerm", EmitDefaultValue=false)]
        public int? ExistingLoanLoanTerm { get; set; }

        /// <summary>
        /// Gets or Sets ExistingLoanLtvPercent
        /// </summary>
        [DataMember(Name="existingLoanLtvPercent", EmitDefaultValue=false)]
        public double? ExistingLoanLtvPercent { get; set; }

        /// <summary>
        /// Gets or Sets ExistingLoanMaximumRatePercent
        /// </summary>
        [DataMember(Name="existingLoanMaximumRatePercent", EmitDefaultValue=false)]
        public double? ExistingLoanMaximumRatePercent { get; set; }

        /// <summary>
        /// Gets or Sets ExistingLoanMonthsRemaining
        /// </summary>
        [DataMember(Name="existingLoanMonthsRemaining", EmitDefaultValue=false)]
        public int? ExistingLoanMonthsRemaining { get; set; }

        /// <summary>
        /// Gets or Sets ExistingLoanPaymentAmount
        /// </summary>
        [DataMember(Name="existingLoanPaymentAmount", EmitDefaultValue=false)]
        public double? ExistingLoanPaymentAmount { get; set; }

        /// <summary>
        /// Gets or Sets ExistingLoanPaymentDifference
        /// </summary>
        [DataMember(Name="existingLoanPaymentDifference", EmitDefaultValue=false)]
        public double? ExistingLoanPaymentDifference { get; set; }

        /// <summary>
        /// Gets or Sets ExistingLoanPaymentIncludeMiObligation
        /// </summary>
        [DataMember(Name="existingLoanPaymentIncludeMiObligation", EmitDefaultValue=false)]
        public double? ExistingLoanPaymentIncludeMiObligation { get; set; }

        /// <summary>
        /// Gets or Sets ExistingLoanPaymentIncludeMortgageInsurance
        /// </summary>
        [DataMember(Name="existingLoanPaymentIncludeMortgageInsurance", EmitDefaultValue=false)]
        public double? ExistingLoanPaymentIncludeMortgageInsurance { get; set; }

        /// <summary>
        /// Gets or Sets ExistingLoanPrepaymentPenaltyAmountIncludedInNewLoan
        /// </summary>
        [DataMember(Name="existingLoanPrepaymentPenaltyAmountIncludedInNewLoan", EmitDefaultValue=false)]
        public double? ExistingLoanPrepaymentPenaltyAmountIncludedInNewLoan { get; set; }

        /// <summary>
        /// Gets or Sets ExistingLoanPrepaymentPenaltyBasedOn
        /// </summary>
        [DataMember(Name="existingLoanPrepaymentPenaltyBasedOn", EmitDefaultValue=false)]
        public string ExistingLoanPrepaymentPenaltyBasedOn { get; set; }

        /// <summary>
        /// Gets or Sets ExistingLoanPrepaymentPenaltyPercentage
        /// </summary>
        [DataMember(Name="existingLoanPrepaymentPenaltyPercentage", EmitDefaultValue=false)]
        public double? ExistingLoanPrepaymentPenaltyPercentage { get; set; }

        /// <summary>
        /// Gets or Sets ExistingLoanPrepaymentPenaltyTerm
        /// </summary>
        [DataMember(Name="existingLoanPrepaymentPenaltyTerm", EmitDefaultValue=false)]
        public int? ExistingLoanPrepaymentPenaltyTerm { get; set; }

        /// <summary>
        /// Gets or Sets ExistingLoanProvidedByLicenseeType
        /// </summary>
        [DataMember(Name="existingLoanProvidedByLicenseeType", EmitDefaultValue=false)]
        public string ExistingLoanProvidedByLicenseeType { get; set; }

        /// <summary>
        /// Gets or Sets ExistingLoanPurposeType
        /// </summary>
        [DataMember(Name="existingLoanPurposeType", EmitDefaultValue=false)]
        public string ExistingLoanPurposeType { get; set; }

        /// <summary>
        /// Gets or Sets ExistingLoanRecoupCostsYears
        /// </summary>
        [DataMember(Name="existingLoanRecoupCostsYears", EmitDefaultValue=false)]
        public int? ExistingLoanRecoupCostsYears { get; set; }

        /// <summary>
        /// Gets or Sets ExistingLoanSavingsAmount
        /// </summary>
        [DataMember(Name="existingLoanSavingsAmount", EmitDefaultValue=false)]
        public double? ExistingLoanSavingsAmount { get; set; }

        /// <summary>
        /// Gets or Sets ExistingLoanTotalDebtPayoff
        /// </summary>
        [DataMember(Name="existingLoanTotalDebtPayoff", EmitDefaultValue=false)]
        public double? ExistingLoanTotalDebtPayoff { get; set; }

        /// <summary>
        /// Gets or Sets ExistingLoanWeightedAverageInterestRatePercent
        /// </summary>
        [DataMember(Name="existingLoanWeightedAverageInterestRatePercent", EmitDefaultValue=false)]
        public double? ExistingLoanWeightedAverageInterestRatePercent { get; set; }

        /// <summary>
        /// Gets or Sets HomeLoanComplianceWith209
        /// </summary>
        [DataMember(Name="homeLoanComplianceWith209", EmitDefaultValue=false)]
        public bool? HomeLoanComplianceWith209 { get; set; }

        /// <summary>
        /// Gets or Sets LenderDeterminedBorrowersInterest
        /// </summary>
        [DataMember(Name="lenderDeterminedBorrowersInterest", EmitDefaultValue=false)]
        public bool? LenderDeterminedBorrowersInterest { get; set; }

        /// <summary>
        /// Gets or Sets NewLoanIsGuaranteedIndicator
        /// </summary>
        [DataMember(Name="newLoanIsGuaranteedIndicator", EmitDefaultValue=false)]
        public bool? NewLoanIsGuaranteedIndicator { get; set; }

        /// <summary>
        /// Gets or Sets NewLoanIsNegativeAmortizationFeatureIndicator
        /// </summary>
        [DataMember(Name="newLoanIsNegativeAmortizationFeatureIndicator", EmitDefaultValue=false)]
        public bool? NewLoanIsNegativeAmortizationFeatureIndicator { get; set; }

        /// <summary>
        /// Gets or Sets NewLoanIsSpecialMortgageOriginatedIndicator
        /// </summary>
        [DataMember(Name="newLoanIsSpecialMortgageOriginatedIndicator", EmitDefaultValue=false)]
        public bool? NewLoanIsSpecialMortgageOriginatedIndicator { get; set; }

        /// <summary>
        /// Gets or Sets NewLoanPaymentWithMiDifference
        /// </summary>
        [DataMember(Name="newLoanPaymentWithMiDifference", EmitDefaultValue=false)]
        public double? NewLoanPaymentWithMiDifference { get; set; }

        /// <summary>
        /// Gets or Sets NewLoanPaymentWithObligationDifference
        /// </summary>
        [DataMember(Name="newLoanPaymentWithObligationDifference", EmitDefaultValue=false)]
        public double? NewLoanPaymentWithObligationDifference { get; set; }

        /// <summary>
        /// Gets or Sets NewLoanPayOffConsolidateDebtIndicator
        /// </summary>
        [DataMember(Name="newLoanPayOffConsolidateDebtIndicator", EmitDefaultValue=false)]
        public bool? NewLoanPayOffConsolidateDebtIndicator { get; set; }

        /// <summary>
        /// Gets or Sets NewLoanWeightedAverageInterestRatePercent
        /// </summary>
        [DataMember(Name="newLoanWeightedAverageInterestRatePercent", EmitDefaultValue=false)]
        public double? NewLoanWeightedAverageInterestRatePercent { get; set; }

        /// <summary>
        /// Gets or Sets ObtainingLowerIntMonthlyPaymentIndicator
        /// </summary>
        [DataMember(Name="obtainingLowerIntMonthlyPaymentIndicator", EmitDefaultValue=false)]
        public bool? ObtainingLowerIntMonthlyPaymentIndicator { get; set; }

        /// <summary>
        /// Gets or Sets ObtainingLowerIntRateIndicator
        /// </summary>
        [DataMember(Name="obtainingLowerIntRateIndicator", EmitDefaultValue=false)]
        public bool? ObtainingLowerIntRateIndicator { get; set; }

        /// <summary>
        /// Gets or Sets ObtainingShortAmortScheduleIndicator
        /// </summary>
        [DataMember(Name="obtainingShortAmortScheduleIndicator", EmitDefaultValue=false)]
        public bool? ObtainingShortAmortScheduleIndicator { get; set; }

        /// <summary>
        /// Gets or Sets OtherReason
        /// </summary>
        [DataMember(Name="otherReason", EmitDefaultValue=false)]
        public bool? OtherReason { get; set; }

        /// <summary>
        /// Gets or Sets OtherReasonDescription
        /// </summary>
        [DataMember(Name="otherReasonDescription", EmitDefaultValue=false)]
        public string OtherReasonDescription { get; set; }

        /// <summary>
        /// Gets or Sets PrintBorrowerInitialLinesIndicator
        /// </summary>
        [DataMember(Name="printBorrowerInitialLinesIndicator", EmitDefaultValue=false)]
        public bool? PrintBorrowerInitialLinesIndicator { get; set; }

        /// <summary>
        /// Gets or Sets ProceedsOfNewLoanWillBeUsedIndicator
        /// </summary>
        [DataMember(Name="proceedsOfNewLoanWillBeUsedIndicator", EmitDefaultValue=false)]
        public bool? ProceedsOfNewLoanWillBeUsedIndicator { get; set; }

        /// <summary>
        /// Gets or Sets ReceivingCashOutFromNewLoanGreaterThanClosingCostIndicator
        /// </summary>
        [DataMember(Name="receivingCashOutFromNewLoanGreaterThanClosingCostIndicator", EmitDefaultValue=false)]
        public bool? ReceivingCashOutFromNewLoanGreaterThanClosingCostIndicator { get; set; }

        /// <summary>
        /// Gets or Sets RefinancingLoanIsHomeEquityIndicator
        /// </summary>
        [DataMember(Name="refinancingLoanIsHomeEquityIndicator", EmitDefaultValue=false)]
        public bool? RefinancingLoanIsHomeEquityIndicator { get; set; }

        /// <summary>
        /// Gets or Sets RefinancingRespondBonaFide
        /// </summary>
        [DataMember(Name="refinancingRespondBonaFide", EmitDefaultValue=false)]
        public bool? RefinancingRespondBonaFide { get; set; }

        /// <summary>
        /// Gets or Sets NewLoanIsSafeHarborQM
        /// </summary>
        [DataMember(Name="newLoanIsSafeHarborQM", EmitDefaultValue=false)]
        public bool? NewLoanIsSafeHarborQM { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LoanContractNetTangibleBenefit {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AprNotExceedIndicator: ").Append(AprNotExceedIndicator).Append("\n");
            sb.Append("  AvoidingForeclosureIndicator: ").Append(AvoidingForeclosureIndicator).Append("\n");
            sb.Append("  BeneficialChangedForBorrowerIndicator: ").Append(BeneficialChangedForBorrowerIndicator).Append("\n");
            sb.Append("  BonaFideFinancialEmergency: ").Append(BonaFideFinancialEmergency).Append("\n");
            sb.Append("  BorrowerCanRecoupCostofRefinancingIndicator: ").Append(BorrowerCanRecoupCostofRefinancingIndicator).Append("\n");
            sb.Append("  BorrowerCanRecoupIndicator: ").Append(BorrowerCanRecoupIndicator).Append("\n");
            sb.Append("  BorrowerMonthlyPaymentLowerThan20Indicator: ").Append(BorrowerMonthlyPaymentLowerThan20Indicator).Append("\n");
            sb.Append("  BorrowerReceivedReasonable: ").Append(BorrowerReceivedReasonable).Append("\n");
            sb.Append("  BorrowerReceivesAmountExcessCostAndFeesIndicator: ").Append(BorrowerReceivesAmountExcessCostAndFeesIndicator).Append("\n");
            sb.Append("  ChangeLoanFromArmtoFixedIndicator: ").Append(ChangeLoanFromArmtoFixedIndicator).Append("\n");
            sb.Append("  ChangingLoanToFixedRateIndicator: ").Append(ChangingLoanToFixedRateIndicator).Append("\n");
            sb.Append("  ConsolidatingOtherExistingLoansIntoNewLoanIndicator: ").Append(ConsolidatingOtherExistingLoansIntoNewLoanIndicator).Append("\n");
            sb.Append("  EliminatingBalloonPaymentIndicator: ").Append(EliminatingBalloonPaymentIndicator).Append("\n");
            sb.Append("  EliminatingNegArmIndicator: ").Append(EliminatingNegArmIndicator).Append("\n");
            sb.Append("  EliminatingPrivateMortgageInsuranceIndicator: ").Append(EliminatingPrivateMortgageInsuranceIndicator).Append("\n");
            sb.Append("  ExistingLoanAprPercent: ").Append(ExistingLoanAprPercent).Append("\n");
            sb.Append("  ExistingLoanBalloonIndicator: ").Append(ExistingLoanBalloonIndicator).Append("\n");
            sb.Append("  ExistingLoanBorrowerReceivesCashOutAmount: ").Append(ExistingLoanBorrowerReceivesCashOutAmount).Append("\n");
            sb.Append("  ExistingLoanBorrowerReceivesCashOutIndicator: ").Append(ExistingLoanBorrowerReceivesCashOutIndicator).Append("\n");
            sb.Append("  ExistingLoanBottomRatioPercent: ").Append(ExistingLoanBottomRatioPercent).Append("\n");
            sb.Append("  ExistingLoanDateLoanClosed: ").Append(ExistingLoanDateLoanClosed).Append("\n");
            sb.Append("  ExistingLoanFullyIndexRatePercent: ").Append(ExistingLoanFullyIndexRatePercent).Append("\n");
            sb.Append("  ExistingLoanInterestRatePercent: ").Append(ExistingLoanInterestRatePercent).Append("\n");
            sb.Append("  ExistingLoanIsGuaranteedIndicator: ").Append(ExistingLoanIsGuaranteedIndicator).Append("\n");
            sb.Append("  ExistingLoanIsLoanRefinancedAsSpecial: ").Append(ExistingLoanIsLoanRefinancedAsSpecial).Append("\n");
            sb.Append("  ExistingLoanIsNegativeAmortizationFeatureIndicator: ").Append(ExistingLoanIsNegativeAmortizationFeatureIndicator).Append("\n");
            sb.Append("  ExistingLoanIsPrepaymentPenalty: ").Append(ExistingLoanIsPrepaymentPenalty).Append("\n");
            sb.Append("  ExistingLoanLoanAmortizationType: ").Append(ExistingLoanLoanAmortizationType).Append("\n");
            sb.Append("  ExistingLoanLoanAmount: ").Append(ExistingLoanLoanAmount).Append("\n");
            sb.Append("  ExistingLoanLoanTerm: ").Append(ExistingLoanLoanTerm).Append("\n");
            sb.Append("  ExistingLoanLtvPercent: ").Append(ExistingLoanLtvPercent).Append("\n");
            sb.Append("  ExistingLoanMaximumRatePercent: ").Append(ExistingLoanMaximumRatePercent).Append("\n");
            sb.Append("  ExistingLoanMonthsRemaining: ").Append(ExistingLoanMonthsRemaining).Append("\n");
            sb.Append("  ExistingLoanPaymentAmount: ").Append(ExistingLoanPaymentAmount).Append("\n");
            sb.Append("  ExistingLoanPaymentDifference: ").Append(ExistingLoanPaymentDifference).Append("\n");
            sb.Append("  ExistingLoanPaymentIncludeMiObligation: ").Append(ExistingLoanPaymentIncludeMiObligation).Append("\n");
            sb.Append("  ExistingLoanPaymentIncludeMortgageInsurance: ").Append(ExistingLoanPaymentIncludeMortgageInsurance).Append("\n");
            sb.Append("  ExistingLoanPrepaymentPenaltyAmountIncludedInNewLoan: ").Append(ExistingLoanPrepaymentPenaltyAmountIncludedInNewLoan).Append("\n");
            sb.Append("  ExistingLoanPrepaymentPenaltyBasedOn: ").Append(ExistingLoanPrepaymentPenaltyBasedOn).Append("\n");
            sb.Append("  ExistingLoanPrepaymentPenaltyPercentage: ").Append(ExistingLoanPrepaymentPenaltyPercentage).Append("\n");
            sb.Append("  ExistingLoanPrepaymentPenaltyTerm: ").Append(ExistingLoanPrepaymentPenaltyTerm).Append("\n");
            sb.Append("  ExistingLoanProvidedByLicenseeType: ").Append(ExistingLoanProvidedByLicenseeType).Append("\n");
            sb.Append("  ExistingLoanPurposeType: ").Append(ExistingLoanPurposeType).Append("\n");
            sb.Append("  ExistingLoanRecoupCostsYears: ").Append(ExistingLoanRecoupCostsYears).Append("\n");
            sb.Append("  ExistingLoanSavingsAmount: ").Append(ExistingLoanSavingsAmount).Append("\n");
            sb.Append("  ExistingLoanTotalDebtPayoff: ").Append(ExistingLoanTotalDebtPayoff).Append("\n");
            sb.Append("  ExistingLoanWeightedAverageInterestRatePercent: ").Append(ExistingLoanWeightedAverageInterestRatePercent).Append("\n");
            sb.Append("  HomeLoanComplianceWith209: ").Append(HomeLoanComplianceWith209).Append("\n");
            sb.Append("  LenderDeterminedBorrowersInterest: ").Append(LenderDeterminedBorrowersInterest).Append("\n");
            sb.Append("  NewLoanIsGuaranteedIndicator: ").Append(NewLoanIsGuaranteedIndicator).Append("\n");
            sb.Append("  NewLoanIsNegativeAmortizationFeatureIndicator: ").Append(NewLoanIsNegativeAmortizationFeatureIndicator).Append("\n");
            sb.Append("  NewLoanIsSpecialMortgageOriginatedIndicator: ").Append(NewLoanIsSpecialMortgageOriginatedIndicator).Append("\n");
            sb.Append("  NewLoanPaymentWithMiDifference: ").Append(NewLoanPaymentWithMiDifference).Append("\n");
            sb.Append("  NewLoanPaymentWithObligationDifference: ").Append(NewLoanPaymentWithObligationDifference).Append("\n");
            sb.Append("  NewLoanPayOffConsolidateDebtIndicator: ").Append(NewLoanPayOffConsolidateDebtIndicator).Append("\n");
            sb.Append("  NewLoanWeightedAverageInterestRatePercent: ").Append(NewLoanWeightedAverageInterestRatePercent).Append("\n");
            sb.Append("  ObtainingLowerIntMonthlyPaymentIndicator: ").Append(ObtainingLowerIntMonthlyPaymentIndicator).Append("\n");
            sb.Append("  ObtainingLowerIntRateIndicator: ").Append(ObtainingLowerIntRateIndicator).Append("\n");
            sb.Append("  ObtainingShortAmortScheduleIndicator: ").Append(ObtainingShortAmortScheduleIndicator).Append("\n");
            sb.Append("  OtherReason: ").Append(OtherReason).Append("\n");
            sb.Append("  OtherReasonDescription: ").Append(OtherReasonDescription).Append("\n");
            sb.Append("  PrintBorrowerInitialLinesIndicator: ").Append(PrintBorrowerInitialLinesIndicator).Append("\n");
            sb.Append("  ProceedsOfNewLoanWillBeUsedIndicator: ").Append(ProceedsOfNewLoanWillBeUsedIndicator).Append("\n");
            sb.Append("  ReceivingCashOutFromNewLoanGreaterThanClosingCostIndicator: ").Append(ReceivingCashOutFromNewLoanGreaterThanClosingCostIndicator).Append("\n");
            sb.Append("  RefinancingLoanIsHomeEquityIndicator: ").Append(RefinancingLoanIsHomeEquityIndicator).Append("\n");
            sb.Append("  RefinancingRespondBonaFide: ").Append(RefinancingRespondBonaFide).Append("\n");
            sb.Append("  NewLoanIsSafeHarborQM: ").Append(NewLoanIsSafeHarborQM).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LoanContractNetTangibleBenefit);
        }

        /// <summary>
        /// Returns true if LoanContractNetTangibleBenefit instances are equal
        /// </summary>
        /// <param name="input">Instance of LoanContractNetTangibleBenefit to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoanContractNetTangibleBenefit input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.AprNotExceedIndicator == input.AprNotExceedIndicator ||
                    (this.AprNotExceedIndicator != null &&
                    this.AprNotExceedIndicator.Equals(input.AprNotExceedIndicator))
                ) && 
                (
                    this.AvoidingForeclosureIndicator == input.AvoidingForeclosureIndicator ||
                    (this.AvoidingForeclosureIndicator != null &&
                    this.AvoidingForeclosureIndicator.Equals(input.AvoidingForeclosureIndicator))
                ) && 
                (
                    this.BeneficialChangedForBorrowerIndicator == input.BeneficialChangedForBorrowerIndicator ||
                    (this.BeneficialChangedForBorrowerIndicator != null &&
                    this.BeneficialChangedForBorrowerIndicator.Equals(input.BeneficialChangedForBorrowerIndicator))
                ) && 
                (
                    this.BonaFideFinancialEmergency == input.BonaFideFinancialEmergency ||
                    (this.BonaFideFinancialEmergency != null &&
                    this.BonaFideFinancialEmergency.Equals(input.BonaFideFinancialEmergency))
                ) && 
                (
                    this.BorrowerCanRecoupCostofRefinancingIndicator == input.BorrowerCanRecoupCostofRefinancingIndicator ||
                    (this.BorrowerCanRecoupCostofRefinancingIndicator != null &&
                    this.BorrowerCanRecoupCostofRefinancingIndicator.Equals(input.BorrowerCanRecoupCostofRefinancingIndicator))
                ) && 
                (
                    this.BorrowerCanRecoupIndicator == input.BorrowerCanRecoupIndicator ||
                    (this.BorrowerCanRecoupIndicator != null &&
                    this.BorrowerCanRecoupIndicator.Equals(input.BorrowerCanRecoupIndicator))
                ) && 
                (
                    this.BorrowerMonthlyPaymentLowerThan20Indicator == input.BorrowerMonthlyPaymentLowerThan20Indicator ||
                    (this.BorrowerMonthlyPaymentLowerThan20Indicator != null &&
                    this.BorrowerMonthlyPaymentLowerThan20Indicator.Equals(input.BorrowerMonthlyPaymentLowerThan20Indicator))
                ) && 
                (
                    this.BorrowerReceivedReasonable == input.BorrowerReceivedReasonable ||
                    (this.BorrowerReceivedReasonable != null &&
                    this.BorrowerReceivedReasonable.Equals(input.BorrowerReceivedReasonable))
                ) && 
                (
                    this.BorrowerReceivesAmountExcessCostAndFeesIndicator == input.BorrowerReceivesAmountExcessCostAndFeesIndicator ||
                    (this.BorrowerReceivesAmountExcessCostAndFeesIndicator != null &&
                    this.BorrowerReceivesAmountExcessCostAndFeesIndicator.Equals(input.BorrowerReceivesAmountExcessCostAndFeesIndicator))
                ) && 
                (
                    this.ChangeLoanFromArmtoFixedIndicator == input.ChangeLoanFromArmtoFixedIndicator ||
                    (this.ChangeLoanFromArmtoFixedIndicator != null &&
                    this.ChangeLoanFromArmtoFixedIndicator.Equals(input.ChangeLoanFromArmtoFixedIndicator))
                ) && 
                (
                    this.ChangingLoanToFixedRateIndicator == input.ChangingLoanToFixedRateIndicator ||
                    (this.ChangingLoanToFixedRateIndicator != null &&
                    this.ChangingLoanToFixedRateIndicator.Equals(input.ChangingLoanToFixedRateIndicator))
                ) && 
                (
                    this.ConsolidatingOtherExistingLoansIntoNewLoanIndicator == input.ConsolidatingOtherExistingLoansIntoNewLoanIndicator ||
                    (this.ConsolidatingOtherExistingLoansIntoNewLoanIndicator != null &&
                    this.ConsolidatingOtherExistingLoansIntoNewLoanIndicator.Equals(input.ConsolidatingOtherExistingLoansIntoNewLoanIndicator))
                ) && 
                (
                    this.EliminatingBalloonPaymentIndicator == input.EliminatingBalloonPaymentIndicator ||
                    (this.EliminatingBalloonPaymentIndicator != null &&
                    this.EliminatingBalloonPaymentIndicator.Equals(input.EliminatingBalloonPaymentIndicator))
                ) && 
                (
                    this.EliminatingNegArmIndicator == input.EliminatingNegArmIndicator ||
                    (this.EliminatingNegArmIndicator != null &&
                    this.EliminatingNegArmIndicator.Equals(input.EliminatingNegArmIndicator))
                ) && 
                (
                    this.EliminatingPrivateMortgageInsuranceIndicator == input.EliminatingPrivateMortgageInsuranceIndicator ||
                    (this.EliminatingPrivateMortgageInsuranceIndicator != null &&
                    this.EliminatingPrivateMortgageInsuranceIndicator.Equals(input.EliminatingPrivateMortgageInsuranceIndicator))
                ) && 
                (
                    this.ExistingLoanAprPercent == input.ExistingLoanAprPercent ||
                    (this.ExistingLoanAprPercent != null &&
                    this.ExistingLoanAprPercent.Equals(input.ExistingLoanAprPercent))
                ) && 
                (
                    this.ExistingLoanBalloonIndicator == input.ExistingLoanBalloonIndicator ||
                    (this.ExistingLoanBalloonIndicator != null &&
                    this.ExistingLoanBalloonIndicator.Equals(input.ExistingLoanBalloonIndicator))
                ) && 
                (
                    this.ExistingLoanBorrowerReceivesCashOutAmount == input.ExistingLoanBorrowerReceivesCashOutAmount ||
                    (this.ExistingLoanBorrowerReceivesCashOutAmount != null &&
                    this.ExistingLoanBorrowerReceivesCashOutAmount.Equals(input.ExistingLoanBorrowerReceivesCashOutAmount))
                ) && 
                (
                    this.ExistingLoanBorrowerReceivesCashOutIndicator == input.ExistingLoanBorrowerReceivesCashOutIndicator ||
                    (this.ExistingLoanBorrowerReceivesCashOutIndicator != null &&
                    this.ExistingLoanBorrowerReceivesCashOutIndicator.Equals(input.ExistingLoanBorrowerReceivesCashOutIndicator))
                ) && 
                (
                    this.ExistingLoanBottomRatioPercent == input.ExistingLoanBottomRatioPercent ||
                    (this.ExistingLoanBottomRatioPercent != null &&
                    this.ExistingLoanBottomRatioPercent.Equals(input.ExistingLoanBottomRatioPercent))
                ) && 
                (
                    this.ExistingLoanDateLoanClosed == input.ExistingLoanDateLoanClosed ||
                    (this.ExistingLoanDateLoanClosed != null &&
                    this.ExistingLoanDateLoanClosed.Equals(input.ExistingLoanDateLoanClosed))
                ) && 
                (
                    this.ExistingLoanFullyIndexRatePercent == input.ExistingLoanFullyIndexRatePercent ||
                    (this.ExistingLoanFullyIndexRatePercent != null &&
                    this.ExistingLoanFullyIndexRatePercent.Equals(input.ExistingLoanFullyIndexRatePercent))
                ) && 
                (
                    this.ExistingLoanInterestRatePercent == input.ExistingLoanInterestRatePercent ||
                    (this.ExistingLoanInterestRatePercent != null &&
                    this.ExistingLoanInterestRatePercent.Equals(input.ExistingLoanInterestRatePercent))
                ) && 
                (
                    this.ExistingLoanIsGuaranteedIndicator == input.ExistingLoanIsGuaranteedIndicator ||
                    (this.ExistingLoanIsGuaranteedIndicator != null &&
                    this.ExistingLoanIsGuaranteedIndicator.Equals(input.ExistingLoanIsGuaranteedIndicator))
                ) && 
                (
                    this.ExistingLoanIsLoanRefinancedAsSpecial == input.ExistingLoanIsLoanRefinancedAsSpecial ||
                    (this.ExistingLoanIsLoanRefinancedAsSpecial != null &&
                    this.ExistingLoanIsLoanRefinancedAsSpecial.Equals(input.ExistingLoanIsLoanRefinancedAsSpecial))
                ) && 
                (
                    this.ExistingLoanIsNegativeAmortizationFeatureIndicator == input.ExistingLoanIsNegativeAmortizationFeatureIndicator ||
                    (this.ExistingLoanIsNegativeAmortizationFeatureIndicator != null &&
                    this.ExistingLoanIsNegativeAmortizationFeatureIndicator.Equals(input.ExistingLoanIsNegativeAmortizationFeatureIndicator))
                ) && 
                (
                    this.ExistingLoanIsPrepaymentPenalty == input.ExistingLoanIsPrepaymentPenalty ||
                    (this.ExistingLoanIsPrepaymentPenalty != null &&
                    this.ExistingLoanIsPrepaymentPenalty.Equals(input.ExistingLoanIsPrepaymentPenalty))
                ) && 
                (
                    this.ExistingLoanLoanAmortizationType == input.ExistingLoanLoanAmortizationType ||
                    (this.ExistingLoanLoanAmortizationType != null &&
                    this.ExistingLoanLoanAmortizationType.Equals(input.ExistingLoanLoanAmortizationType))
                ) && 
                (
                    this.ExistingLoanLoanAmount == input.ExistingLoanLoanAmount ||
                    (this.ExistingLoanLoanAmount != null &&
                    this.ExistingLoanLoanAmount.Equals(input.ExistingLoanLoanAmount))
                ) && 
                (
                    this.ExistingLoanLoanTerm == input.ExistingLoanLoanTerm ||
                    (this.ExistingLoanLoanTerm != null &&
                    this.ExistingLoanLoanTerm.Equals(input.ExistingLoanLoanTerm))
                ) && 
                (
                    this.ExistingLoanLtvPercent == input.ExistingLoanLtvPercent ||
                    (this.ExistingLoanLtvPercent != null &&
                    this.ExistingLoanLtvPercent.Equals(input.ExistingLoanLtvPercent))
                ) && 
                (
                    this.ExistingLoanMaximumRatePercent == input.ExistingLoanMaximumRatePercent ||
                    (this.ExistingLoanMaximumRatePercent != null &&
                    this.ExistingLoanMaximumRatePercent.Equals(input.ExistingLoanMaximumRatePercent))
                ) && 
                (
                    this.ExistingLoanMonthsRemaining == input.ExistingLoanMonthsRemaining ||
                    (this.ExistingLoanMonthsRemaining != null &&
                    this.ExistingLoanMonthsRemaining.Equals(input.ExistingLoanMonthsRemaining))
                ) && 
                (
                    this.ExistingLoanPaymentAmount == input.ExistingLoanPaymentAmount ||
                    (this.ExistingLoanPaymentAmount != null &&
                    this.ExistingLoanPaymentAmount.Equals(input.ExistingLoanPaymentAmount))
                ) && 
                (
                    this.ExistingLoanPaymentDifference == input.ExistingLoanPaymentDifference ||
                    (this.ExistingLoanPaymentDifference != null &&
                    this.ExistingLoanPaymentDifference.Equals(input.ExistingLoanPaymentDifference))
                ) && 
                (
                    this.ExistingLoanPaymentIncludeMiObligation == input.ExistingLoanPaymentIncludeMiObligation ||
                    (this.ExistingLoanPaymentIncludeMiObligation != null &&
                    this.ExistingLoanPaymentIncludeMiObligation.Equals(input.ExistingLoanPaymentIncludeMiObligation))
                ) && 
                (
                    this.ExistingLoanPaymentIncludeMortgageInsurance == input.ExistingLoanPaymentIncludeMortgageInsurance ||
                    (this.ExistingLoanPaymentIncludeMortgageInsurance != null &&
                    this.ExistingLoanPaymentIncludeMortgageInsurance.Equals(input.ExistingLoanPaymentIncludeMortgageInsurance))
                ) && 
                (
                    this.ExistingLoanPrepaymentPenaltyAmountIncludedInNewLoan == input.ExistingLoanPrepaymentPenaltyAmountIncludedInNewLoan ||
                    (this.ExistingLoanPrepaymentPenaltyAmountIncludedInNewLoan != null &&
                    this.ExistingLoanPrepaymentPenaltyAmountIncludedInNewLoan.Equals(input.ExistingLoanPrepaymentPenaltyAmountIncludedInNewLoan))
                ) && 
                (
                    this.ExistingLoanPrepaymentPenaltyBasedOn == input.ExistingLoanPrepaymentPenaltyBasedOn ||
                    (this.ExistingLoanPrepaymentPenaltyBasedOn != null &&
                    this.ExistingLoanPrepaymentPenaltyBasedOn.Equals(input.ExistingLoanPrepaymentPenaltyBasedOn))
                ) && 
                (
                    this.ExistingLoanPrepaymentPenaltyPercentage == input.ExistingLoanPrepaymentPenaltyPercentage ||
                    (this.ExistingLoanPrepaymentPenaltyPercentage != null &&
                    this.ExistingLoanPrepaymentPenaltyPercentage.Equals(input.ExistingLoanPrepaymentPenaltyPercentage))
                ) && 
                (
                    this.ExistingLoanPrepaymentPenaltyTerm == input.ExistingLoanPrepaymentPenaltyTerm ||
                    (this.ExistingLoanPrepaymentPenaltyTerm != null &&
                    this.ExistingLoanPrepaymentPenaltyTerm.Equals(input.ExistingLoanPrepaymentPenaltyTerm))
                ) && 
                (
                    this.ExistingLoanProvidedByLicenseeType == input.ExistingLoanProvidedByLicenseeType ||
                    (this.ExistingLoanProvidedByLicenseeType != null &&
                    this.ExistingLoanProvidedByLicenseeType.Equals(input.ExistingLoanProvidedByLicenseeType))
                ) && 
                (
                    this.ExistingLoanPurposeType == input.ExistingLoanPurposeType ||
                    (this.ExistingLoanPurposeType != null &&
                    this.ExistingLoanPurposeType.Equals(input.ExistingLoanPurposeType))
                ) && 
                (
                    this.ExistingLoanRecoupCostsYears == input.ExistingLoanRecoupCostsYears ||
                    (this.ExistingLoanRecoupCostsYears != null &&
                    this.ExistingLoanRecoupCostsYears.Equals(input.ExistingLoanRecoupCostsYears))
                ) && 
                (
                    this.ExistingLoanSavingsAmount == input.ExistingLoanSavingsAmount ||
                    (this.ExistingLoanSavingsAmount != null &&
                    this.ExistingLoanSavingsAmount.Equals(input.ExistingLoanSavingsAmount))
                ) && 
                (
                    this.ExistingLoanTotalDebtPayoff == input.ExistingLoanTotalDebtPayoff ||
                    (this.ExistingLoanTotalDebtPayoff != null &&
                    this.ExistingLoanTotalDebtPayoff.Equals(input.ExistingLoanTotalDebtPayoff))
                ) && 
                (
                    this.ExistingLoanWeightedAverageInterestRatePercent == input.ExistingLoanWeightedAverageInterestRatePercent ||
                    (this.ExistingLoanWeightedAverageInterestRatePercent != null &&
                    this.ExistingLoanWeightedAverageInterestRatePercent.Equals(input.ExistingLoanWeightedAverageInterestRatePercent))
                ) && 
                (
                    this.HomeLoanComplianceWith209 == input.HomeLoanComplianceWith209 ||
                    (this.HomeLoanComplianceWith209 != null &&
                    this.HomeLoanComplianceWith209.Equals(input.HomeLoanComplianceWith209))
                ) && 
                (
                    this.LenderDeterminedBorrowersInterest == input.LenderDeterminedBorrowersInterest ||
                    (this.LenderDeterminedBorrowersInterest != null &&
                    this.LenderDeterminedBorrowersInterest.Equals(input.LenderDeterminedBorrowersInterest))
                ) && 
                (
                    this.NewLoanIsGuaranteedIndicator == input.NewLoanIsGuaranteedIndicator ||
                    (this.NewLoanIsGuaranteedIndicator != null &&
                    this.NewLoanIsGuaranteedIndicator.Equals(input.NewLoanIsGuaranteedIndicator))
                ) && 
                (
                    this.NewLoanIsNegativeAmortizationFeatureIndicator == input.NewLoanIsNegativeAmortizationFeatureIndicator ||
                    (this.NewLoanIsNegativeAmortizationFeatureIndicator != null &&
                    this.NewLoanIsNegativeAmortizationFeatureIndicator.Equals(input.NewLoanIsNegativeAmortizationFeatureIndicator))
                ) && 
                (
                    this.NewLoanIsSpecialMortgageOriginatedIndicator == input.NewLoanIsSpecialMortgageOriginatedIndicator ||
                    (this.NewLoanIsSpecialMortgageOriginatedIndicator != null &&
                    this.NewLoanIsSpecialMortgageOriginatedIndicator.Equals(input.NewLoanIsSpecialMortgageOriginatedIndicator))
                ) && 
                (
                    this.NewLoanPaymentWithMiDifference == input.NewLoanPaymentWithMiDifference ||
                    (this.NewLoanPaymentWithMiDifference != null &&
                    this.NewLoanPaymentWithMiDifference.Equals(input.NewLoanPaymentWithMiDifference))
                ) && 
                (
                    this.NewLoanPaymentWithObligationDifference == input.NewLoanPaymentWithObligationDifference ||
                    (this.NewLoanPaymentWithObligationDifference != null &&
                    this.NewLoanPaymentWithObligationDifference.Equals(input.NewLoanPaymentWithObligationDifference))
                ) && 
                (
                    this.NewLoanPayOffConsolidateDebtIndicator == input.NewLoanPayOffConsolidateDebtIndicator ||
                    (this.NewLoanPayOffConsolidateDebtIndicator != null &&
                    this.NewLoanPayOffConsolidateDebtIndicator.Equals(input.NewLoanPayOffConsolidateDebtIndicator))
                ) && 
                (
                    this.NewLoanWeightedAverageInterestRatePercent == input.NewLoanWeightedAverageInterestRatePercent ||
                    (this.NewLoanWeightedAverageInterestRatePercent != null &&
                    this.NewLoanWeightedAverageInterestRatePercent.Equals(input.NewLoanWeightedAverageInterestRatePercent))
                ) && 
                (
                    this.ObtainingLowerIntMonthlyPaymentIndicator == input.ObtainingLowerIntMonthlyPaymentIndicator ||
                    (this.ObtainingLowerIntMonthlyPaymentIndicator != null &&
                    this.ObtainingLowerIntMonthlyPaymentIndicator.Equals(input.ObtainingLowerIntMonthlyPaymentIndicator))
                ) && 
                (
                    this.ObtainingLowerIntRateIndicator == input.ObtainingLowerIntRateIndicator ||
                    (this.ObtainingLowerIntRateIndicator != null &&
                    this.ObtainingLowerIntRateIndicator.Equals(input.ObtainingLowerIntRateIndicator))
                ) && 
                (
                    this.ObtainingShortAmortScheduleIndicator == input.ObtainingShortAmortScheduleIndicator ||
                    (this.ObtainingShortAmortScheduleIndicator != null &&
                    this.ObtainingShortAmortScheduleIndicator.Equals(input.ObtainingShortAmortScheduleIndicator))
                ) && 
                (
                    this.OtherReason == input.OtherReason ||
                    (this.OtherReason != null &&
                    this.OtherReason.Equals(input.OtherReason))
                ) && 
                (
                    this.OtherReasonDescription == input.OtherReasonDescription ||
                    (this.OtherReasonDescription != null &&
                    this.OtherReasonDescription.Equals(input.OtherReasonDescription))
                ) && 
                (
                    this.PrintBorrowerInitialLinesIndicator == input.PrintBorrowerInitialLinesIndicator ||
                    (this.PrintBorrowerInitialLinesIndicator != null &&
                    this.PrintBorrowerInitialLinesIndicator.Equals(input.PrintBorrowerInitialLinesIndicator))
                ) && 
                (
                    this.ProceedsOfNewLoanWillBeUsedIndicator == input.ProceedsOfNewLoanWillBeUsedIndicator ||
                    (this.ProceedsOfNewLoanWillBeUsedIndicator != null &&
                    this.ProceedsOfNewLoanWillBeUsedIndicator.Equals(input.ProceedsOfNewLoanWillBeUsedIndicator))
                ) && 
                (
                    this.ReceivingCashOutFromNewLoanGreaterThanClosingCostIndicator == input.ReceivingCashOutFromNewLoanGreaterThanClosingCostIndicator ||
                    (this.ReceivingCashOutFromNewLoanGreaterThanClosingCostIndicator != null &&
                    this.ReceivingCashOutFromNewLoanGreaterThanClosingCostIndicator.Equals(input.ReceivingCashOutFromNewLoanGreaterThanClosingCostIndicator))
                ) && 
                (
                    this.RefinancingLoanIsHomeEquityIndicator == input.RefinancingLoanIsHomeEquityIndicator ||
                    (this.RefinancingLoanIsHomeEquityIndicator != null &&
                    this.RefinancingLoanIsHomeEquityIndicator.Equals(input.RefinancingLoanIsHomeEquityIndicator))
                ) && 
                (
                    this.RefinancingRespondBonaFide == input.RefinancingRespondBonaFide ||
                    (this.RefinancingRespondBonaFide != null &&
                    this.RefinancingRespondBonaFide.Equals(input.RefinancingRespondBonaFide))
                ) && 
                (
                    this.NewLoanIsSafeHarborQM == input.NewLoanIsSafeHarborQM ||
                    (this.NewLoanIsSafeHarborQM != null &&
                    this.NewLoanIsSafeHarborQM.Equals(input.NewLoanIsSafeHarborQM))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.AprNotExceedIndicator != null)
                    hashCode = hashCode * 59 + this.AprNotExceedIndicator.GetHashCode();
                if (this.AvoidingForeclosureIndicator != null)
                    hashCode = hashCode * 59 + this.AvoidingForeclosureIndicator.GetHashCode();
                if (this.BeneficialChangedForBorrowerIndicator != null)
                    hashCode = hashCode * 59 + this.BeneficialChangedForBorrowerIndicator.GetHashCode();
                if (this.BonaFideFinancialEmergency != null)
                    hashCode = hashCode * 59 + this.BonaFideFinancialEmergency.GetHashCode();
                if (this.BorrowerCanRecoupCostofRefinancingIndicator != null)
                    hashCode = hashCode * 59 + this.BorrowerCanRecoupCostofRefinancingIndicator.GetHashCode();
                if (this.BorrowerCanRecoupIndicator != null)
                    hashCode = hashCode * 59 + this.BorrowerCanRecoupIndicator.GetHashCode();
                if (this.BorrowerMonthlyPaymentLowerThan20Indicator != null)
                    hashCode = hashCode * 59 + this.BorrowerMonthlyPaymentLowerThan20Indicator.GetHashCode();
                if (this.BorrowerReceivedReasonable != null)
                    hashCode = hashCode * 59 + this.BorrowerReceivedReasonable.GetHashCode();
                if (this.BorrowerReceivesAmountExcessCostAndFeesIndicator != null)
                    hashCode = hashCode * 59 + this.BorrowerReceivesAmountExcessCostAndFeesIndicator.GetHashCode();
                if (this.ChangeLoanFromArmtoFixedIndicator != null)
                    hashCode = hashCode * 59 + this.ChangeLoanFromArmtoFixedIndicator.GetHashCode();
                if (this.ChangingLoanToFixedRateIndicator != null)
                    hashCode = hashCode * 59 + this.ChangingLoanToFixedRateIndicator.GetHashCode();
                if (this.ConsolidatingOtherExistingLoansIntoNewLoanIndicator != null)
                    hashCode = hashCode * 59 + this.ConsolidatingOtherExistingLoansIntoNewLoanIndicator.GetHashCode();
                if (this.EliminatingBalloonPaymentIndicator != null)
                    hashCode = hashCode * 59 + this.EliminatingBalloonPaymentIndicator.GetHashCode();
                if (this.EliminatingNegArmIndicator != null)
                    hashCode = hashCode * 59 + this.EliminatingNegArmIndicator.GetHashCode();
                if (this.EliminatingPrivateMortgageInsuranceIndicator != null)
                    hashCode = hashCode * 59 + this.EliminatingPrivateMortgageInsuranceIndicator.GetHashCode();
                if (this.ExistingLoanAprPercent != null)
                    hashCode = hashCode * 59 + this.ExistingLoanAprPercent.GetHashCode();
                if (this.ExistingLoanBalloonIndicator != null)
                    hashCode = hashCode * 59 + this.ExistingLoanBalloonIndicator.GetHashCode();
                if (this.ExistingLoanBorrowerReceivesCashOutAmount != null)
                    hashCode = hashCode * 59 + this.ExistingLoanBorrowerReceivesCashOutAmount.GetHashCode();
                if (this.ExistingLoanBorrowerReceivesCashOutIndicator != null)
                    hashCode = hashCode * 59 + this.ExistingLoanBorrowerReceivesCashOutIndicator.GetHashCode();
                if (this.ExistingLoanBottomRatioPercent != null)
                    hashCode = hashCode * 59 + this.ExistingLoanBottomRatioPercent.GetHashCode();
                if (this.ExistingLoanDateLoanClosed != null)
                    hashCode = hashCode * 59 + this.ExistingLoanDateLoanClosed.GetHashCode();
                if (this.ExistingLoanFullyIndexRatePercent != null)
                    hashCode = hashCode * 59 + this.ExistingLoanFullyIndexRatePercent.GetHashCode();
                if (this.ExistingLoanInterestRatePercent != null)
                    hashCode = hashCode * 59 + this.ExistingLoanInterestRatePercent.GetHashCode();
                if (this.ExistingLoanIsGuaranteedIndicator != null)
                    hashCode = hashCode * 59 + this.ExistingLoanIsGuaranteedIndicator.GetHashCode();
                if (this.ExistingLoanIsLoanRefinancedAsSpecial != null)
                    hashCode = hashCode * 59 + this.ExistingLoanIsLoanRefinancedAsSpecial.GetHashCode();
                if (this.ExistingLoanIsNegativeAmortizationFeatureIndicator != null)
                    hashCode = hashCode * 59 + this.ExistingLoanIsNegativeAmortizationFeatureIndicator.GetHashCode();
                if (this.ExistingLoanIsPrepaymentPenalty != null)
                    hashCode = hashCode * 59 + this.ExistingLoanIsPrepaymentPenalty.GetHashCode();
                if (this.ExistingLoanLoanAmortizationType != null)
                    hashCode = hashCode * 59 + this.ExistingLoanLoanAmortizationType.GetHashCode();
                if (this.ExistingLoanLoanAmount != null)
                    hashCode = hashCode * 59 + this.ExistingLoanLoanAmount.GetHashCode();
                if (this.ExistingLoanLoanTerm != null)
                    hashCode = hashCode * 59 + this.ExistingLoanLoanTerm.GetHashCode();
                if (this.ExistingLoanLtvPercent != null)
                    hashCode = hashCode * 59 + this.ExistingLoanLtvPercent.GetHashCode();
                if (this.ExistingLoanMaximumRatePercent != null)
                    hashCode = hashCode * 59 + this.ExistingLoanMaximumRatePercent.GetHashCode();
                if (this.ExistingLoanMonthsRemaining != null)
                    hashCode = hashCode * 59 + this.ExistingLoanMonthsRemaining.GetHashCode();
                if (this.ExistingLoanPaymentAmount != null)
                    hashCode = hashCode * 59 + this.ExistingLoanPaymentAmount.GetHashCode();
                if (this.ExistingLoanPaymentDifference != null)
                    hashCode = hashCode * 59 + this.ExistingLoanPaymentDifference.GetHashCode();
                if (this.ExistingLoanPaymentIncludeMiObligation != null)
                    hashCode = hashCode * 59 + this.ExistingLoanPaymentIncludeMiObligation.GetHashCode();
                if (this.ExistingLoanPaymentIncludeMortgageInsurance != null)
                    hashCode = hashCode * 59 + this.ExistingLoanPaymentIncludeMortgageInsurance.GetHashCode();
                if (this.ExistingLoanPrepaymentPenaltyAmountIncludedInNewLoan != null)
                    hashCode = hashCode * 59 + this.ExistingLoanPrepaymentPenaltyAmountIncludedInNewLoan.GetHashCode();
                if (this.ExistingLoanPrepaymentPenaltyBasedOn != null)
                    hashCode = hashCode * 59 + this.ExistingLoanPrepaymentPenaltyBasedOn.GetHashCode();
                if (this.ExistingLoanPrepaymentPenaltyPercentage != null)
                    hashCode = hashCode * 59 + this.ExistingLoanPrepaymentPenaltyPercentage.GetHashCode();
                if (this.ExistingLoanPrepaymentPenaltyTerm != null)
                    hashCode = hashCode * 59 + this.ExistingLoanPrepaymentPenaltyTerm.GetHashCode();
                if (this.ExistingLoanProvidedByLicenseeType != null)
                    hashCode = hashCode * 59 + this.ExistingLoanProvidedByLicenseeType.GetHashCode();
                if (this.ExistingLoanPurposeType != null)
                    hashCode = hashCode * 59 + this.ExistingLoanPurposeType.GetHashCode();
                if (this.ExistingLoanRecoupCostsYears != null)
                    hashCode = hashCode * 59 + this.ExistingLoanRecoupCostsYears.GetHashCode();
                if (this.ExistingLoanSavingsAmount != null)
                    hashCode = hashCode * 59 + this.ExistingLoanSavingsAmount.GetHashCode();
                if (this.ExistingLoanTotalDebtPayoff != null)
                    hashCode = hashCode * 59 + this.ExistingLoanTotalDebtPayoff.GetHashCode();
                if (this.ExistingLoanWeightedAverageInterestRatePercent != null)
                    hashCode = hashCode * 59 + this.ExistingLoanWeightedAverageInterestRatePercent.GetHashCode();
                if (this.HomeLoanComplianceWith209 != null)
                    hashCode = hashCode * 59 + this.HomeLoanComplianceWith209.GetHashCode();
                if (this.LenderDeterminedBorrowersInterest != null)
                    hashCode = hashCode * 59 + this.LenderDeterminedBorrowersInterest.GetHashCode();
                if (this.NewLoanIsGuaranteedIndicator != null)
                    hashCode = hashCode * 59 + this.NewLoanIsGuaranteedIndicator.GetHashCode();
                if (this.NewLoanIsNegativeAmortizationFeatureIndicator != null)
                    hashCode = hashCode * 59 + this.NewLoanIsNegativeAmortizationFeatureIndicator.GetHashCode();
                if (this.NewLoanIsSpecialMortgageOriginatedIndicator != null)
                    hashCode = hashCode * 59 + this.NewLoanIsSpecialMortgageOriginatedIndicator.GetHashCode();
                if (this.NewLoanPaymentWithMiDifference != null)
                    hashCode = hashCode * 59 + this.NewLoanPaymentWithMiDifference.GetHashCode();
                if (this.NewLoanPaymentWithObligationDifference != null)
                    hashCode = hashCode * 59 + this.NewLoanPaymentWithObligationDifference.GetHashCode();
                if (this.NewLoanPayOffConsolidateDebtIndicator != null)
                    hashCode = hashCode * 59 + this.NewLoanPayOffConsolidateDebtIndicator.GetHashCode();
                if (this.NewLoanWeightedAverageInterestRatePercent != null)
                    hashCode = hashCode * 59 + this.NewLoanWeightedAverageInterestRatePercent.GetHashCode();
                if (this.ObtainingLowerIntMonthlyPaymentIndicator != null)
                    hashCode = hashCode * 59 + this.ObtainingLowerIntMonthlyPaymentIndicator.GetHashCode();
                if (this.ObtainingLowerIntRateIndicator != null)
                    hashCode = hashCode * 59 + this.ObtainingLowerIntRateIndicator.GetHashCode();
                if (this.ObtainingShortAmortScheduleIndicator != null)
                    hashCode = hashCode * 59 + this.ObtainingShortAmortScheduleIndicator.GetHashCode();
                if (this.OtherReason != null)
                    hashCode = hashCode * 59 + this.OtherReason.GetHashCode();
                if (this.OtherReasonDescription != null)
                    hashCode = hashCode * 59 + this.OtherReasonDescription.GetHashCode();
                if (this.PrintBorrowerInitialLinesIndicator != null)
                    hashCode = hashCode * 59 + this.PrintBorrowerInitialLinesIndicator.GetHashCode();
                if (this.ProceedsOfNewLoanWillBeUsedIndicator != null)
                    hashCode = hashCode * 59 + this.ProceedsOfNewLoanWillBeUsedIndicator.GetHashCode();
                if (this.ReceivingCashOutFromNewLoanGreaterThanClosingCostIndicator != null)
                    hashCode = hashCode * 59 + this.ReceivingCashOutFromNewLoanGreaterThanClosingCostIndicator.GetHashCode();
                if (this.RefinancingLoanIsHomeEquityIndicator != null)
                    hashCode = hashCode * 59 + this.RefinancingLoanIsHomeEquityIndicator.GetHashCode();
                if (this.RefinancingRespondBonaFide != null)
                    hashCode = hashCode * 59 + this.RefinancingRespondBonaFide.GetHashCode();
                if (this.NewLoanIsSafeHarborQM != null)
                    hashCode = hashCode * 59 + this.NewLoanIsSafeHarborQM.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
