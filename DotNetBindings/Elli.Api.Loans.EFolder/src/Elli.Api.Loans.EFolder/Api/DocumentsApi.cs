/*
* Copyright 2017 Ellie Mae, Inc.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*
*  1. Redistributions of source code must retain the above copyright notice,
*     this list of conditions and the following disclaimer.
*
*  2. Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*  3. Neither the name of the copyright holder nor the names of its
*     contributors may be used to endorse or promote products derived from this
*     software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.
*/

/* 
 * Loan
 *
 * APIs to manage eFolder related entities - document and attachment.
 *
 * OpenAPI spec version: 1.4.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Elli.Api.Loans.EFolder.Client;
using Elli.Api.Loans.EFolder.Model;

namespace Elli.Api.Loans.EFolder.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDocumentsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new document
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Loan GUID</param>
        /// <param name="view"> (optional)</param>
        /// <param name="input"> (optional)</param>
        /// <returns>Object</returns>
        Object CreateDocument (string loanId, string view = null, EFolderDocumentContract input = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new document
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Loan GUID</param>
        /// <param name="view"> (optional)</param>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateDocumentWithHttpInfo (string loanId, string view = null, EFolderDocumentContract input = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a document by its ID
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document GUID</param>
        /// <param name="loanId">Loan GUID</param>
        /// <returns>EFolderDocumentContract</returns>
        EFolderDocumentContract GetDocument (string documentId, string loanId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a document by its ID
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document GUID</param>
        /// <param name="loanId">Loan GUID</param>
        /// <returns>ApiResponse of EFolderDocumentContract</returns>
        ApiResponse<EFolderDocumentContract> GetDocumentWithHttpInfo (string documentId, string loanId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all documents for a loan
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Loan GUID</param>
        /// <returns>List&lt;EFolderDocumentContract&gt;</returns>
        List<EFolderDocumentContract> GetDocuments (string loanId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all documents for a loan
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Loan GUID</param>
        /// <returns>ApiResponse of List&lt;EFolderDocumentContract&gt;</returns>
        ApiResponse<List<EFolderDocumentContract>> GetDocumentsWithHttpInfo (string loanId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all attachments of a loan within a specific document
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document GUID</param>
        /// <param name="loanId">Loan GUID</param>
        /// <returns>List&lt;EFolderEntityRefContract&gt;</returns>
        List<EFolderEntityRefContract> RetrieveDocAttachments (string documentId, string loanId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all attachments of a loan within a specific document
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document GUID</param>
        /// <param name="loanId">Loan GUID</param>
        /// <returns>ApiResponse of List&lt;EFolderEntityRefContract&gt;</returns>
        ApiResponse<List<EFolderEntityRefContract>> RetrieveDocAttachmentsWithHttpInfo (string documentId, string loanId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Assign/Unassign attachment of a loan within a document
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document GUID</param>
        /// <param name="loanId">Loan GUID</param>
        /// <param name="action">Can be add or remove to Assign or Unassign attachment.</param>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void UpdateDocAttachments (string documentId, string loanId, string action, List<EFolderEntityRefContract> input = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Assign/Unassign attachment of a loan within a document
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document GUID</param>
        /// <param name="loanId">Loan GUID</param>
        /// <param name="action">Can be add or remove to Assign or Unassign attachment.</param>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateDocAttachmentsWithHttpInfo (string documentId, string loanId, string action, List<EFolderEntityRefContract> input = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update a document by its ID
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document GUID</param>
        /// <param name="loanId">Loan GUID</param>
        /// <param name="view"> (optional)</param>
        /// <param name="input"> (optional)</param>
        /// <returns>Object</returns>
        Object UpdateDocument (string documentId, string loanId, string view = null, EFolderDocumentContract input = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update a document by its ID
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document GUID</param>
        /// <param name="loanId">Loan GUID</param>
        /// <param name="view"> (optional)</param>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateDocumentWithHttpInfo (string documentId, string loanId, string view = null, EFolderDocumentContract input = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new document
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Loan GUID</param>
        /// <param name="view"> (optional)</param>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateDocumentAsync (string loanId, string view = null, EFolderDocumentContract input = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new document
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Loan GUID</param>
        /// <param name="view"> (optional)</param>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateDocumentAsyncWithHttpInfo (string loanId, string view = null, EFolderDocumentContract input = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a document by its ID
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document GUID</param>
        /// <param name="loanId">Loan GUID</param>
        /// <returns>Task of EFolderDocumentContract</returns>
        System.Threading.Tasks.Task<EFolderDocumentContract> GetDocumentAsync (string documentId, string loanId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a document by its ID
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document GUID</param>
        /// <param name="loanId">Loan GUID</param>
        /// <returns>Task of ApiResponse (EFolderDocumentContract)</returns>
        System.Threading.Tasks.Task<ApiResponse<EFolderDocumentContract>> GetDocumentAsyncWithHttpInfo (string documentId, string loanId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all documents for a loan
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Loan GUID</param>
        /// <returns>Task of List&lt;EFolderDocumentContract&gt;</returns>
        System.Threading.Tasks.Task<List<EFolderDocumentContract>> GetDocumentsAsync (string loanId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all documents for a loan
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Loan GUID</param>
        /// <returns>Task of ApiResponse (List&lt;EFolderDocumentContract&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EFolderDocumentContract>>> GetDocumentsAsyncWithHttpInfo (string loanId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all attachments of a loan within a specific document
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document GUID</param>
        /// <param name="loanId">Loan GUID</param>
        /// <returns>Task of List&lt;EFolderEntityRefContract&gt;</returns>
        System.Threading.Tasks.Task<List<EFolderEntityRefContract>> RetrieveDocAttachmentsAsync (string documentId, string loanId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all attachments of a loan within a specific document
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document GUID</param>
        /// <param name="loanId">Loan GUID</param>
        /// <returns>Task of ApiResponse (List&lt;EFolderEntityRefContract&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EFolderEntityRefContract>>> RetrieveDocAttachmentsAsyncWithHttpInfo (string documentId, string loanId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Assign/Unassign attachment of a loan within a document
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document GUID</param>
        /// <param name="loanId">Loan GUID</param>
        /// <param name="action">Can be add or remove to Assign or Unassign attachment.</param>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateDocAttachmentsAsync (string documentId, string loanId, string action, List<EFolderEntityRefContract> input = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Assign/Unassign attachment of a loan within a document
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document GUID</param>
        /// <param name="loanId">Loan GUID</param>
        /// <param name="action">Can be add or remove to Assign or Unassign attachment.</param>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateDocAttachmentsAsyncWithHttpInfo (string documentId, string loanId, string action, List<EFolderEntityRefContract> input = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update a document by its ID
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document GUID</param>
        /// <param name="loanId">Loan GUID</param>
        /// <param name="view"> (optional)</param>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateDocumentAsync (string documentId, string loanId, string view = null, EFolderDocumentContract input = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update a document by its ID
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document GUID</param>
        /// <param name="loanId">Loan GUID</param>
        /// <param name="view"> (optional)</param>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateDocumentAsyncWithHttpInfo (string documentId, string loanId, string view = null, EFolderDocumentContract input = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DocumentsApi : IDocumentsApi
    {
        private Elli.Api.Loans.EFolder.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DocumentsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Elli.Api.Loans.EFolder.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DocumentsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Elli.Api.Loans.EFolder.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Elli.Api.Loans.EFolder.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Create a new document
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Loan GUID</param>
        /// <param name="view"> (optional)</param>
        /// <param name="input"> (optional)</param>
        /// <returns>Object</returns>
        public Object CreateDocument (string loanId, string view = null, EFolderDocumentContract input = null)
        {
             ApiResponse<Object> localVarResponse = CreateDocumentWithHttpInfo(loanId, view, input);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a new document
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Loan GUID</param>
        /// <param name="view"> (optional)</param>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateDocumentWithHttpInfo (string loanId, string view = null, EFolderDocumentContract input = null)
        {
            // verify the required parameter 'loanId' is set
            if (loanId == null)
                throw new ApiException(400, "Missing required parameter 'loanId' when calling DocumentsApi->CreateDocument");

            var localVarPath = "/encompass/v1/loans/{loanId}/documents/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loanId != null) localVarPathParams.Add("loanId", Configuration.ApiClient.ParameterToString(loanId)); // path parameter
            if (view != null) localVarQueryParams.Add("view", Configuration.ApiClient.ParameterToString(view)); // query parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Create a new document
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Loan GUID</param>
        /// <param name="view"> (optional)</param>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateDocumentAsync (string loanId, string view = null, EFolderDocumentContract input = null)
        {
             ApiResponse<Object> localVarResponse = await CreateDocumentAsyncWithHttpInfo(loanId, view, input);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Create a new document
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Loan GUID</param>
        /// <param name="view"> (optional)</param>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateDocumentAsyncWithHttpInfo (string loanId, string view = null, EFolderDocumentContract input = null)
        {
            // verify the required parameter 'loanId' is set
            if (loanId == null)
                throw new ApiException(400, "Missing required parameter 'loanId' when calling DocumentsApi->CreateDocument");

            var localVarPath = "/encompass/v1/loans/{loanId}/documents/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loanId != null) localVarPathParams.Add("loanId", Configuration.ApiClient.ParameterToString(loanId)); // path parameter
            if (view != null) localVarQueryParams.Add("view", Configuration.ApiClient.ParameterToString(view)); // query parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Retrieves a document by its ID
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document GUID</param>
        /// <param name="loanId">Loan GUID</param>
        /// <returns>EFolderDocumentContract</returns>
        public EFolderDocumentContract GetDocument (string documentId, string loanId)
        {
             ApiResponse<EFolderDocumentContract> localVarResponse = GetDocumentWithHttpInfo(documentId, loanId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves a document by its ID
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document GUID</param>
        /// <param name="loanId">Loan GUID</param>
        /// <returns>ApiResponse of EFolderDocumentContract</returns>
        public ApiResponse< EFolderDocumentContract > GetDocumentWithHttpInfo (string documentId, string loanId)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->GetDocument");
            // verify the required parameter 'loanId' is set
            if (loanId == null)
                throw new ApiException(400, "Missing required parameter 'loanId' when calling DocumentsApi->GetDocument");

            var localVarPath = "/encompass/v1/loans/{loanId}/documents/{documentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (loanId != null) localVarPathParams.Add("loanId", Configuration.ApiClient.ParameterToString(loanId)); // path parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EFolderDocumentContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EFolderDocumentContract) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EFolderDocumentContract)));
        }

        /// <summary>
        ///  Retrieves a document by its ID
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document GUID</param>
        /// <param name="loanId">Loan GUID</param>
        /// <returns>Task of EFolderDocumentContract</returns>
        public async System.Threading.Tasks.Task<EFolderDocumentContract> GetDocumentAsync (string documentId, string loanId)
        {
             ApiResponse<EFolderDocumentContract> localVarResponse = await GetDocumentAsyncWithHttpInfo(documentId, loanId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves a document by its ID
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document GUID</param>
        /// <param name="loanId">Loan GUID</param>
        /// <returns>Task of ApiResponse (EFolderDocumentContract)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EFolderDocumentContract>> GetDocumentAsyncWithHttpInfo (string documentId, string loanId)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->GetDocument");
            // verify the required parameter 'loanId' is set
            if (loanId == null)
                throw new ApiException(400, "Missing required parameter 'loanId' when calling DocumentsApi->GetDocument");

            var localVarPath = "/encompass/v1/loans/{loanId}/documents/{documentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (loanId != null) localVarPathParams.Add("loanId", Configuration.ApiClient.ParameterToString(loanId)); // path parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EFolderDocumentContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EFolderDocumentContract) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EFolderDocumentContract)));
        }

        /// <summary>
        ///  Retrieves all documents for a loan
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Loan GUID</param>
        /// <returns>List&lt;EFolderDocumentContract&gt;</returns>
        public List<EFolderDocumentContract> GetDocuments (string loanId)
        {
             ApiResponse<List<EFolderDocumentContract>> localVarResponse = GetDocumentsWithHttpInfo(loanId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all documents for a loan
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Loan GUID</param>
        /// <returns>ApiResponse of List&lt;EFolderDocumentContract&gt;</returns>
        public ApiResponse< List<EFolderDocumentContract> > GetDocumentsWithHttpInfo (string loanId)
        {
            // verify the required parameter 'loanId' is set
            if (loanId == null)
                throw new ApiException(400, "Missing required parameter 'loanId' when calling DocumentsApi->GetDocuments");

            var localVarPath = "/encompass/v1/loans/{loanId}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loanId != null) localVarPathParams.Add("loanId", Configuration.ApiClient.ParameterToString(loanId)); // path parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EFolderDocumentContract>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EFolderDocumentContract>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EFolderDocumentContract>)));
        }

        /// <summary>
        ///  Retrieves all documents for a loan
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Loan GUID</param>
        /// <returns>Task of List&lt;EFolderDocumentContract&gt;</returns>
        public async System.Threading.Tasks.Task<List<EFolderDocumentContract>> GetDocumentsAsync (string loanId)
        {
             ApiResponse<List<EFolderDocumentContract>> localVarResponse = await GetDocumentsAsyncWithHttpInfo(loanId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all documents for a loan
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Loan GUID</param>
        /// <returns>Task of ApiResponse (List&lt;EFolderDocumentContract&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EFolderDocumentContract>>> GetDocumentsAsyncWithHttpInfo (string loanId)
        {
            // verify the required parameter 'loanId' is set
            if (loanId == null)
                throw new ApiException(400, "Missing required parameter 'loanId' when calling DocumentsApi->GetDocuments");

            var localVarPath = "/encompass/v1/loans/{loanId}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loanId != null) localVarPathParams.Add("loanId", Configuration.ApiClient.ParameterToString(loanId)); // path parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EFolderDocumentContract>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EFolderDocumentContract>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EFolderDocumentContract>)));
        }

        /// <summary>
        ///  Retrieves all attachments of a loan within a specific document
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document GUID</param>
        /// <param name="loanId">Loan GUID</param>
        /// <returns>List&lt;EFolderEntityRefContract&gt;</returns>
        public List<EFolderEntityRefContract> RetrieveDocAttachments (string documentId, string loanId)
        {
             ApiResponse<List<EFolderEntityRefContract>> localVarResponse = RetrieveDocAttachmentsWithHttpInfo(documentId, loanId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all attachments of a loan within a specific document
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document GUID</param>
        /// <param name="loanId">Loan GUID</param>
        /// <returns>ApiResponse of List&lt;EFolderEntityRefContract&gt;</returns>
        public ApiResponse< List<EFolderEntityRefContract> > RetrieveDocAttachmentsWithHttpInfo (string documentId, string loanId)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->RetrieveDocAttachments");
            // verify the required parameter 'loanId' is set
            if (loanId == null)
                throw new ApiException(400, "Missing required parameter 'loanId' when calling DocumentsApi->RetrieveDocAttachments");

            var localVarPath = "/encompass/v1/loans/{loanId}/documents/{documentId}/attachments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (loanId != null) localVarPathParams.Add("loanId", Configuration.ApiClient.ParameterToString(loanId)); // path parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveDocAttachments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EFolderEntityRefContract>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EFolderEntityRefContract>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EFolderEntityRefContract>)));
        }

        /// <summary>
        ///  Retrieves all attachments of a loan within a specific document
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document GUID</param>
        /// <param name="loanId">Loan GUID</param>
        /// <returns>Task of List&lt;EFolderEntityRefContract&gt;</returns>
        public async System.Threading.Tasks.Task<List<EFolderEntityRefContract>> RetrieveDocAttachmentsAsync (string documentId, string loanId)
        {
             ApiResponse<List<EFolderEntityRefContract>> localVarResponse = await RetrieveDocAttachmentsAsyncWithHttpInfo(documentId, loanId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all attachments of a loan within a specific document
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document GUID</param>
        /// <param name="loanId">Loan GUID</param>
        /// <returns>Task of ApiResponse (List&lt;EFolderEntityRefContract&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EFolderEntityRefContract>>> RetrieveDocAttachmentsAsyncWithHttpInfo (string documentId, string loanId)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->RetrieveDocAttachments");
            // verify the required parameter 'loanId' is set
            if (loanId == null)
                throw new ApiException(400, "Missing required parameter 'loanId' when calling DocumentsApi->RetrieveDocAttachments");

            var localVarPath = "/encompass/v1/loans/{loanId}/documents/{documentId}/attachments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (loanId != null) localVarPathParams.Add("loanId", Configuration.ApiClient.ParameterToString(loanId)); // path parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveDocAttachments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EFolderEntityRefContract>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EFolderEntityRefContract>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EFolderEntityRefContract>)));
        }

        /// <summary>
        ///  Assign/Unassign attachment of a loan within a document
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document GUID</param>
        /// <param name="loanId">Loan GUID</param>
        /// <param name="action">Can be add or remove to Assign or Unassign attachment.</param>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void UpdateDocAttachments (string documentId, string loanId, string action, List<EFolderEntityRefContract> input = null)
        {
             UpdateDocAttachmentsWithHttpInfo(documentId, loanId, action, input);
        }

        /// <summary>
        ///  Assign/Unassign attachment of a loan within a document
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document GUID</param>
        /// <param name="loanId">Loan GUID</param>
        /// <param name="action">Can be add or remove to Assign or Unassign attachment.</param>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateDocAttachmentsWithHttpInfo (string documentId, string loanId, string action, List<EFolderEntityRefContract> input = null)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->UpdateDocAttachments");
            // verify the required parameter 'loanId' is set
            if (loanId == null)
                throw new ApiException(400, "Missing required parameter 'loanId' when calling DocumentsApi->UpdateDocAttachments");
            // verify the required parameter 'action' is set
            if (action == null)
                throw new ApiException(400, "Missing required parameter 'action' when calling DocumentsApi->UpdateDocAttachments");

            var localVarPath = "/encompass/v1/loans/{loanId}/documents/{documentId}/attachments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (loanId != null) localVarPathParams.Add("loanId", Configuration.ApiClient.ParameterToString(loanId)); // path parameter
            if (action != null) localVarQueryParams.Add("action", Configuration.ApiClient.ParameterToString(action)); // query parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDocAttachments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Assign/Unassign attachment of a loan within a document
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document GUID</param>
        /// <param name="loanId">Loan GUID</param>
        /// <param name="action">Can be add or remove to Assign or Unassign attachment.</param>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateDocAttachmentsAsync (string documentId, string loanId, string action, List<EFolderEntityRefContract> input = null)
        {
             await UpdateDocAttachmentsAsyncWithHttpInfo(documentId, loanId, action, input);

        }

        /// <summary>
        ///  Assign/Unassign attachment of a loan within a document
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document GUID</param>
        /// <param name="loanId">Loan GUID</param>
        /// <param name="action">Can be add or remove to Assign or Unassign attachment.</param>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateDocAttachmentsAsyncWithHttpInfo (string documentId, string loanId, string action, List<EFolderEntityRefContract> input = null)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->UpdateDocAttachments");
            // verify the required parameter 'loanId' is set
            if (loanId == null)
                throw new ApiException(400, "Missing required parameter 'loanId' when calling DocumentsApi->UpdateDocAttachments");
            // verify the required parameter 'action' is set
            if (action == null)
                throw new ApiException(400, "Missing required parameter 'action' when calling DocumentsApi->UpdateDocAttachments");

            var localVarPath = "/encompass/v1/loans/{loanId}/documents/{documentId}/attachments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (loanId != null) localVarPathParams.Add("loanId", Configuration.ApiClient.ParameterToString(loanId)); // path parameter
            if (action != null) localVarQueryParams.Add("action", Configuration.ApiClient.ParameterToString(action)); // query parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDocAttachments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Update a document by its ID
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document GUID</param>
        /// <param name="loanId">Loan GUID</param>
        /// <param name="view"> (optional)</param>
        /// <param name="input"> (optional)</param>
        /// <returns>Object</returns>
        public Object UpdateDocument (string documentId, string loanId, string view = null, EFolderDocumentContract input = null)
        {
             ApiResponse<Object> localVarResponse = UpdateDocumentWithHttpInfo(documentId, loanId, view, input);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Update a document by its ID
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document GUID</param>
        /// <param name="loanId">Loan GUID</param>
        /// <param name="view"> (optional)</param>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateDocumentWithHttpInfo (string documentId, string loanId, string view = null, EFolderDocumentContract input = null)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->UpdateDocument");
            // verify the required parameter 'loanId' is set
            if (loanId == null)
                throw new ApiException(400, "Missing required parameter 'loanId' when calling DocumentsApi->UpdateDocument");

            var localVarPath = "/encompass/v1/loans/{loanId}/documents/{documentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (loanId != null) localVarPathParams.Add("loanId", Configuration.ApiClient.ParameterToString(loanId)); // path parameter
            if (view != null) localVarQueryParams.Add("view", Configuration.ApiClient.ParameterToString(view)); // query parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Update a document by its ID
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document GUID</param>
        /// <param name="loanId">Loan GUID</param>
        /// <param name="view"> (optional)</param>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateDocumentAsync (string documentId, string loanId, string view = null, EFolderDocumentContract input = null)
        {
             ApiResponse<Object> localVarResponse = await UpdateDocumentAsyncWithHttpInfo(documentId, loanId, view, input);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Update a document by its ID
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document GUID</param>
        /// <param name="loanId">Loan GUID</param>
        /// <param name="view"> (optional)</param>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateDocumentAsyncWithHttpInfo (string documentId, string loanId, string view = null, EFolderDocumentContract input = null)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->UpdateDocument");
            // verify the required parameter 'loanId' is set
            if (loanId == null)
                throw new ApiException(400, "Missing required parameter 'loanId' when calling DocumentsApi->UpdateDocument");

            var localVarPath = "/encompass/v1/loans/{loanId}/documents/{documentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (loanId != null) localVarPathParams.Add("loanId", Configuration.ApiClient.ParameterToString(loanId)); // path parameter
            if (view != null) localVarQueryParams.Add("view", Configuration.ApiClient.ParameterToString(view)); // query parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

    }
}
