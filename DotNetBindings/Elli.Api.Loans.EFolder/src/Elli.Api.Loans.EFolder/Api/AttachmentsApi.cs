/*
* Copyright 2017 Ellie Mae, Inc.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*
*  1. Redistributions of source code must retain the above copyright notice,
*     this list of conditions and the following disclaimer.
*
*  2. Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*  3. Neither the name of the copyright holder nor the names of its
*     contributors may be used to endorse or promote products derived from this
*     software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.
*/

/* 
 * Loan
 *
 * APIs to manage eFolder related entities - document and attachment.
 *
 * OpenAPI spec version: 1.4.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Elli.Api.Loans.EFolder.Client;
using Elli.Api.Loans.EFolder.Model;

namespace Elli.Api.Loans.EFolder.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAttachmentsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the attachment URL for a file in the eFolder. The attachment URL is the full URL where the attachment is located in the eFolder. Getting the attachment URL is the first step in retrieving an attachment from the eFolder.
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment GUID</param>
        /// <param name="loanId">Loan GUID</param>
        /// <returns>EFolderMediaUrlContract</returns>
        EFolderMediaUrlContract DownloadAttachment (string attachmentId, string loanId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the attachment URL for a file in the eFolder. The attachment URL is the full URL where the attachment is located in the eFolder. Getting the attachment URL is the first step in retrieving an attachment from the eFolder.
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment GUID</param>
        /// <param name="loanId">Loan GUID</param>
        /// <returns>ApiResponse of EFolderMediaUrlContract</returns>
        ApiResponse<EFolderMediaUrlContract> DownloadAttachmentWithHttpInfo (string attachmentId, string loanId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a URL to get a specific page within an attachment
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment Id</param>
        /// <param name="pageId">Page id within the attachment</param>
        /// <param name="loanId">Loan GUID</param>
        /// <returns>EFolderMediaUrlContract</returns>
        EFolderMediaUrlContract DownloadAttachmentPage (string attachmentId, string pageId, string loanId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a URL to get a specific page within an attachment
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment Id</param>
        /// <param name="pageId">Page id within the attachment</param>
        /// <param name="loanId">Loan GUID</param>
        /// <returns>ApiResponse of EFolderMediaUrlContract</returns>
        ApiResponse<EFolderMediaUrlContract> DownloadAttachmentPageWithHttpInfo (string attachmentId, string pageId, string loanId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an URL to get the thumbnails for a specified page within an attachment
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment GUID</param>
        /// <param name="pageId">Page Id within the attachment</param>
        /// <param name="loanId">Loan GUID</param>
        /// <returns>EFolderMediaUrlContract</returns>
        EFolderMediaUrlContract DownloadAttachmentThumbnail (string attachmentId, string pageId, string loanId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an URL to get the thumbnails for a specified page within an attachment
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment GUID</param>
        /// <param name="pageId">Page Id within the attachment</param>
        /// <param name="loanId">Loan GUID</param>
        /// <returns>ApiResponse of EFolderMediaUrlContract</returns>
        ApiResponse<EFolderMediaUrlContract> DownloadAttachmentThumbnailWithHttpInfo (string attachmentId, string pageId, string loanId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves properties for a specified file attachment.
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment ID</param>
        /// <param name="loanId">Loan GUID</param>
        /// <param name="includeImageUrls">Include image URLs in response in case attachment type is Image. (optional)</param>
        /// <param name="generateUrl">Boolean to specify if media url needs to be generated. (optional)</param>
        /// <returns>EFolderAttachmentContract</returns>
        EFolderAttachmentContract GetAttachment (string attachmentId, string loanId, bool? includeImageUrls = null, string generateUrl = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves properties for a specified file attachment.
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment ID</param>
        /// <param name="loanId">Loan GUID</param>
        /// <param name="includeImageUrls">Include image URLs in response in case attachment type is Image. (optional)</param>
        /// <param name="generateUrl">Boolean to specify if media url needs to be generated. (optional)</param>
        /// <returns>ApiResponse of EFolderAttachmentContract</returns>
        ApiResponse<EFolderAttachmentContract> GetAttachmentWithHttpInfo (string attachmentId, string loanId, bool? includeImageUrls = null, string generateUrl = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a list of files attached to a specified loan. The response includes all properties for all assigned and unassigned file attachments.
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Loan GUID</param>
        /// <returns>List&lt;EFolderAttachmentContract&gt;</returns>
        List<EFolderAttachmentContract> GetAttachments (string loanId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a list of files attached to a specified loan. The response includes all properties for all assigned and unassigned file attachments.
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Loan GUID</param>
        /// <returns>ApiResponse of List&lt;EFolderAttachmentContract&gt;</returns>
        ApiResponse<List<EFolderAttachmentContract>> GetAttachmentsWithHttpInfo (string loanId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates properties for a specified file attachment.
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment GUID</param>
        /// <param name="loanId">Loan GUID</param>
        /// <param name="view"> (optional)</param>
        /// <param name="input"> (optional)</param>
        /// <returns>Object</returns>
        Object UpdateAttachment (string attachmentId, string loanId, string view = null, EFolderAttachmentContract input = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates properties for a specified file attachment.
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment GUID</param>
        /// <param name="loanId">Loan GUID</param>
        /// <param name="view"> (optional)</param>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateAttachmentWithHttpInfo (string attachmentId, string loanId, string view = null, EFolderAttachmentContract input = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the URL for uploading an attachment. This URL is time sensitive. It must be invoked as a PUT with the attachment converted to a byteStream within the request body. The attachment ID is returned in location attribute of the PUT call&#39;s response header.
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Loan GUID</param>
        /// <param name="view">Acceptable value is ID/Entity. Specifying this value will retrieve the ID in the subsequent URL PUT call (optional)</param>
        /// <param name="input"> (optional)</param>
        /// <returns>EFolderMediaUrlContract</returns>
        EFolderMediaUrlContract UploadAttachment (string loanId, string view = null, EFolderMediaUrlContract input = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the URL for uploading an attachment. This URL is time sensitive. It must be invoked as a PUT with the attachment converted to a byteStream within the request body. The attachment ID is returned in location attribute of the PUT call&#39;s response header.
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Loan GUID</param>
        /// <param name="view">Acceptable value is ID/Entity. Specifying this value will retrieve the ID in the subsequent URL PUT call (optional)</param>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of EFolderMediaUrlContract</returns>
        ApiResponse<EFolderMediaUrlContract> UploadAttachmentWithHttpInfo (string loanId, string view = null, EFolderMediaUrlContract input = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the attachment URL for a file in the eFolder. The attachment URL is the full URL where the attachment is located in the eFolder. Getting the attachment URL is the first step in retrieving an attachment from the eFolder.
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment GUID</param>
        /// <param name="loanId">Loan GUID</param>
        /// <returns>Task of EFolderMediaUrlContract</returns>
        System.Threading.Tasks.Task<EFolderMediaUrlContract> DownloadAttachmentAsync (string attachmentId, string loanId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the attachment URL for a file in the eFolder. The attachment URL is the full URL where the attachment is located in the eFolder. Getting the attachment URL is the first step in retrieving an attachment from the eFolder.
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment GUID</param>
        /// <param name="loanId">Loan GUID</param>
        /// <returns>Task of ApiResponse (EFolderMediaUrlContract)</returns>
        System.Threading.Tasks.Task<ApiResponse<EFolderMediaUrlContract>> DownloadAttachmentAsyncWithHttpInfo (string attachmentId, string loanId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a URL to get a specific page within an attachment
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment Id</param>
        /// <param name="pageId">Page id within the attachment</param>
        /// <param name="loanId">Loan GUID</param>
        /// <returns>Task of EFolderMediaUrlContract</returns>
        System.Threading.Tasks.Task<EFolderMediaUrlContract> DownloadAttachmentPageAsync (string attachmentId, string pageId, string loanId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a URL to get a specific page within an attachment
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment Id</param>
        /// <param name="pageId">Page id within the attachment</param>
        /// <param name="loanId">Loan GUID</param>
        /// <returns>Task of ApiResponse (EFolderMediaUrlContract)</returns>
        System.Threading.Tasks.Task<ApiResponse<EFolderMediaUrlContract>> DownloadAttachmentPageAsyncWithHttpInfo (string attachmentId, string pageId, string loanId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an URL to get the thumbnails for a specified page within an attachment
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment GUID</param>
        /// <param name="pageId">Page Id within the attachment</param>
        /// <param name="loanId">Loan GUID</param>
        /// <returns>Task of EFolderMediaUrlContract</returns>
        System.Threading.Tasks.Task<EFolderMediaUrlContract> DownloadAttachmentThumbnailAsync (string attachmentId, string pageId, string loanId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an URL to get the thumbnails for a specified page within an attachment
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment GUID</param>
        /// <param name="pageId">Page Id within the attachment</param>
        /// <param name="loanId">Loan GUID</param>
        /// <returns>Task of ApiResponse (EFolderMediaUrlContract)</returns>
        System.Threading.Tasks.Task<ApiResponse<EFolderMediaUrlContract>> DownloadAttachmentThumbnailAsyncWithHttpInfo (string attachmentId, string pageId, string loanId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves properties for a specified file attachment.
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment ID</param>
        /// <param name="loanId">Loan GUID</param>
        /// <param name="includeImageUrls">Include image URLs in response in case attachment type is Image. (optional)</param>
        /// <param name="generateUrl">Boolean to specify if media url needs to be generated. (optional)</param>
        /// <returns>Task of EFolderAttachmentContract</returns>
        System.Threading.Tasks.Task<EFolderAttachmentContract> GetAttachmentAsync (string attachmentId, string loanId, bool? includeImageUrls = null, string generateUrl = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves properties for a specified file attachment.
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment ID</param>
        /// <param name="loanId">Loan GUID</param>
        /// <param name="includeImageUrls">Include image URLs in response in case attachment type is Image. (optional)</param>
        /// <param name="generateUrl">Boolean to specify if media url needs to be generated. (optional)</param>
        /// <returns>Task of ApiResponse (EFolderAttachmentContract)</returns>
        System.Threading.Tasks.Task<ApiResponse<EFolderAttachmentContract>> GetAttachmentAsyncWithHttpInfo (string attachmentId, string loanId, bool? includeImageUrls = null, string generateUrl = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a list of files attached to a specified loan. The response includes all properties for all assigned and unassigned file attachments.
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Loan GUID</param>
        /// <returns>Task of List&lt;EFolderAttachmentContract&gt;</returns>
        System.Threading.Tasks.Task<List<EFolderAttachmentContract>> GetAttachmentsAsync (string loanId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a list of files attached to a specified loan. The response includes all properties for all assigned and unassigned file attachments.
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Loan GUID</param>
        /// <returns>Task of ApiResponse (List&lt;EFolderAttachmentContract&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EFolderAttachmentContract>>> GetAttachmentsAsyncWithHttpInfo (string loanId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates properties for a specified file attachment.
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment GUID</param>
        /// <param name="loanId">Loan GUID</param>
        /// <param name="view"> (optional)</param>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateAttachmentAsync (string attachmentId, string loanId, string view = null, EFolderAttachmentContract input = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates properties for a specified file attachment.
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment GUID</param>
        /// <param name="loanId">Loan GUID</param>
        /// <param name="view"> (optional)</param>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAttachmentAsyncWithHttpInfo (string attachmentId, string loanId, string view = null, EFolderAttachmentContract input = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the URL for uploading an attachment. This URL is time sensitive. It must be invoked as a PUT with the attachment converted to a byteStream within the request body. The attachment ID is returned in location attribute of the PUT call&#39;s response header.
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Loan GUID</param>
        /// <param name="view">Acceptable value is ID/Entity. Specifying this value will retrieve the ID in the subsequent URL PUT call (optional)</param>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of EFolderMediaUrlContract</returns>
        System.Threading.Tasks.Task<EFolderMediaUrlContract> UploadAttachmentAsync (string loanId, string view = null, EFolderMediaUrlContract input = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the URL for uploading an attachment. This URL is time sensitive. It must be invoked as a PUT with the attachment converted to a byteStream within the request body. The attachment ID is returned in location attribute of the PUT call&#39;s response header.
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Loan GUID</param>
        /// <param name="view">Acceptable value is ID/Entity. Specifying this value will retrieve the ID in the subsequent URL PUT call (optional)</param>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse (EFolderMediaUrlContract)</returns>
        System.Threading.Tasks.Task<ApiResponse<EFolderMediaUrlContract>> UploadAttachmentAsyncWithHttpInfo (string loanId, string view = null, EFolderMediaUrlContract input = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AttachmentsApi : IAttachmentsApi
    {
        private Elli.Api.Loans.EFolder.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AttachmentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AttachmentsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Elli.Api.Loans.EFolder.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AttachmentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AttachmentsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Elli.Api.Loans.EFolder.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Elli.Api.Loans.EFolder.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Retrieves the attachment URL for a file in the eFolder. The attachment URL is the full URL where the attachment is located in the eFolder. Getting the attachment URL is the first step in retrieving an attachment from the eFolder.
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment GUID</param>
        /// <param name="loanId">Loan GUID</param>
        /// <returns>EFolderMediaUrlContract</returns>
        public EFolderMediaUrlContract DownloadAttachment (string attachmentId, string loanId)
        {
             ApiResponse<EFolderMediaUrlContract> localVarResponse = DownloadAttachmentWithHttpInfo(attachmentId, loanId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves the attachment URL for a file in the eFolder. The attachment URL is the full URL where the attachment is located in the eFolder. Getting the attachment URL is the first step in retrieving an attachment from the eFolder.
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment GUID</param>
        /// <param name="loanId">Loan GUID</param>
        /// <returns>ApiResponse of EFolderMediaUrlContract</returns>
        public ApiResponse< EFolderMediaUrlContract > DownloadAttachmentWithHttpInfo (string attachmentId, string loanId)
        {
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling AttachmentsApi->DownloadAttachment");
            // verify the required parameter 'loanId' is set
            if (loanId == null)
                throw new ApiException(400, "Missing required parameter 'loanId' when calling AttachmentsApi->DownloadAttachment");

            var localVarPath = "/encompass/v1/loans/{loanId}/attachments/{attachmentId}/url";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentId != null) localVarPathParams.Add("attachmentId", Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter
            if (loanId != null) localVarPathParams.Add("loanId", Configuration.ApiClient.ParameterToString(loanId)); // path parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EFolderMediaUrlContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EFolderMediaUrlContract) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EFolderMediaUrlContract)));
        }

        /// <summary>
        ///  Retrieves the attachment URL for a file in the eFolder. The attachment URL is the full URL where the attachment is located in the eFolder. Getting the attachment URL is the first step in retrieving an attachment from the eFolder.
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment GUID</param>
        /// <param name="loanId">Loan GUID</param>
        /// <returns>Task of EFolderMediaUrlContract</returns>
        public async System.Threading.Tasks.Task<EFolderMediaUrlContract> DownloadAttachmentAsync (string attachmentId, string loanId)
        {
             ApiResponse<EFolderMediaUrlContract> localVarResponse = await DownloadAttachmentAsyncWithHttpInfo(attachmentId, loanId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves the attachment URL for a file in the eFolder. The attachment URL is the full URL where the attachment is located in the eFolder. Getting the attachment URL is the first step in retrieving an attachment from the eFolder.
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment GUID</param>
        /// <param name="loanId">Loan GUID</param>
        /// <returns>Task of ApiResponse (EFolderMediaUrlContract)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EFolderMediaUrlContract>> DownloadAttachmentAsyncWithHttpInfo (string attachmentId, string loanId)
        {
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling AttachmentsApi->DownloadAttachment");
            // verify the required parameter 'loanId' is set
            if (loanId == null)
                throw new ApiException(400, "Missing required parameter 'loanId' when calling AttachmentsApi->DownloadAttachment");

            var localVarPath = "/encompass/v1/loans/{loanId}/attachments/{attachmentId}/url";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentId != null) localVarPathParams.Add("attachmentId", Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter
            if (loanId != null) localVarPathParams.Add("loanId", Configuration.ApiClient.ParameterToString(loanId)); // path parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EFolderMediaUrlContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EFolderMediaUrlContract) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EFolderMediaUrlContract)));
        }

        /// <summary>
        ///  Retrieves a URL to get a specific page within an attachment
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment Id</param>
        /// <param name="pageId">Page id within the attachment</param>
        /// <param name="loanId">Loan GUID</param>
        /// <returns>EFolderMediaUrlContract</returns>
        public EFolderMediaUrlContract DownloadAttachmentPage (string attachmentId, string pageId, string loanId)
        {
             ApiResponse<EFolderMediaUrlContract> localVarResponse = DownloadAttachmentPageWithHttpInfo(attachmentId, pageId, loanId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves a URL to get a specific page within an attachment
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment Id</param>
        /// <param name="pageId">Page id within the attachment</param>
        /// <param name="loanId">Loan GUID</param>
        /// <returns>ApiResponse of EFolderMediaUrlContract</returns>
        public ApiResponse< EFolderMediaUrlContract > DownloadAttachmentPageWithHttpInfo (string attachmentId, string pageId, string loanId)
        {
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling AttachmentsApi->DownloadAttachmentPage");
            // verify the required parameter 'pageId' is set
            if (pageId == null)
                throw new ApiException(400, "Missing required parameter 'pageId' when calling AttachmentsApi->DownloadAttachmentPage");
            // verify the required parameter 'loanId' is set
            if (loanId == null)
                throw new ApiException(400, "Missing required parameter 'loanId' when calling AttachmentsApi->DownloadAttachmentPage");

            var localVarPath = "/encompass/v1/loans/{loanId}/attachments/{attachmentId}/pages/{pageId}/url";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentId != null) localVarPathParams.Add("attachmentId", Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter
            if (pageId != null) localVarPathParams.Add("pageId", Configuration.ApiClient.ParameterToString(pageId)); // path parameter
            if (loanId != null) localVarPathParams.Add("loanId", Configuration.ApiClient.ParameterToString(loanId)); // path parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadAttachmentPage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EFolderMediaUrlContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EFolderMediaUrlContract) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EFolderMediaUrlContract)));
        }

        /// <summary>
        ///  Retrieves a URL to get a specific page within an attachment
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment Id</param>
        /// <param name="pageId">Page id within the attachment</param>
        /// <param name="loanId">Loan GUID</param>
        /// <returns>Task of EFolderMediaUrlContract</returns>
        public async System.Threading.Tasks.Task<EFolderMediaUrlContract> DownloadAttachmentPageAsync (string attachmentId, string pageId, string loanId)
        {
             ApiResponse<EFolderMediaUrlContract> localVarResponse = await DownloadAttachmentPageAsyncWithHttpInfo(attachmentId, pageId, loanId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves a URL to get a specific page within an attachment
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment Id</param>
        /// <param name="pageId">Page id within the attachment</param>
        /// <param name="loanId">Loan GUID</param>
        /// <returns>Task of ApiResponse (EFolderMediaUrlContract)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EFolderMediaUrlContract>> DownloadAttachmentPageAsyncWithHttpInfo (string attachmentId, string pageId, string loanId)
        {
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling AttachmentsApi->DownloadAttachmentPage");
            // verify the required parameter 'pageId' is set
            if (pageId == null)
                throw new ApiException(400, "Missing required parameter 'pageId' when calling AttachmentsApi->DownloadAttachmentPage");
            // verify the required parameter 'loanId' is set
            if (loanId == null)
                throw new ApiException(400, "Missing required parameter 'loanId' when calling AttachmentsApi->DownloadAttachmentPage");

            var localVarPath = "/encompass/v1/loans/{loanId}/attachments/{attachmentId}/pages/{pageId}/url";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentId != null) localVarPathParams.Add("attachmentId", Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter
            if (pageId != null) localVarPathParams.Add("pageId", Configuration.ApiClient.ParameterToString(pageId)); // path parameter
            if (loanId != null) localVarPathParams.Add("loanId", Configuration.ApiClient.ParameterToString(loanId)); // path parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadAttachmentPage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EFolderMediaUrlContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EFolderMediaUrlContract) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EFolderMediaUrlContract)));
        }

        /// <summary>
        ///  Retrieves an URL to get the thumbnails for a specified page within an attachment
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment GUID</param>
        /// <param name="pageId">Page Id within the attachment</param>
        /// <param name="loanId">Loan GUID</param>
        /// <returns>EFolderMediaUrlContract</returns>
        public EFolderMediaUrlContract DownloadAttachmentThumbnail (string attachmentId, string pageId, string loanId)
        {
             ApiResponse<EFolderMediaUrlContract> localVarResponse = DownloadAttachmentThumbnailWithHttpInfo(attachmentId, pageId, loanId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves an URL to get the thumbnails for a specified page within an attachment
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment GUID</param>
        /// <param name="pageId">Page Id within the attachment</param>
        /// <param name="loanId">Loan GUID</param>
        /// <returns>ApiResponse of EFolderMediaUrlContract</returns>
        public ApiResponse< EFolderMediaUrlContract > DownloadAttachmentThumbnailWithHttpInfo (string attachmentId, string pageId, string loanId)
        {
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling AttachmentsApi->DownloadAttachmentThumbnail");
            // verify the required parameter 'pageId' is set
            if (pageId == null)
                throw new ApiException(400, "Missing required parameter 'pageId' when calling AttachmentsApi->DownloadAttachmentThumbnail");
            // verify the required parameter 'loanId' is set
            if (loanId == null)
                throw new ApiException(400, "Missing required parameter 'loanId' when calling AttachmentsApi->DownloadAttachmentThumbnail");

            var localVarPath = "/encompass/v1/loans/{loanId}/attachments/{attachmentId}/pages/{pageId}/thumbnail/url";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentId != null) localVarPathParams.Add("attachmentId", Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter
            if (pageId != null) localVarPathParams.Add("pageId", Configuration.ApiClient.ParameterToString(pageId)); // path parameter
            if (loanId != null) localVarPathParams.Add("loanId", Configuration.ApiClient.ParameterToString(loanId)); // path parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadAttachmentThumbnail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EFolderMediaUrlContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EFolderMediaUrlContract) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EFolderMediaUrlContract)));
        }

        /// <summary>
        ///  Retrieves an URL to get the thumbnails for a specified page within an attachment
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment GUID</param>
        /// <param name="pageId">Page Id within the attachment</param>
        /// <param name="loanId">Loan GUID</param>
        /// <returns>Task of EFolderMediaUrlContract</returns>
        public async System.Threading.Tasks.Task<EFolderMediaUrlContract> DownloadAttachmentThumbnailAsync (string attachmentId, string pageId, string loanId)
        {
             ApiResponse<EFolderMediaUrlContract> localVarResponse = await DownloadAttachmentThumbnailAsyncWithHttpInfo(attachmentId, pageId, loanId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves an URL to get the thumbnails for a specified page within an attachment
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment GUID</param>
        /// <param name="pageId">Page Id within the attachment</param>
        /// <param name="loanId">Loan GUID</param>
        /// <returns>Task of ApiResponse (EFolderMediaUrlContract)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EFolderMediaUrlContract>> DownloadAttachmentThumbnailAsyncWithHttpInfo (string attachmentId, string pageId, string loanId)
        {
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling AttachmentsApi->DownloadAttachmentThumbnail");
            // verify the required parameter 'pageId' is set
            if (pageId == null)
                throw new ApiException(400, "Missing required parameter 'pageId' when calling AttachmentsApi->DownloadAttachmentThumbnail");
            // verify the required parameter 'loanId' is set
            if (loanId == null)
                throw new ApiException(400, "Missing required parameter 'loanId' when calling AttachmentsApi->DownloadAttachmentThumbnail");

            var localVarPath = "/encompass/v1/loans/{loanId}/attachments/{attachmentId}/pages/{pageId}/thumbnail/url";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentId != null) localVarPathParams.Add("attachmentId", Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter
            if (pageId != null) localVarPathParams.Add("pageId", Configuration.ApiClient.ParameterToString(pageId)); // path parameter
            if (loanId != null) localVarPathParams.Add("loanId", Configuration.ApiClient.ParameterToString(loanId)); // path parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadAttachmentThumbnail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EFolderMediaUrlContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EFolderMediaUrlContract) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EFolderMediaUrlContract)));
        }

        /// <summary>
        ///  Retrieves properties for a specified file attachment.
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment ID</param>
        /// <param name="loanId">Loan GUID</param>
        /// <param name="includeImageUrls">Include image URLs in response in case attachment type is Image. (optional)</param>
        /// <param name="generateUrl">Boolean to specify if media url needs to be generated. (optional)</param>
        /// <returns>EFolderAttachmentContract</returns>
        public EFolderAttachmentContract GetAttachment (string attachmentId, string loanId, bool? includeImageUrls = null, string generateUrl = null)
        {
             ApiResponse<EFolderAttachmentContract> localVarResponse = GetAttachmentWithHttpInfo(attachmentId, loanId, includeImageUrls, generateUrl);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves properties for a specified file attachment.
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment ID</param>
        /// <param name="loanId">Loan GUID</param>
        /// <param name="includeImageUrls">Include image URLs in response in case attachment type is Image. (optional)</param>
        /// <param name="generateUrl">Boolean to specify if media url needs to be generated. (optional)</param>
        /// <returns>ApiResponse of EFolderAttachmentContract</returns>
        public ApiResponse< EFolderAttachmentContract > GetAttachmentWithHttpInfo (string attachmentId, string loanId, bool? includeImageUrls = null, string generateUrl = null)
        {
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling AttachmentsApi->GetAttachment");
            // verify the required parameter 'loanId' is set
            if (loanId == null)
                throw new ApiException(400, "Missing required parameter 'loanId' when calling AttachmentsApi->GetAttachment");

            var localVarPath = "/encompass/v1/loans/{loanId}/attachments/{attachmentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentId != null) localVarPathParams.Add("attachmentId", Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter
            if (loanId != null) localVarPathParams.Add("loanId", Configuration.ApiClient.ParameterToString(loanId)); // path parameter
            if (includeImageUrls != null) localVarQueryParams.Add("includeImageUrls", Configuration.ApiClient.ParameterToString(includeImageUrls)); // query parameter
            if (generateUrl != null) localVarQueryParams.Add("generateUrl", Configuration.ApiClient.ParameterToString(generateUrl)); // query parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EFolderAttachmentContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EFolderAttachmentContract) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EFolderAttachmentContract)));
        }

        /// <summary>
        ///  Retrieves properties for a specified file attachment.
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment ID</param>
        /// <param name="loanId">Loan GUID</param>
        /// <param name="includeImageUrls">Include image URLs in response in case attachment type is Image. (optional)</param>
        /// <param name="generateUrl">Boolean to specify if media url needs to be generated. (optional)</param>
        /// <returns>Task of EFolderAttachmentContract</returns>
        public async System.Threading.Tasks.Task<EFolderAttachmentContract> GetAttachmentAsync (string attachmentId, string loanId, bool? includeImageUrls = null, string generateUrl = null)
        {
             ApiResponse<EFolderAttachmentContract> localVarResponse = await GetAttachmentAsyncWithHttpInfo(attachmentId, loanId, includeImageUrls, generateUrl);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves properties for a specified file attachment.
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment ID</param>
        /// <param name="loanId">Loan GUID</param>
        /// <param name="includeImageUrls">Include image URLs in response in case attachment type is Image. (optional)</param>
        /// <param name="generateUrl">Boolean to specify if media url needs to be generated. (optional)</param>
        /// <returns>Task of ApiResponse (EFolderAttachmentContract)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EFolderAttachmentContract>> GetAttachmentAsyncWithHttpInfo (string attachmentId, string loanId, bool? includeImageUrls = null, string generateUrl = null)
        {
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling AttachmentsApi->GetAttachment");
            // verify the required parameter 'loanId' is set
            if (loanId == null)
                throw new ApiException(400, "Missing required parameter 'loanId' when calling AttachmentsApi->GetAttachment");

            var localVarPath = "/encompass/v1/loans/{loanId}/attachments/{attachmentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentId != null) localVarPathParams.Add("attachmentId", Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter
            if (loanId != null) localVarPathParams.Add("loanId", Configuration.ApiClient.ParameterToString(loanId)); // path parameter
            if (includeImageUrls != null) localVarQueryParams.Add("includeImageUrls", Configuration.ApiClient.ParameterToString(includeImageUrls)); // query parameter
            if (generateUrl != null) localVarQueryParams.Add("generateUrl", Configuration.ApiClient.ParameterToString(generateUrl)); // query parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EFolderAttachmentContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EFolderAttachmentContract) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EFolderAttachmentContract)));
        }

        /// <summary>
        ///  Retrieves a list of files attached to a specified loan. The response includes all properties for all assigned and unassigned file attachments.
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Loan GUID</param>
        /// <returns>List&lt;EFolderAttachmentContract&gt;</returns>
        public List<EFolderAttachmentContract> GetAttachments (string loanId)
        {
             ApiResponse<List<EFolderAttachmentContract>> localVarResponse = GetAttachmentsWithHttpInfo(loanId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves a list of files attached to a specified loan. The response includes all properties for all assigned and unassigned file attachments.
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Loan GUID</param>
        /// <returns>ApiResponse of List&lt;EFolderAttachmentContract&gt;</returns>
        public ApiResponse< List<EFolderAttachmentContract> > GetAttachmentsWithHttpInfo (string loanId)
        {
            // verify the required parameter 'loanId' is set
            if (loanId == null)
                throw new ApiException(400, "Missing required parameter 'loanId' when calling AttachmentsApi->GetAttachments");

            var localVarPath = "/encompass/v1/loans/{loanId}/attachments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loanId != null) localVarPathParams.Add("loanId", Configuration.ApiClient.ParameterToString(loanId)); // path parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAttachments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EFolderAttachmentContract>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EFolderAttachmentContract>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EFolderAttachmentContract>)));
        }

        /// <summary>
        ///  Retrieves a list of files attached to a specified loan. The response includes all properties for all assigned and unassigned file attachments.
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Loan GUID</param>
        /// <returns>Task of List&lt;EFolderAttachmentContract&gt;</returns>
        public async System.Threading.Tasks.Task<List<EFolderAttachmentContract>> GetAttachmentsAsync (string loanId)
        {
             ApiResponse<List<EFolderAttachmentContract>> localVarResponse = await GetAttachmentsAsyncWithHttpInfo(loanId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves a list of files attached to a specified loan. The response includes all properties for all assigned and unassigned file attachments.
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Loan GUID</param>
        /// <returns>Task of ApiResponse (List&lt;EFolderAttachmentContract&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EFolderAttachmentContract>>> GetAttachmentsAsyncWithHttpInfo (string loanId)
        {
            // verify the required parameter 'loanId' is set
            if (loanId == null)
                throw new ApiException(400, "Missing required parameter 'loanId' when calling AttachmentsApi->GetAttachments");

            var localVarPath = "/encompass/v1/loans/{loanId}/attachments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loanId != null) localVarPathParams.Add("loanId", Configuration.ApiClient.ParameterToString(loanId)); // path parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAttachments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EFolderAttachmentContract>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EFolderAttachmentContract>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EFolderAttachmentContract>)));
        }

        /// <summary>
        ///  Updates properties for a specified file attachment.
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment GUID</param>
        /// <param name="loanId">Loan GUID</param>
        /// <param name="view"> (optional)</param>
        /// <param name="input"> (optional)</param>
        /// <returns>Object</returns>
        public Object UpdateAttachment (string attachmentId, string loanId, string view = null, EFolderAttachmentContract input = null)
        {
             ApiResponse<Object> localVarResponse = UpdateAttachmentWithHttpInfo(attachmentId, loanId, view, input);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates properties for a specified file attachment.
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment GUID</param>
        /// <param name="loanId">Loan GUID</param>
        /// <param name="view"> (optional)</param>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateAttachmentWithHttpInfo (string attachmentId, string loanId, string view = null, EFolderAttachmentContract input = null)
        {
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling AttachmentsApi->UpdateAttachment");
            // verify the required parameter 'loanId' is set
            if (loanId == null)
                throw new ApiException(400, "Missing required parameter 'loanId' when calling AttachmentsApi->UpdateAttachment");

            var localVarPath = "/encompass/v1/loans/{loanId}/attachments/{attachmentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentId != null) localVarPathParams.Add("attachmentId", Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter
            if (loanId != null) localVarPathParams.Add("loanId", Configuration.ApiClient.ParameterToString(loanId)); // path parameter
            if (view != null) localVarQueryParams.Add("view", Configuration.ApiClient.ParameterToString(view)); // query parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Updates properties for a specified file attachment.
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment GUID</param>
        /// <param name="loanId">Loan GUID</param>
        /// <param name="view"> (optional)</param>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateAttachmentAsync (string attachmentId, string loanId, string view = null, EFolderAttachmentContract input = null)
        {
             ApiResponse<Object> localVarResponse = await UpdateAttachmentAsyncWithHttpInfo(attachmentId, loanId, view, input);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Updates properties for a specified file attachment.
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment GUID</param>
        /// <param name="loanId">Loan GUID</param>
        /// <param name="view"> (optional)</param>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAttachmentAsyncWithHttpInfo (string attachmentId, string loanId, string view = null, EFolderAttachmentContract input = null)
        {
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling AttachmentsApi->UpdateAttachment");
            // verify the required parameter 'loanId' is set
            if (loanId == null)
                throw new ApiException(400, "Missing required parameter 'loanId' when calling AttachmentsApi->UpdateAttachment");

            var localVarPath = "/encompass/v1/loans/{loanId}/attachments/{attachmentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentId != null) localVarPathParams.Add("attachmentId", Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter
            if (loanId != null) localVarPathParams.Add("loanId", Configuration.ApiClient.ParameterToString(loanId)); // path parameter
            if (view != null) localVarQueryParams.Add("view", Configuration.ApiClient.ParameterToString(view)); // query parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Retrieves the URL for uploading an attachment. This URL is time sensitive. It must be invoked as a PUT with the attachment converted to a byteStream within the request body. The attachment ID is returned in location attribute of the PUT call&#39;s response header.
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Loan GUID</param>
        /// <param name="view">Acceptable value is ID/Entity. Specifying this value will retrieve the ID in the subsequent URL PUT call (optional)</param>
        /// <param name="input"> (optional)</param>
        /// <returns>EFolderMediaUrlContract</returns>
        public EFolderMediaUrlContract UploadAttachment (string loanId, string view = null, EFolderMediaUrlContract input = null)
        {
             ApiResponse<EFolderMediaUrlContract> localVarResponse = UploadAttachmentWithHttpInfo(loanId, view, input);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves the URL for uploading an attachment. This URL is time sensitive. It must be invoked as a PUT with the attachment converted to a byteStream within the request body. The attachment ID is returned in location attribute of the PUT call&#39;s response header.
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Loan GUID</param>
        /// <param name="view">Acceptable value is ID/Entity. Specifying this value will retrieve the ID in the subsequent URL PUT call (optional)</param>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of EFolderMediaUrlContract</returns>
        public ApiResponse< EFolderMediaUrlContract > UploadAttachmentWithHttpInfo (string loanId, string view = null, EFolderMediaUrlContract input = null)
        {
            // verify the required parameter 'loanId' is set
            if (loanId == null)
                throw new ApiException(400, "Missing required parameter 'loanId' when calling AttachmentsApi->UploadAttachment");

            var localVarPath = "/encompass/v1/loans/{loanId}/attachments/url";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loanId != null) localVarPathParams.Add("loanId", Configuration.ApiClient.ParameterToString(loanId)); // path parameter
            if (view != null) localVarQueryParams.Add("view", Configuration.ApiClient.ParameterToString(view)); // query parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EFolderMediaUrlContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EFolderMediaUrlContract) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EFolderMediaUrlContract)));
        }

        /// <summary>
        ///  Retrieves the URL for uploading an attachment. This URL is time sensitive. It must be invoked as a PUT with the attachment converted to a byteStream within the request body. The attachment ID is returned in location attribute of the PUT call&#39;s response header.
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Loan GUID</param>
        /// <param name="view">Acceptable value is ID/Entity. Specifying this value will retrieve the ID in the subsequent URL PUT call (optional)</param>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of EFolderMediaUrlContract</returns>
        public async System.Threading.Tasks.Task<EFolderMediaUrlContract> UploadAttachmentAsync (string loanId, string view = null, EFolderMediaUrlContract input = null)
        {
             ApiResponse<EFolderMediaUrlContract> localVarResponse = await UploadAttachmentAsyncWithHttpInfo(loanId, view, input);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves the URL for uploading an attachment. This URL is time sensitive. It must be invoked as a PUT with the attachment converted to a byteStream within the request body. The attachment ID is returned in location attribute of the PUT call&#39;s response header.
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Loan GUID</param>
        /// <param name="view">Acceptable value is ID/Entity. Specifying this value will retrieve the ID in the subsequent URL PUT call (optional)</param>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse (EFolderMediaUrlContract)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EFolderMediaUrlContract>> UploadAttachmentAsyncWithHttpInfo (string loanId, string view = null, EFolderMediaUrlContract input = null)
        {
            // verify the required parameter 'loanId' is set
            if (loanId == null)
                throw new ApiException(400, "Missing required parameter 'loanId' when calling AttachmentsApi->UploadAttachment");

            var localVarPath = "/encompass/v1/loans/{loanId}/attachments/url";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loanId != null) localVarPathParams.Add("loanId", Configuration.ApiClient.ParameterToString(loanId)); // path parameter
            if (view != null) localVarQueryParams.Add("view", Configuration.ApiClient.ParameterToString(view)); // query parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EFolderMediaUrlContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EFolderMediaUrlContract) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EFolderMediaUrlContract)));
        }

    }
}
